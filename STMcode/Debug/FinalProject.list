
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  08014e40  08014e40  00024e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156a4  080156a4  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  080156a4  080156a4  000256a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156ac  080156ac  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156ac  080156ac  000256ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156b0  080156b0  000256b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  080156b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e2c  20000248  080158f8  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002074  080158f8  00032074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8c3  00000000  00000000  000302b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003908  00000000  00000000  0004fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  00053488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ca  00000000  00000000  00055028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8d5  00000000  00000000  000565f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222cc  00000000  00000000  00081ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f70d  00000000  00000000  000a4193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f68  00000000  00000000  001b38a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001bc808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014e24 	.word	0x08014e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08014e24 	.word	0x08014e24

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9bb 	b.w	8000f60 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f8fb 	bl	8001168 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	20d0      	movs	r0, #208	; 0xd0
 8000f7a:	f000 f8b1 	bl	80010e0 <bme68x_get_regs>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d114      	bne.n	8000fb4 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b61      	cmp	r3, #97	; 0x61
 8000f90:	d10e      	bne.n	8000fb0 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 f858 	bl	8003048 <read_variant_id>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d107      	bne.n	8000fb4 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f001 ff4b 	bl	8002e40 <get_calib_data>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e001      	b.n	8000fb4 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000fb0:	23fd      	movs	r3, #253	; 0xfd
 8000fb2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f001 fd07 	bl	80029f4 <null_ptr_check>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d16c      	bne.n	80010ce <bme68x_set_regs+0x10e>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d069      	beq.n	80010ce <bme68x_set_regs+0x10e>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d066      	beq.n	80010ce <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d05d      	beq.n	80010c2 <bme68x_set_regs+0x102>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0a      	cmp	r3, #10
 800100a:	d85a      	bhi.n	80010c2 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 800100c:	2300      	movs	r3, #0
 800100e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001010:	e034      	b.n	800107c <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	7b1b      	ldrb	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800101a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fc24 	bl	8002872 <set_mem_page>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	3328      	adds	r3, #40	; 0x28
 8001044:	443b      	add	r3, r7
 8001046:	f803 2c18 	strb.w	r2, [r3, #-24]
 800104a:	e009      	b.n	8001060 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 800104c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	441a      	add	r2, r3
 8001052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	3328      	adds	r3, #40	; 0x28
 800105a:	443b      	add	r3, r7
 800105c:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	441a      	add	r2, r3
 8001066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	3301      	adds	r3, #1
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	3328      	adds	r3, #40	; 0x28
 8001070:	443b      	add	r3, r7
 8001072:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8001076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001078:	3301      	adds	r3, #1
 800107a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800107c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8c6      	bhi.n	8001012 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11e      	bne.n	80010ca <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001090:	7c38      	ldrb	r0, [r7, #16]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	1e5a      	subs	r2, r3, #1
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685d      	ldr	r5, [r3, #4]
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	1c59      	adds	r1, r3, #1
 80010a2:	462b      	mov	r3, r5
 80010a4:	47a0      	blx	r4
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 80010ba:	23fe      	movs	r3, #254	; 0xfe
 80010bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 80010c0:	e003      	b.n	80010ca <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 80010c2:	23fc      	movs	r3, #252	; 0xfc
 80010c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010c8:	e004      	b.n	80010d4 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 80010ca:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010cc:	e002      	b.n	80010d4 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010ce:	23ff      	movs	r3, #255	; 0xff
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80010d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}

080010e0 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f001 fc7f 	bl	80029f4 <null_ptr_check>
 80010f6:	4603      	mov	r3, r0
 80010f8:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 80010fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12a      	bne.n	8001158 <bme68x_get_regs+0x78>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d027      	beq.n	8001158 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10e      	bne.n	800112e <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fbac 	bl	8002872 <set_mem_page>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 800111e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112c:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	7bf8      	ldrb	r0, [r7, #15]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	47a0      	blx	r4
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8001152:	23fe      	movs	r3, #254	; 0xfe
 8001154:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8001156:	e001      	b.n	800115c <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001158:	23ff      	movs	r3, #255	; 0xff
 800115a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800115c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001170:	23e0      	movs	r3, #224	; 0xe0
 8001172:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001174:	23b6      	movs	r3, #182	; 0xb6
 8001176:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f001 fc3b 	bl	80029f4 <null_ptr_check>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d12b      	bne.n	80011e2 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d104      	bne.n	800119c <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 fbd2 	bl	800293c <get_mem_page>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d11e      	bne.n	80011e2 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011a4:	f107 010d 	add.w	r1, r7, #13
 80011a8:	f107 000e 	add.w	r0, r7, #14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f7ff ff06 	bl	8000fc0 <bme68x_set_regs>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d110      	bne.n	80011e2 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6852      	ldr	r2, [r2, #4]
 80011c8:	4611      	mov	r1, r2
 80011ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80011ce:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d104      	bne.n	80011e2 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fbaf 	bl	800293c <get_mem_page>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	77bb      	strb	r3, [r7, #30]
 80011fe:	2301      	movs	r3, #1
 8001200:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001202:	4a7c      	ldr	r2, [pc, #496]	; (80013f4 <bme68x_set_conf+0x204>)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120c:	6018      	str	r0, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	2300      	movs	r3, #0
 8001218:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f94a 	bl	80014ba <bme68x_get_op_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 800122a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f8df 	bl	80013f8 <bme68x_set_op_mode>
 800123a:	4603      	mov	r3, r0
 800123c:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	77fb      	strb	r3, [r7, #31]
 8001248:	e0b2      	b.n	80013b0 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 800124a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 80ae 	bne.w	80013b0 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001254:	7d38      	ldrb	r0, [r7, #20]
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2205      	movs	r2, #5
 800125e:	f7ff ff3f 	bl	80010e0 <bme68x_get_regs>
 8001262:	4603      	mov	r3, r0
 8001264:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 800126e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d108      	bne.n	8001288 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3303      	adds	r3, #3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	2107      	movs	r1, #7
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fb8b 	bl	800299a <boundary_check>
 8001284:	4603      	mov	r3, r0
 8001286:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001288:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	2105      	movs	r1, #5
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fb7e 	bl	800299a <boundary_check>
 800129e:	4603      	mov	r3, r0
 80012a0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3302      	adds	r3, #2
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	2105      	movs	r1, #5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fb71 	bl	800299a <boundary_check>
 80012b8:	4603      	mov	r3, r0
 80012ba:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	2105      	movs	r1, #5
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fb65 	bl	800299a <boundary_check>
 80012d0:	4603      	mov	r3, r0
 80012d2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	2108      	movs	r1, #8
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fb58 	bl	800299a <boundary_check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d15c      	bne.n	80013b0 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80012f6:	7c3b      	ldrb	r3, [r7, #16]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	f023 031c 	bic.w	r3, r3, #28
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	f003 031c 	and.w	r3, r3, #28
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	b25a      	sxtb	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	b25b      	sxtb	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f023 031c 	bic.w	r3, r3, #28
 8001338:	b25a      	sxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	f003 031c 	and.w	r3, r3, #28
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b25b      	sxtb	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001350:	7b7b      	ldrb	r3, [r7, #13]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f023 0307 	bic.w	r3, r3, #7
 8001358:	b25a      	sxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	791b      	ldrb	r3, [r3, #4]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d004      	beq.n	8001380 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001380:	7c3b      	ldrb	r3, [r7, #16]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	b25a      	sxtb	r2, r3
 800138a:	7fbb      	ldrb	r3, [r7, #30]
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	7f7b      	ldrb	r3, [r7, #29]
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 80013b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 80013b8:	f107 010c 	add.w	r1, r7, #12
 80013bc:	f107 0014 	add.w	r0, r7, #20
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2205      	movs	r2, #5
 80013c4:	f7ff fdfc 	bl	8000fc0 <bme68x_set_regs>
 80013c8:	4603      	mov	r3, r0
 80013ca:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013cc:	7f3b      	ldrb	r3, [r7, #28]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <bme68x_set_conf+0x1f8>
 80013d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 80013da:	7f3b      	ldrb	r3, [r7, #28]
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f80a 	bl	80013f8 <bme68x_set_op_mode>
 80013e4:	4603      	mov	r3, r0
 80013e6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08014e40 	.word	0x08014e40

080013f8 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001408:	2374      	movs	r3, #116	; 0x74
 800140a:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800140c:	f107 010d 	add.w	r1, r7, #13
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	2074      	movs	r0, #116	; 0x74
 8001416:	f7ff fe63 	bl	80010e0 <bme68x_get_regs>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11d      	bne.n	8001462 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d016      	beq.n	8001462 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800143e:	f107 010d 	add.w	r1, r7, #13
 8001442:	f107 000c 	add.w	r0, r7, #12
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	f7ff fdb9 	bl	8000fc0 <bme68x_set_regs>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	6852      	ldr	r2, [r2, #4]
 800145a:	4611      	mov	r1, r2
 800145c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001460:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <bme68x_set_op_mode+0x78>
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0cd      	beq.n	800140c <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01b      	beq.n	80014ae <bme68x_set_op_mode+0xb6>
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d117      	bne.n	80014ae <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	b25a      	sxtb	r2, r3
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	b25b      	sxtb	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800149a:	f107 010d 	add.w	r1, r7, #13
 800149e:	f107 000c 	add.w	r0, r7, #12
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f7ff fd8b 	bl	8000fc0 <bme68x_set_regs>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00f      	beq.n	80014ea <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 80014ca:	f107 010e 	add.w	r1, r7, #14
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	2074      	movs	r0, #116	; 0x74
 80014d4:	f7ff fe04 	bl	80010e0 <bme68x_get_regs>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e001      	b.n	80014ee <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80014ea:	23ff      	movs	r3, #255	; 0xff
 80014ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 800150e:	4a34      	ldr	r2, [pc, #208]	; (80015e0 <bme68x_get_meas_dur+0xe4>)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001518:	6018      	str	r0, [r3, #0]
 800151a:	3304      	adds	r3, #4
 800151c:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d058      	beq.n	80015d6 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3301      	adds	r3, #1
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	2105      	movs	r1, #5
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fa34 	bl	800299a <boundary_check>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 8001538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3302      	adds	r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	2105      	movs	r1, #5
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fa26 	bl	800299a <boundary_check>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 8001554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	2105      	movs	r1, #5
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fa19 	bl	800299a <boundary_check>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 800156e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001572:	2b00      	cmp	r3, #0
 8001574:	d12f      	bne.n	80015d6 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	3328      	adds	r3, #40	; 0x28
 800157c:	443b      	add	r3, r7
 800157e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001582:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	3328      	adds	r3, #40	; 0x28
 800158a:	443b      	add	r3, r7
 800158c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001590:	461a      	mov	r2, r3
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3328      	adds	r3, #40	; 0x28
 800159e:	443b      	add	r3, r7
 80015a0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80015a4:	461a      	mov	r2, r3
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80015be:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f603 1351 	addw	r3, r3, #2385	; 0x951
 80015c6:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d003      	beq.n	80015d6 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015d4:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 80015d6:	6a3b      	ldr	r3, [r7, #32]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08014e48 	.word	0x08014e48

080015e4 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b09a      	sub	sp, #104	; 0x68
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4603      	mov	r3, r0
 80015f2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8001606:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2248      	movs	r2, #72	; 0x48
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f010 faa9 	bl	8011b72 <memset>

    field_ptr[0] = &field_data[0];
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	3318      	adds	r3, #24
 800162c:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	3330      	adds	r3, #48	; 0x30
 8001634:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f001 f9dc 	bl	80029f4 <null_ptr_check>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 8001642:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80c1 	bne.w	80017ce <bme68x_get_data+0x1ea>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80bd 	beq.w	80017ce <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d11c      	bne.n	8001694 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	2000      	movs	r0, #0
 8001660:	f000 fd8b 	bl	800217a <read_field_data>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 800166a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800166e:	2b00      	cmp	r3, #0
 8001670:	f040 80a1 	bne.w	80017b6 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	da03      	bge.n	8001686 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001684:	e097      	b.n	80017b6 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 800168c:	2302      	movs	r3, #2
 800168e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001692:	e090      	b.n	80017b6 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <bme68x_get_data+0xbe>
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b03      	cmp	r3, #3
 800169e:	f040 8087 	bne.w	80017b0 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80016a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 feb0 	bl	800240e <read_all_field_data>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016c0:	e014      	b.n	80016ec <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80016c2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3368      	adds	r3, #104	; 0x68
 80016ca:	443b      	add	r3, r7
 80016cc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da04      	bge.n	80016e2 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80016d8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016dc:	3301      	adds	r3, #1
 80016de:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80016e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016e6:	3301      	adds	r3, #1
 80016e8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d803      	bhi.n	80016fc <bme68x_get_data+0x118>
 80016f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0e2      	beq.n	80016c2 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001702:	e01c      	b.n	800173e <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001704:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001708:	3301      	adds	r3, #1
 800170a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800170e:	e00d      	b.n	800172c <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001710:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001714:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001718:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fb15 	bl	8002d4c <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001722:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001726:	3301      	adds	r3, #1
 8001728:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800172c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001730:	2b02      	cmp	r3, #2
 8001732:	d9ed      	bls.n	8001710 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001734:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001738:	3301      	adds	r3, #1
 800173a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800173e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001742:	2b01      	cmp	r3, #1
 8001744:	d803      	bhi.n	800174e <bme68x_get_data+0x16a>
 8001746:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0da      	beq.n	8001704 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001754:	e01c      	b.n	8001790 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001756:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	3368      	adds	r3, #104	; 0x68
 800175e:	443b      	add	r3, r7
 8001760:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001764:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	461a      	mov	r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	461c      	mov	r4, r3
 8001778:	460d      	mov	r5, r1
 800177a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001782:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001786:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800178a:	3301      	adds	r3, #1
 800178c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001790:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001794:	2b02      	cmp	r3, #2
 8001796:	d803      	bhi.n	80017a0 <bme68x_get_data+0x1bc>
 8001798:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0da      	beq.n	8001756 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80017a0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 80017ae:	e002      	b.n	80017b6 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 80017bc:	23ff      	movs	r3, #255	; 0xff
 80017be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 80017c2:	e007      	b.n	80017d4 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80017ca:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80017cc:	e002      	b.n	80017d4 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 80017d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3768      	adds	r7, #104	; 0x68
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}

080017e0 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80017f6:	f247 1370 	movw	r3, #29040	; 0x7170
 80017fa:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06e      	beq.n	80018e0 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fdf7 	bl	80013f8 <bme68x_set_op_mode>
 800180a:	4603      	mov	r3, r0
 800180c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 800180e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d108      	bne.n	8001828 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001816:	f107 021c 	add.w	r2, r7, #28
 800181a:	7bf9      	ldrb	r1, [r7, #15]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f001 f908 	bl	8002a34 <set_conf>
 8001824:	4603      	mov	r3, r0
 8001826:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d159      	bne.n	80018e4 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001830:	f107 0118 	add.w	r1, r7, #24
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	2070      	movs	r0, #112	; 0x70
 800183a:	f7ff fc51 	bl	80010e0 <bme68x_get_regs>
 800183e:	4603      	mov	r3, r0
 8001840:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001842:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d14c      	bne.n	80018e4 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10b      	bne.n	800186a <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001852:	2300      	movs	r3, #0
 8001854:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800185e:	2302      	movs	r3, #2
 8001860:	777b      	strb	r3, [r7, #29]
 8001862:	e006      	b.n	8001872 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001864:	2301      	movs	r3, #1
 8001866:	777b      	strb	r3, [r7, #29]
 8001868:	e003      	b.n	8001872 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800186a:	2301      	movs	r3, #1
 800186c:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800186e:	2300      	movs	r3, #0
 8001870:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001872:	7e3b      	ldrb	r3, [r7, #24]
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f023 0308 	bic.w	r3, r3, #8
 800187a:	b25a      	sxtb	r2, r3
 800187c:	7fbb      	ldrb	r3, [r7, #30]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	b25b      	sxtb	r3, r3
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	b25b      	sxtb	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b25b      	sxtb	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001890:	7e7b      	ldrb	r3, [r7, #25]
 8001892:	b25b      	sxtb	r3, r3
 8001894:	f023 030f 	bic.w	r3, r3, #15
 8001898:	b25a      	sxtb	r2, r3
 800189a:	7f3b      	ldrb	r3, [r7, #28]
 800189c:	b25b      	sxtb	r3, r3
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80018ac:	7e7b      	ldrb	r3, [r7, #25]
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	7f7b      	ldrb	r3, [r7, #29]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80018ca:	f107 0118 	add.w	r1, r7, #24
 80018ce:	f107 0014 	add.w	r0, r7, #20
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f7ff fb73 	bl	8000fc0 <bme68x_set_regs>
 80018da:	4603      	mov	r3, r0
 80018dc:	77fb      	strb	r3, [r7, #31]
 80018de:	e001      	b.n	80018e4 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80018e0:	23ff      	movs	r3, #255	; 0xff
 80018e2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80018e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	eddf 6a38 	vldr	s13, [pc, #224]	; 80019e8 <calc_temperature+0xf8>
 8001908:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	8bdb      	ldrh	r3, [r3, #30]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001918:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80019ec <calc_temperature+0xfc>
 800191c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001920:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001944:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80019f0 <calc_temperature+0x100>
 8001948:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	8bdb      	ldrh	r3, [r3, #30]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001958:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80019f4 <calc_temperature+0x104>
 800195c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001960:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80019f0 <calc_temperature+0x100>
 8001972:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	8bdb      	ldrh	r3, [r3, #30]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001982:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80019f4 <calc_temperature+0x104>
 8001986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800198a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800198e:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80019a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80019b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80019c8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019f8 <calc_temperature+0x108>
 80019cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d0:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	ee07 3a90 	vmov	s15, r3
}
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	46800000 	.word	0x46800000
 80019ec:	44800000 	.word	0x44800000
 80019f0:	48000000 	.word	0x48000000
 80019f4:	46000000 	.word	0x46000000
 80019f8:	45a00000 	.word	0x45a00000

080019fc <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001a0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a14:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001c50 <calc_pressure+0x254>
 8001a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a1c:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a36:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001c54 <calc_pressure+0x258>
 8001a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a60:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001c58 <calc_pressure+0x25c>
 8001a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001c5c <calc_pressure+0x260>
 8001ab8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aca:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad6:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001c60 <calc_pressure+0x264>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001ae2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001c64 <calc_pressure+0x268>
 8001aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001c68 <calc_pressure+0x26c>
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8081 	beq.w	8001c34 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b36:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001c6c <calc_pressure+0x270>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001c70 <calc_pressure+0x274>
 8001b4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b78:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001c74 <calc_pressure+0x278>
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001c64 <calc_pressure+0x268>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba2:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001baa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001c78 <calc_pressure+0x27c>
 8001bae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bb2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bb6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001c78 <calc_pressure+0x27c>
 8001bba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bc6:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001c78 <calc_pressure+0x27c>
 8001bca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001be0:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001c54 <calc_pressure+0x258>
 8001be4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001bf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001c7c <calc_pressure+0x280>
 8001c16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c32:	e002      	b.n	8001c3a <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
}
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	477a0000 	.word	0x477a0000
 8001c54:	48000000 	.word	0x48000000
 8001c58:	47800000 	.word	0x47800000
 8001c5c:	46800000 	.word	0x46800000
 8001c60:	49000000 	.word	0x49000000
 8001c64:	47000000 	.word	0x47000000
 8001c68:	49800000 	.word	0x49800000
 8001c6c:	45800000 	.word	0x45800000
 8001c70:	45c35000 	.word	0x45c35000
 8001c74:	4f000000 	.word	0x4f000000
 8001c78:	43800000 	.word	0x43800000
 8001c7c:	43000000 	.word	0x43000000

08001c80 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001c92:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001dfc <calc_humidity+0x17c>
 8001c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9a:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	8a1b      	ldrh	r3, [r3, #16]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001cb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001cce:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001cd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	8a5b      	ldrh	r3, [r3, #18]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001e00 <calc_humidity+0x180>
 8001cf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001e04 <calc_humidity+0x184>
 8001d0c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d1c:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001e08 <calc_humidity+0x188>
 8001d32:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001d36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d42:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	7ddb      	ldrb	r3, [r3, #23]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d66:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001e04 <calc_humidity+0x184>
 8001d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6e:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d80:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e0c <calc_humidity+0x18c>
 8001d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d88:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001d8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001e10 <calc_humidity+0x190>
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	dd02      	ble.n	8001dd4 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <calc_humidity+0x194>)
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e009      	b.n	8001de8 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001dd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d502      	bpl.n	8001de8 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	ee07 3a90 	vmov	s15, r3
}
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	3724      	adds	r7, #36	; 0x24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	45a00000 	.word	0x45a00000
 8001e00:	48800000 	.word	0x48800000
 8001e04:	46800000 	.word	0x46800000
 8001e08:	49800000 	.word	0x49800000
 8001e0c:	4a000000 	.word	0x4a000000
 8001e10:	42c80000 	.word	0x42c80000
 8001e14:	42c80000 	.word	0x42c80000

08001e18 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001e18:	b4b0      	push	{r4, r5, r7}
 8001e1a:	b0a9      	sub	sp, #164	; 0xa4
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	603a      	str	r2, [r7, #0]
 8001e22:	80fb      	strh	r3, [r7, #6]
 8001e24:	460b      	mov	r3, r1
 8001e26:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <calc_gas_resistance_low+0x12c>)
 8001e4c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001e50:	461d      	mov	r5, r3
 8001e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001e66:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <calc_gas_resistance_low+0x130>)
 8001e68:	f107 0408 	add.w	r4, r7, #8
 8001e6c:	461d      	mov	r5, r3
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001f4c <calc_gas_resistance_low+0x134>
 8001e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ea0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	33a0      	adds	r3, #160	; 0xa0
 8001eaa:	443b      	add	r3, r7
 8001eac:	3b58      	subs	r3, #88	; 0x58
 8001eae:	ed93 7a00 	vldr	s14, [r3]
 8001eb2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001f50 <calc_gas_resistance_low+0x138>
 8001eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ec2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	33a0      	adds	r3, #160	; 0xa0
 8001ed4:	443b      	add	r3, r7
 8001ed6:	3b98      	subs	r3, #152	; 0x98
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001f50 <calc_gas_resistance_low+0x138>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eec:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001ef0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ef4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f54 <calc_gas_resistance_low+0x13c>
 8001ef8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001efc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001f08:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f58 <calc_gas_resistance_low+0x140>
 8001f0c:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001f10:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001f14:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f34:	ee07 3a90 	vmov	s15, r3
}
 8001f38:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3c:	37a4      	adds	r7, #164	; 0xa4
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bcb0      	pop	{r4, r5, r7}
 8001f42:	4770      	bx	lr
 8001f44:	08014e50 	.word	0x08014e50
 8001f48:	08014e90 	.word	0x08014e90
 8001f4c:	44a78000 	.word	0x44a78000
 8001f50:	42c80000 	.word	0x42c80000
 8001f54:	340637bd 	.word	0x340637bd
 8001f58:	44000000 	.word	0x44000000

08001f5c <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	460a      	mov	r2, r1
 8001f66:	80fb      	strh	r3, [r7, #6]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001f6c:	797b      	ldrb	r3, [r7, #5]
 8001f6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001f7e:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001fcc <calc_gas_resistance_high+0x70>
 8001fa0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	ee07 3a90 	vmov	s15, r3
}
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	49742400 	.word	0x49742400

08001fd0 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fe2:	d902      	bls.n	8001fea <calc_res_heat+0x1a>
    {
        temp = 400;
 8001fe4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001fe8:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002000:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002114 <calc_res_heat+0x144>
 8002004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002008:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002118 <calc_res_heat+0x148>
 800201e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002022:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800211c <calc_res_heat+0x14c>
 8002026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002120 <calc_res_heat+0x150>
 800202e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002032:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002044:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002124 <calc_res_heat+0x154>
 8002048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204c:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800205a:	edd7 7a08 	vldr	s15, [r7, #32]
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002084:	edd7 7a07 	vldr	s15, [r7, #28]
 8002088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80020aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ae:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020cc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002128 <calc_res_heat+0x158>
 80020d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80020dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80020e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80020e4:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80020e8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80020f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800212c <calc_res_heat+0x15c>
 80020f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002100:	793b      	ldrb	r3, [r7, #4]
 8002102:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
}
 8002106:	4618      	mov	r0, r3
 8002108:	372c      	adds	r7, #44	; 0x2c
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	42440000 	.word	0x42440000
 8002118:	47000000 	.word	0x47000000
 800211c:	3a03126f 	.word	0x3a03126f
 8002120:	3b1a0275 	.word	0x3b1a0275
 8002124:	44800000 	.word	0x44800000
 8002128:	3b03126f 	.word	0x3b03126f
 800212c:	4059999a 	.word	0x4059999a

08002130 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8002144:	d308      	bcc.n	8002158 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8002146:	23ff      	movs	r3, #255	; 0xff
 8002148:	73bb      	strb	r3, [r7, #14]
 800214a:	e00f      	b.n	800216c <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	2b3f      	cmp	r3, #63	; 0x3f
 800215c:	d8f6      	bhi.n	800214c <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4413      	add	r3, r2
 800216a:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 800216c:	7bbb      	ldrb	r3, [r7, #14]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b08e      	sub	sp, #56	; 0x38
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80021a0:	2305      	movs	r3, #5
 80021a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 80021a6:	e123      	b.n	80023f0 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	461a      	mov	r2, r3
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	331d      	adds	r3, #29
 80021b4:	b2d8      	uxtb	r0, r3
 80021b6:	f107 0110 	add.w	r1, r7, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2211      	movs	r2, #17
 80021be:	f7fe ff8f 	bl	80010e0 <bme68x_get_regs>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80021ce:	23ff      	movs	r3, #255	; 0xff
 80021d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 80021d4:	e115      	b.n	8002402 <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80021d6:	7c3b      	ldrb	r3, [r7, #16]
 80021d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80021e2:	7c3b      	ldrb	r3, [r7, #16]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80021ee:	7c7a      	ldrb	r2, [r7, #17]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80021f4:	7cbb      	ldrb	r3, [r7, #18]
 80021f6:	031a      	lsls	r2, r3, #12
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4313      	orrs	r3, r2
 80021fe:	7d3a      	ldrb	r2, [r7, #20]
 8002200:	0912      	lsrs	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4313      	orrs	r3, r2
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002208:	7d7b      	ldrb	r3, [r7, #21]
 800220a:	031a      	lsls	r2, r3, #12
 800220c:	7dbb      	ldrb	r3, [r7, #22]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4313      	orrs	r3, r2
 8002212:	7dfa      	ldrb	r2, [r7, #23]
 8002214:	0912      	lsrs	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4313      	orrs	r3, r2
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800221c:	7e3b      	ldrb	r3, [r7, #24]
 800221e:	b29b      	uxth	r3, r3
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b29a      	uxth	r2, r3
 8002224:	7e7b      	ldrb	r3, [r7, #25]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800222c:	7f7b      	ldrb	r3, [r7, #29]
 800222e:	b29b      	uxth	r3, r3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	b29a      	uxth	r2, r3
 8002234:	7fbb      	ldrb	r3, [r7, #30]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	b2db      	uxtb	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002240:	7ffb      	ldrb	r3, [r7, #31]
 8002242:	b29b      	uxth	r3, r3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	b29a      	uxth	r2, r3
 8002248:	f897 3020 	ldrb.w	r3, [r7, #32]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	b2db      	uxtb	r3, r3
 8002250:	b29b      	uxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002256:	7fbb      	ldrb	r3, [r7, #30]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d11c      	bne.n	80022ae <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25a      	sxtb	r2, r3
 800227a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800227e:	b25b      	sxtb	r3, r3
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	b25b      	sxtb	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b25a      	sxtb	r2, r3
 8002296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e019      	b.n	80022e2 <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	7fbb      	ldrb	r3, [r7, #30]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b25a      	sxtb	r2, r3
 80022ce:	7fbb      	ldrb	r3, [r7, #30]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da70      	bge.n	80023ce <read_field_data+0x254>
 80022ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d16c      	bne.n	80023ce <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	335a      	adds	r3, #90	; 0x5a
 80022fa:	b2d8      	uxtb	r0, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1cd9      	adds	r1, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f7fe feec 	bl	80010e0 <bme68x_get_regs>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 800230e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	b2d8      	uxtb	r0, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1d19      	adds	r1, r3, #4
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f7fe fedb 	bl	80010e0 <bme68x_get_regs>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002330:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10c      	bne.n	8002352 <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	3364      	adds	r3, #100	; 0x64
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1d59      	adds	r1, r3, #5
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f7fe feca 	bl	80010e0 <bme68x_get_regs>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002352:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002356:	2b00      	cmp	r3, #0
 8002358:	d139      	bne.n	80023ce <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800235e:	f7ff fac7 	bl	80018f0 <calc_temperature>
 8002362:	eef0 7a40 	vmov.f32	s15, s0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002370:	f7ff fb44 	bl	80019fc <calc_pressure>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 800237e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fc7c 	bl	8001c80 <calc_humidity>
 8002388:	eef0 7a40 	vmov.f32	s15, s0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10c      	bne.n	80023b4 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800239a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800239e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fdda 	bl	8001f5c <calc_gas_resistance_high>
 80023a8:	eef0 7a40 	vmov.f32	s15, s0
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 80023b2:	e026      	b.n	8002402 <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80023b4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80023b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fd2b 	bl	8001e18 <calc_gas_resistance_low>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 80023cc:	e019      	b.n	8002402 <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 80023ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	4611      	mov	r1, r2
 80023e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80023e4:	4798      	blx	r3
        }

        tries--;
 80023e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 80023f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <read_field_data+0x288>
 80023f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f43f aed3 	beq.w	80021a8 <read_field_data+0x2e>
    }

    return rslt;
 8002402:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002406:	4618      	mov	r0, r3
 8002408:	3738      	adds	r7, #56	; 0x38
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b09d      	sub	sp, #116	; 0x74
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
 8002422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002426:	222f      	movs	r2, #47	; 0x2f
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f00f fba1 	bl	8011b72 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <read_all_field_data+0x5c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <read_all_field_data+0x5c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3308      	adds	r3, #8
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002464:	23ff      	movs	r3, #255	; 0xff
 8002466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 800246a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002472:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2233      	movs	r2, #51	; 0x33
 800247a:	201d      	movs	r0, #29
 800247c:	f7fe fe30 	bl	80010e0 <bme68x_get_regs>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002486:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800248e:	f107 0108 	add.w	r1, r7, #8
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	221e      	movs	r2, #30
 8002496:	2050      	movs	r0, #80	; 0x50
 8002498:	f7fe fe22 	bl	80010e0 <bme68x_get_regs>
 800249c:	4603      	mov	r3, r0
 800249e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80024a8:	e1d4      	b.n	8002854 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80024aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024ae:	461a      	mov	r2, r3
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	4413      	add	r3, r2
 80024b4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80024b8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024bc:	3370      	adds	r3, #112	; 0x70
 80024be:	443b      	add	r3, r7
 80024c0:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80024c4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	440b      	add	r3, r1
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80024d8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024dc:	3370      	adds	r3, #112	; 0x70
 80024de:	443b      	add	r3, r7
 80024e0:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80024e4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	440b      	add	r3, r1
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f002 020f 	and.w	r2, r2, #15
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80024f8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	440b      	add	r3, r1
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3270      	adds	r2, #112	; 0x70
 800250c:	443a      	add	r2, r7
 800250e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002512:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002514:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002518:	3302      	adds	r3, #2
 800251a:	3370      	adds	r3, #112	; 0x70
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002522:	031a      	lsls	r2, r3, #12
 8002524:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002528:	3303      	adds	r3, #3
 800252a:	3370      	adds	r3, #112	; 0x70
 800252c:	443b      	add	r3, r7
 800252e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002536:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800253a:	3204      	adds	r2, #4
 800253c:	3270      	adds	r2, #112	; 0x70
 800253e:	443a      	add	r2, r7
 8002540:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002544:	0912      	lsrs	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002548:	4313      	orrs	r3, r2
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 800254c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002550:	3305      	adds	r3, #5
 8002552:	3370      	adds	r3, #112	; 0x70
 8002554:	443b      	add	r3, r7
 8002556:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800255a:	031a      	lsls	r2, r3, #12
 800255c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002560:	3306      	adds	r3, #6
 8002562:	3370      	adds	r3, #112	; 0x70
 8002564:	443b      	add	r3, r7
 8002566:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 800256e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002572:	3207      	adds	r2, #7
 8002574:	3270      	adds	r2, #112	; 0x70
 8002576:	443a      	add	r2, r7
 8002578:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800257c:	0912      	lsrs	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002580:	4313      	orrs	r3, r2
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002584:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002588:	3308      	adds	r3, #8
 800258a:	3370      	adds	r3, #112	; 0x70
 800258c:	443b      	add	r3, r7
 800258e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002592:	b29b      	uxth	r3, r3
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b29a      	uxth	r2, r3
 8002598:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800259c:	3309      	adds	r3, #9
 800259e:	3370      	adds	r3, #112	; 0x70
 80025a0:	443b      	add	r3, r7
 80025a2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80025ae:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025b2:	330d      	adds	r3, #13
 80025b4:	3370      	adds	r3, #112	; 0x70
 80025b6:	443b      	add	r3, r7
 80025b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025c6:	330e      	adds	r3, #14
 80025c8:	3370      	adds	r3, #112	; 0x70
 80025ca:	443b      	add	r3, r7
 80025cc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80025dc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025e0:	330f      	adds	r3, #15
 80025e2:	3370      	adds	r3, #112	; 0x70
 80025e4:	443b      	add	r3, r7
 80025e6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025f4:	3310      	adds	r3, #16
 80025f6:	3370      	adds	r3, #112	; 0x70
 80025f8:	443b      	add	r3, r7
 80025fa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	b2db      	uxtb	r3, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800260a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800260e:	330e      	adds	r3, #14
 8002610:	3370      	adds	r3, #112	; 0x70
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002620:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002624:	3310      	adds	r3, #16
 8002626:	3370      	adds	r3, #112	; 0x70
 8002628:	443b      	add	r3, r7
 800262a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d13a      	bne.n	80026b4 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800263e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b25a      	sxtb	r2, r3
 800264e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002652:	3310      	adds	r3, #16
 8002654:	3370      	adds	r3, #112	; 0x70
 8002656:	443b      	add	r3, r7
 8002658:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	b25b      	sxtb	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b259      	sxtb	r1, r3
 8002668:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b2ca      	uxtb	r2, r1
 8002676:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002678:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25a      	sxtb	r2, r3
 8002688:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800268c:	3310      	adds	r3, #16
 800268e:	3370      	adds	r3, #112	; 0x70
 8002690:	443b      	add	r3, r7
 8002692:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002696:	b25b      	sxtb	r3, r3
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	b25b      	sxtb	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b259      	sxtb	r1, r3
 80026a2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e039      	b.n	8002728 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80026b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026c8:	330e      	adds	r3, #14
 80026ca:	3370      	adds	r3, #112	; 0x70
 80026cc:	443b      	add	r3, r7
 80026ce:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b259      	sxtb	r1, r3
 80026de:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b2ca      	uxtb	r2, r1
 80026ec:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80026ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b25a      	sxtb	r2, r3
 80026fe:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002702:	330e      	adds	r3, #14
 8002704:	3370      	adds	r3, #112	; 0x70
 8002706:	443b      	add	r3, r7
 8002708:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b259      	sxtb	r1, r3
 8002718:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002728:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	4619      	mov	r1, r3
 8002738:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8002748:	443a      	add	r2, r7
 800274a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800274e:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002750:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	f103 020a 	add.w	r2, r3, #10
 8002762:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	440b      	add	r3, r1
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3270      	adds	r2, #112	; 0x70
 8002770:	443a      	add	r2, r7
 8002772:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002776:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002778:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	f103 0214 	add.w	r2, r3, #20
 800278a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	440b      	add	r3, r1
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3270      	adds	r2, #112	; 0x70
 8002798:	443a      	add	r2, r7
 800279a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800279e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80027a0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80027b0:	f7ff f89e 	bl	80018f0 <calc_temperature>
 80027b4:	eef0 7a40 	vmov.f32	s15, s0
 80027b8:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80027bc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	681c      	ldr	r4, [r3, #0]
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027cc:	f7ff f916 	bl	80019fc <calc_pressure>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80027d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa48 	bl	8001c80 <calc_humidity>
 80027f0:	eef0 7a40 	vmov.f32	s15, s0
 80027f4:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d112      	bne.n	8002826 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002800:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	681c      	ldr	r4, [r3, #0]
 800280c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002810:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fba0 	bl	8001f5c <calc_gas_resistance_high>
 800281c:	eef0 7a40 	vmov.f32	s15, s0
 8002820:	edc4 7a05 	vstr	s15, [r4, #20]
 8002824:	e011      	b.n	800284a <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002826:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	681c      	ldr	r4, [r3, #0]
 8002832:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 8002836:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff faeb 	bl	8001e18 <calc_gas_resistance_low>
 8002842:	eef0 7a40 	vmov.f32	s15, s0
 8002846:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800284a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800284e:	3301      	adds	r3, #1
 8002850:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002854:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002858:	2b02      	cmp	r3, #2
 800285a:	d804      	bhi.n	8002866 <read_all_field_data+0x458>
 800285c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002860:	2b00      	cmp	r3, #0
 8002862:	f43f ae22 	beq.w	80024aa <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8002866:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800286a:	4618      	mov	r0, r3
 800286c:	3774      	adds	r7, #116	; 0x74
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8002872:	b590      	push	{r4, r7, lr}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	6039      	str	r1, [r7, #0]
 800287c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f000 f8b8 	bl	80029f4 <null_ptr_check>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d14f      	bne.n	8002930 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da02      	bge.n	800289e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002898:	2300      	movs	r3, #0
 800289a:	73bb      	strb	r3, [r7, #14]
 800289c:	e001      	b.n	80028a2 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800289e:	2310      	movs	r3, #16
 80028a0:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	7b5b      	ldrb	r3, [r3, #13]
 80028a6:	7bba      	ldrb	r2, [r7, #14]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d041      	beq.n	8002930 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7bba      	ldrb	r2, [r7, #14]
 80028b0:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f107 010d 	add.w	r1, r7, #13
 80028be:	2201      	movs	r2, #1
 80028c0:	20f3      	movs	r0, #243	; 0xf3
 80028c2:	47a0      	blx	r4
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80028d8:	23fe      	movs	r3, #254	; 0xfe
 80028da:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80028dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d125      	bne.n	8002930 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80028e4:	7b7b      	ldrb	r3, [r7, #13]
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7b5b      	ldrb	r3, [r3, #13]
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	b25a      	sxtb	r2, r3
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	b25b      	sxtb	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f107 010d 	add.w	r1, r7, #13
 8002912:	2201      	movs	r2, #1
 8002914:	2073      	movs	r0, #115	; 0x73
 8002916:	47a0      	blx	r4
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 800292c:	23fe      	movs	r3, #254	; 0xfe
 800292e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}

0800293c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f855 	bl	80029f4 <null_ptr_check>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11b      	bne.n	800298e <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f107 010e 	add.w	r1, r7, #14
 8002962:	2201      	movs	r2, #1
 8002964:	20f3      	movs	r0, #243	; 0xf3
 8002966:	47a0      	blx	r4
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 800297c:	23fe      	movs	r3, #254	; 0xfe
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e005      	b.n	800298e <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8002982:	7bbb      	ldrb	r3, [r7, #14]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}

0800299a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	460b      	mov	r3, r1
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f823 	bl	80029f4 <null_ptr_check>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <boundary_check+0x4a>
 80029b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	7afa      	ldrb	r2, [r7, #11]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d20e      	bcs.n	80029e8 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	7afa      	ldrb	r2, [r7, #11]
 80029ce:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 80029e2:	e001      	b.n	80029e8 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80029e4:	23ff      	movs	r3, #255	; 0xff
 80029e6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80029e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <null_ptr_check+0x2a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <null_ptr_check+0x2a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <null_ptr_check+0x2a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8002a1e:	23ff      	movs	r3, #255	; 0xff
 8002a20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b093      	sub	sp, #76	; 0x4c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8002a50:	236e      	movs	r3, #110	; 0x6e
 8002a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a56:	4aa1      	ldr	r2, [pc, #644]	; (8002cdc <set_conf+0x2a8>)
 8002a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a5e:	c303      	stmia	r3!, {r0, r1}
 8002a60:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a62:	4a9e      	ldr	r2, [pc, #632]	; (8002cdc <set_conf+0x2a8>)
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a6a:	c303      	stmia	r3!, {r0, r1}
 8002a6c:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a6e:	4a9b      	ldr	r2, [pc, #620]	; (8002cdc <set_conf+0x2a8>)
 8002a70:	f107 0320 	add.w	r3, r7, #32
 8002a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a76:	c303      	stmia	r3!, {r0, r1}
 8002a78:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a7a:	4a98      	ldr	r2, [pc, #608]	; (8002cdc <set_conf+0x2a8>)
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a82:	c303      	stmia	r3!, {r0, r1}
 8002a84:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d024      	beq.n	8002ad6 <set_conf+0xa2>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	f300 80f9 	bgt.w	8002c84 <set_conf+0x250>
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d002      	beq.n	8002a9c <set_conf+0x68>
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d07c      	beq.n	8002b94 <set_conf+0x160>
 8002a9a:	e0f3      	b.n	8002c84 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8002a9c:	235a      	movs	r3, #90	; 0x5a
 8002a9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	885b      	ldrh	r3, [r3, #2]
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fa91 	bl	8001fd0 <calc_res_heat>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002ab4:	2364      	movs	r3, #100	; 0x64
 8002ab6:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	889b      	ldrh	r3, [r3, #4]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fb36 	bl	8002130 <calc_gas_wait>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002ad4:	e0db      	b.n	8002c8e <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <set_conf+0xb2>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002ae6:	23ff      	movs	r3, #255	; 0xff
 8002ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002aec:	e0cf      	b.n	8002c8e <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002af4:	e03f      	b.n	8002b76 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002af6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002afa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002afe:	325a      	adds	r2, #90	; 0x5a
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	3348      	adds	r3, #72	; 0x48
 8002b04:	443b      	add	r3, r7
 8002b06:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fa56 	bl	8001fd0 <calc_res_heat>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b2c:	443b      	add	r3, r7
 8002b2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002b32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b36:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b3a:	3264      	adds	r2, #100	; 0x64
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	3348      	adds	r3, #72	; 0x48
 8002b40:	443b      	add	r3, r7
 8002b42:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fae9 	bl	8002130 <calc_gas_wait>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	461a      	mov	r2, r3
 8002b62:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b66:	443b      	add	r3, r7
 8002b68:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b70:	3301      	adds	r3, #1
 8002b72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	7c1b      	ldrb	r3, [r3, #16]
 8002b7a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3b9      	bcc.n	8002af6 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	7c1a      	ldrb	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	7c1b      	ldrb	r3, [r3, #16]
 8002b8e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002b92:	e07c      	b.n	8002c8e <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <set_conf+0x170>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002ba4:	23ff      	movs	r3, #255	; 0xff
 8002ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002baa:	e070      	b.n	8002c8e <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8a5b      	ldrh	r3, [r3, #18]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002bc0:	e03a      	b.n	8002c38 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002bc2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bc6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002bca:	325a      	adds	r2, #90	; 0x5a
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	3348      	adds	r3, #72	; 0x48
 8002bd0:	443b      	add	r3, r7
 8002bd2:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff f9f0 	bl	8001fd0 <calc_res_heat>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002bf8:	443b      	add	r3, r7
 8002bfa:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002bfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c02:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002c06:	3264      	adds	r2, #100	; 0x64
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	3348      	adds	r3, #72	; 0x48
 8002c0c:	443b      	add	r3, r7
 8002c0e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	443b      	add	r3, r7
 8002c2a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002c2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c32:	3301      	adds	r3, #1
 8002c34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	7c1b      	ldrb	r3, [r3, #16]
 8002c3c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3be      	bcc.n	8002bc2 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	7c1a      	ldrb	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	7c1b      	ldrb	r3, [r3, #16]
 8002c50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8a5b      	ldrh	r3, [r3, #18]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f841 	bl	8002ce0 <calc_heatr_dur_shared>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002c64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002c6c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002c70:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f7fe f9a2 	bl	8000fc0 <bme68x_set_regs>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002c82:	e003      	b.n	8002c8c <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c8a:	e000      	b.n	8002c8e <set_conf+0x25a>
            break;
 8002c8c:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002c8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002c96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c9a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c9e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f7fe f98c 	bl	8000fc0 <bme68x_set_regs>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002cae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002cb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002cba:	f107 0114 	add.w	r1, r7, #20
 8002cbe:	f107 0020 	add.w	r0, r7, #32
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f7fe f97c 	bl	8000fc0 <bme68x_set_regs>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002cce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	374c      	adds	r7, #76	; 0x4c
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd90      	pop	{r4, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	08014ed0 	.word	0x08014ed0

08002ce0 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f240 7282 	movw	r2, #1922	; 0x782
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d902      	bls.n	8002cfe <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002cf8:	23ff      	movs	r3, #255	; 0xff
 8002cfa:	73bb      	strb	r3, [r7, #14]
 8002cfc:	e01d      	b.n	8002d3a <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d04:	fb03 f202 	mul.w	r2, r3, r2
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <calc_heatr_dur_shared+0x68>)
 8002d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	0852      	lsrs	r2, r2, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002d18:	e005      	b.n	8002d26 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	3301      	adds	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b3f      	cmp	r3, #63	; 0x3f
 8002d2a:	d8f6      	bhi.n	8002d1a <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	12c8b89f 	.word	0x12c8b89f

08002d4c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	603a      	str	r2, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	789b      	ldrb	r3, [r3, #2]
 8002d76:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da21      	bge.n	8002dce <sort_sensor_data+0x82>
 8002d8a:	79bb      	ldrb	r3, [r7, #6]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	da18      	bge.n	8002dce <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002d9c:	89ba      	ldrh	r2, [r7, #12]
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002da6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002daa:	f113 0f02 	cmn.w	r3, #2
 8002dae:	db03      	blt.n	8002db8 <sort_sensor_data+0x6c>
 8002db0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db03      	blt.n	8002dc0 <sort_sensor_data+0x74>
 8002db8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	dd16      	ble.n	8002dee <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002dc0:	79b9      	ldrb	r1, [r7, #6]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f816 	bl	8002df8 <swap_fields>
    {
 8002dcc:	e00f      	b.n	8002dee <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002dce:	79bb      	ldrb	r3, [r7, #6]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da07      	bge.n	8002df0 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002de0:	79b9      	ldrb	r1, [r7, #6]
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f806 	bl	8002df8 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002dec:	e000      	b.n	8002df0 <sort_sensor_data+0xa4>
    {
 8002dee:	bf00      	nop
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	603a      	str	r2, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
 8002e04:	460b      	mov	r3, r1
 8002e06:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	440b      	add	r3, r1
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002e28:	79bb      	ldrb	r3, [r7, #6]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	; 0x38
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002e48:	f107 010c 	add.w	r1, r7, #12
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2217      	movs	r2, #23
 8002e50:	208a      	movs	r0, #138	; 0x8a
 8002e52:	f7fe f945 	bl	80010e0 <bme68x_get_regs>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002e5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	f103 0117 	add.w	r1, r3, #23
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	220e      	movs	r2, #14
 8002e70:	20e1      	movs	r0, #225	; 0xe1
 8002e72:	f7fe f935 	bl	80010e0 <bme68x_get_regs>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002e7c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2205      	movs	r2, #5
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fe f925 	bl	80010e0 <bme68x_get_regs>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002e9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80cb 	bne.w	800303c <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002ebe:	7b7b      	ldrb	r3, [r7, #13]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	b21a      	sxth	r2, r3
 8002ec4:	7b3b      	ldrb	r3, [r7, #12]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002eda:	7c7b      	ldrb	r3, [r7, #17]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	7c3b      	ldrb	r3, [r7, #16]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	b21a      	sxth	r2, r3
 8002ef4:	7cbb      	ldrb	r3, [r7, #18]
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002f00:	7d3b      	ldrb	r3, [r7, #20]
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	b21a      	sxth	r2, r3
 8002f10:	7dbb      	ldrb	r3, [r7, #22]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002f1c:	7e7b      	ldrb	r3, [r7, #25]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	7e3b      	ldrb	r3, [r7, #24]
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	4313      	orrs	r3, r2
 8002f28:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002f2e:	7efb      	ldrb	r3, [r7, #27]
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002f38:	7ebb      	ldrb	r3, [r7, #26]
 8002f3a:	b25a      	sxtb	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	b21a      	sxth	r2, r3
 8002f48:	7fbb      	ldrb	r3, [r7, #30]
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002f54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4313      	orrs	r3, r2
 8002f64:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002f6a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002f74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002fae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fb2:	b25a      	sxtb	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	b25a      	sxtb	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002fcc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002fd8:	b25a      	sxtb	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fe2:	b25a      	sxtb	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ff4:	b21b      	sxth	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002ffe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003002:	b25a      	sxtb	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8003008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800300c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003010:	2b00      	cmp	r3, #0
 8003012:	da00      	bge.n	8003016 <get_calib_data+0x1d6>
 8003014:	330f      	adds	r3, #15
 8003016:	111b      	asrs	r3, r3, #4
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003020:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003024:	b25a      	sxtb	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 800302c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003030:	b25b      	sxtb	r3, r3
 8003032:	111b      	asrs	r3, r3, #4
 8003034:	b25a      	sxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 800303c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003040:	4618      	mov	r0, r3
 8003042:	3738      	adds	r7, #56	; 0x38
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003054:	f107 010e 	add.w	r1, r7, #14
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	20f0      	movs	r0, #240	; 0xf0
 800305e:	f7fe f83f 	bl	80010e0 <bme68x_get_regs>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 800306e:	7bbb      	ldrb	r3, [r7, #14]
 8003070:	461a      	mov	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	0000      	movs	r0, r0
 8003084:	0000      	movs	r0, r0
	...

08003088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800308c:	f005 f9ca 	bl	8008424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003090:	f000 f8cc 	bl	800322c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003094:	f000 f91b 	bl	80032ce <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003098:	f000 fc76 	bl	8003988 <MX_GPIO_Init>
  MX_DMA_Init();
 800309c:	f000 fc3e 	bl	800391c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80030a0:	f000 fbd6 	bl	8003850 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80030a4:	f000 fb9e 	bl	80037e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80030a8:	f000 fc02 	bl	80038b0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80030ac:	f000 fa1a 	bl	80034e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80030b0:	f000 fa96 	bl	80035e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80030b4:	f000 fb26 	bl	8003704 <MX_TIM2_Init>
  MX_ADC2_Init();
 80030b8:	f000 f9ac 	bl	8003414 <MX_ADC2_Init>
  MX_ADC1_Init();
 80030bc:	f000 f932 	bl	8003324 <MX_ADC1_Init>
  MX_SPI1_Init();
 80030c0:	f000 fa50 	bl	8003564 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Set LED period and freq
  setPeriod(&htim2, TIM_CHANNEL_1, 65535);
 80030c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c8:	2100      	movs	r1, #0
 80030ca:	484d      	ldr	r0, [pc, #308]	; (8003200 <main+0x178>)
 80030cc:	f001 f95e 	bl	800438c <setPeriod>
  setPeriod(&htim2, TIM_CHANNEL_3, 65535);
 80030d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d4:	2108      	movs	r1, #8
 80030d6:	484a      	ldr	r0, [pc, #296]	; (8003200 <main+0x178>)
 80030d8:	f001 f958 	bl	800438c <setPeriod>
  setPeriod(&htim2, TIM_CHANNEL_4, 65535);
 80030dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e0:	210c      	movs	r1, #12
 80030e2:	4847      	ldr	r0, [pc, #284]	; (8003200 <main+0x178>)
 80030e4:	f001 f952 	bl	800438c <setPeriod>

  setDC(&htim2, TIM_CHANNEL_1, 20000);
 80030e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80030ec:	2100      	movs	r1, #0
 80030ee:	4844      	ldr	r0, [pc, #272]	; (8003200 <main+0x178>)
 80030f0:	f001 f91c 	bl	800432c <setDC>
  setDC(&htim2, TIM_CHANNEL_3, 20000);
 80030f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80030f8:	2108      	movs	r1, #8
 80030fa:	4841      	ldr	r0, [pc, #260]	; (8003200 <main+0x178>)
 80030fc:	f001 f916 	bl	800432c <setDC>
  setDC(&htim2, TIM_CHANNEL_4, 20000);
 8003100:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003104:	210c      	movs	r1, #12
 8003106:	483e      	ldr	r0, [pc, #248]	; (8003200 <main+0x178>)
 8003108:	f001 f910 	bl	800432c <setDC>


  // Turn on blue LED during initial readings
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800310c:	210c      	movs	r1, #12
 800310e:	483c      	ldr	r0, [pc, #240]	; (8003200 <main+0x178>)
 8003110:	f00b fa6e 	bl	800e5f0 <HAL_TIM_PWM_Start>

  // Take 30 readings from the sensor before starting to allow system to stabilize
  BME688ForceModeRead();
 8003114:	f000 fdec 	bl	8003cf0 <BME688ForceModeRead>
  SAMPLE_COUNT = UINT16_C(20);
 8003118:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <main+0x17c>)
 800311a:	2214      	movs	r2, #20
 800311c:	601a      	str	r2, [r3, #0]

  // Set buzzer period and frequency
  setDC(&htim1, TIM_CHANNEL_1, 50000);
 800311e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003122:	2100      	movs	r1, #0
 8003124:	4838      	ldr	r0, [pc, #224]	; (8003208 <main+0x180>)
 8003126:	f001 f901 	bl	800432c <setDC>
  setPeriod(&htim1, TIM_CHANNEL_1, 65535);
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	2100      	movs	r1, #0
 8003130:	4835      	ldr	r0, [pc, #212]	; (8003208 <main+0x180>)
 8003132:	f001 f92b 	bl	800438c <setPeriod>


  // Setup ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003136:	217f      	movs	r1, #127	; 0x7f
 8003138:	4834      	ldr	r0, [pc, #208]	; (800320c <main+0x184>)
 800313a:	f006 fe3b 	bl	8009db4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_buf1,ADC_BUF_LEN);
 800313e:	2201      	movs	r2, #1
 8003140:	4933      	ldr	r1, [pc, #204]	; (8003210 <main+0x188>)
 8003142:	4832      	ldr	r0, [pc, #200]	; (800320c <main+0x184>)
 8003144:	f005 fd7a 	bl	8008c3c <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED);
 8003148:	4932      	ldr	r1, [pc, #200]	; (8003214 <main+0x18c>)
 800314a:	4833      	ldr	r0, [pc, #204]	; (8003218 <main+0x190>)
 800314c:	f006 fe32 	bl	8009db4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)&adc_buf2,ADC_BUF_LEN);
 8003150:	2201      	movs	r2, #1
 8003152:	4932      	ldr	r1, [pc, #200]	; (800321c <main+0x194>)
 8003154:	4830      	ldr	r0, [pc, #192]	; (8003218 <main+0x190>)
 8003156:	f005 fd71 	bl	8008c3c <HAL_ADC_Start_DMA>


  // Turn off blue LED after init
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800315a:	210c      	movs	r1, #12
 800315c:	4828      	ldr	r0, [pc, #160]	; (8003200 <main+0x178>)
 800315e:	f00b fb4d 	bl	800e7fc <HAL_TIM_PWM_Stop>
  HAL_Delay(25);
 8003162:	2019      	movs	r0, #25
 8003164:	f005 f9da 	bl	800851c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Read ADC values
	  batteryVoltage = (adc_buf1[0] / 4095.0) * 3.3 * 2.165; // 2.165 found experimentally by measuring the drop across voltage divider
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <main+0x188>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f9e9 	bl	8000544 <__aeabi_i2d>
 8003172:	a31d      	add	r3, pc, #116	; (adr r3, 80031e8 <main+0x160>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fb78 	bl	800086c <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	a31a      	add	r3, pc, #104	; (adr r3, 80031f0 <main+0x168>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa45 	bl	8000618 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	a318      	add	r3, pc, #96	; (adr r3, 80031f8 <main+0x170>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd fa3c 	bl	8000618 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	491e      	ldr	r1, [pc, #120]	; (8003220 <main+0x198>)
 80031a6:	e9c1 2300 	strd	r2, r3, [r1]
	  SPVoltage = ((adc_buf2[0] - 2048) / 2048.0) * 3.3;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <main+0x194>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9c6 	bl	8000544 <__aeabi_i2d>
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <main+0x19c>)
 80031be:	f7fd fb55 	bl	800086c <__aeabi_ddiv>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	a309      	add	r3, pc, #36	; (adr r3, 80031f0 <main+0x168>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fa22 	bl	8000618 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4913      	ldr	r1, [pc, #76]	; (8003228 <main+0x1a0>)
 80031da:	e9c1 2300 	strd	r2, r3, [r1]
	  checkADCReading();
 80031de:	f001 f827 	bl	8004230 <checkADCReading>


	  // Read gas sensor. Check gas readings and file system calls within this function to improve response time
	  BME688ForceModeRead();
 80031e2:	f000 fd85 	bl	8003cf0 <BME688ForceModeRead>
	  batteryVoltage = (adc_buf1[0] / 4095.0) * 3.3 * 2.165; // 2.165 found experimentally by measuring the drop across voltage divider
 80031e6:	e7bf      	b.n	8003168 <main+0xe0>
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40affe00 	.word	0x40affe00
 80031f0:	66666666 	.word	0x66666666
 80031f4:	400a6666 	.word	0x400a6666
 80031f8:	851eb852 	.word	0x851eb852
 80031fc:	400151eb 	.word	0x400151eb
 8003200:	200004c0 	.word	0x200004c0
 8003204:	20000000 	.word	0x20000000
 8003208:	20000474 	.word	0x20000474
 800320c:	20000264 	.word	0x20000264
 8003210:	20000b44 	.word	0x20000b44
 8003214:	407f0000 	.word	0x407f0000
 8003218:	200002c8 	.word	0x200002c8
 800321c:	20000b48 	.word	0x20000b48
 8003220:	20000b50 	.word	0x20000b50
 8003224:	40a00000 	.word	0x40a00000
 8003228:	20000b58 	.word	0x20000b58

0800322c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b096      	sub	sp, #88	; 0x58
 8003230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	2244      	movs	r2, #68	; 0x44
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f00e fc99 	bl	8011b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003240:	463b      	mov	r3, r7
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800324e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003252:	f008 ffb1 	bl	800c1b8 <HAL_PWREx_ControlVoltageScaling>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800325c:	f001 fc9a 	bl	8004b94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003260:	2302      	movs	r3, #2
 8003262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800326a:	2310      	movs	r3, #16
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326e:	2302      	movs	r3, #2
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003272:	2302      	movs	r3, #2
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800327a:	230a      	movs	r3, #10
 800327c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800327e:	2307      	movs	r3, #7
 8003280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003282:	2302      	movs	r3, #2
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003286:	2302      	movs	r3, #2
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4618      	mov	r0, r3
 8003290:	f008 ffe8 	bl	800c264 <HAL_RCC_OscConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800329a:	f001 fc7b 	bl	8004b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329e:	230f      	movs	r3, #15
 80032a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a2:	2303      	movs	r3, #3
 80032a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032b2:	463b      	mov	r3, r7
 80032b4:	2104      	movs	r1, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f009 fbb0 	bl	800ca1c <HAL_RCC_ClockConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032c2:	f001 fc67 	bl	8004b94 <Error_Handler>
  }
}
 80032c6:	bf00      	nop
 80032c8:	3758      	adds	r7, #88	; 0x58
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b0a2      	sub	sp, #136	; 0x88
 80032d2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d4:	463b      	mov	r3, r7
 80032d6:	2288      	movs	r2, #136	; 0x88
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e fc49 	bl	8011b72 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80032e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80032ec:	2302      	movs	r3, #2
 80032ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80032f0:	2301      	movs	r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80032f4:	2308      	movs	r3, #8
 80032f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80032f8:	2307      	movs	r3, #7
 80032fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80032fc:	2302      	movs	r3, #2
 80032fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003300:	2302      	movs	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003308:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330a:	463b      	mov	r3, r7
 800330c:	4618      	mov	r0, r3
 800330e:	f009 fda9 	bl	800ce64 <HAL_RCCEx_PeriphCLKConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8003318:	f001 fc3c 	bl	8004b94 <Error_Handler>
  }
}
 800331c:	bf00      	nop
 800331e:	3788      	adds	r7, #136	; 0x88
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003348:	4a30      	ldr	r2, [pc, #192]	; (800340c <MX_ADC1_Init+0xe8>)
 800334a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800334c:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <MX_ADC1_Init+0xe4>)
 800334e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8003352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <MX_ADC1_Init+0xe4>)
 800335c:	2200      	movs	r2, #0
 800335e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003366:	4b28      	ldr	r3, [pc, #160]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003368:	2204      	movs	r2, #4
 800336a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800336c:	4b26      	ldr	r3, [pc, #152]	; (8003408 <MX_ADC1_Init+0xe4>)
 800336e:	2200      	movs	r2, #0
 8003370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003374:	2201      	movs	r2, #1
 8003376:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <MX_ADC1_Init+0xe4>)
 800337a:	2201      	movs	r2, #1
 800337c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800337e:	4b22      	ldr	r3, [pc, #136]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003388:	2200      	movs	r2, #0
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <MX_ADC1_Init+0xe4>)
 800338e:	2200      	movs	r2, #0
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <MX_ADC1_Init+0xe4>)
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <MX_ADC1_Init+0xe4>)
 800339c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <MX_ADC1_Init+0xe4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <MX_ADC1_Init+0xe4>)
 80033ac:	f005 faf6 	bl	800899c <HAL_ADC_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80033b6:	f001 fbed 	bl	8004b94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	4810      	ldr	r0, [pc, #64]	; (8003408 <MX_ADC1_Init+0xe4>)
 80033c6:	f006 fd87 	bl	8009ed8 <HAL_ADCEx_MultiModeConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80033d0:	f001 fbe0 	bl	8004b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_ADC1_Init+0xec>)
 80033d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033d8:	2306      	movs	r3, #6
 80033da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033e0:	237f      	movs	r3, #127	; 0x7f
 80033e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033e4:	2304      	movs	r3, #4
 80033e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	; (8003408 <MX_ADC1_Init+0xe4>)
 80033f2:	f005 ff21 	bl	8009238 <HAL_ADC_ConfigChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80033fc:	f001 fbca 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	3728      	adds	r7, #40	; 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000264 	.word	0x20000264
 800340c:	50040000 	.word	0x50040000
 8003410:	0c900008 	.word	0x0c900008

08003414 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800341a:	463b      	mov	r3, r7
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
 8003428:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800342a:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <MX_ADC2_Init+0xc0>)
 800342c:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <MX_ADC2_Init+0xc4>)
 800342e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8003430:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003432:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8003436:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <MX_ADC2_Init+0xc0>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <MX_ADC2_Init+0xc0>)
 800344c:	2204      	movs	r2, #4
 800344e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003452:	2200      	movs	r2, #0
 8003454:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003458:	2201      	movs	r2, #1
 800345a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <MX_ADC2_Init+0xc0>)
 800345e:	2201      	movs	r2, #1
 8003460:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <MX_ADC2_Init+0xc0>)
 800346c:	2200      	movs	r2, #0
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003472:	2200      	movs	r2, #0
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800348e:	4811      	ldr	r0, [pc, #68]	; (80034d4 <MX_ADC2_Init+0xc0>)
 8003490:	f005 fa84 	bl	800899c <HAL_ADC_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800349a:	f001 fb7b 	bl	8004b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <MX_ADC2_Init+0xc8>)
 80034a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034a2:	2306      	movs	r3, #6
 80034a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <MX_ADC2_Init+0xcc>)
 80034ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034ae:	2304      	movs	r3, #4
 80034b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034b6:	463b      	mov	r3, r7
 80034b8:	4619      	mov	r1, r3
 80034ba:	4806      	ldr	r0, [pc, #24]	; (80034d4 <MX_ADC2_Init+0xc0>)
 80034bc:	f005 febc 	bl	8009238 <HAL_ADC_ConfigChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80034c6:	f001 fb65 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200002c8 	.word	0x200002c8
 80034d8:	50040100 	.word	0x50040100
 80034dc:	04300002 	.word	0x04300002
 80034e0:	407f0000 	.word	0x407f0000

080034e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_I2C1_Init+0x74>)
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <MX_I2C1_Init+0x78>)
 80034ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <MX_I2C1_Init+0x74>)
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <MX_I2C1_Init+0x7c>)
 80034f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <MX_I2C1_Init+0x74>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <MX_I2C1_Init+0x74>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <MX_I2C1_Init+0x74>)
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <MX_I2C1_Init+0x74>)
 8003508:	2200      	movs	r2, #0
 800350a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <MX_I2C1_Init+0x74>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <MX_I2C1_Init+0x74>)
 8003514:	2200      	movs	r2, #0
 8003516:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <MX_I2C1_Init+0x74>)
 800351a:	2200      	movs	r2, #0
 800351c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800351e:	480e      	ldr	r0, [pc, #56]	; (8003558 <MX_I2C1_Init+0x74>)
 8003520:	f007 fae2 	bl	800aae8 <HAL_I2C_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800352a:	f001 fb33 	bl	8004b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800352e:	2100      	movs	r1, #0
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <MX_I2C1_Init+0x74>)
 8003532:	f008 fd9b 	bl	800c06c <HAL_I2CEx_ConfigAnalogFilter>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800353c:	f001 fb2a 	bl	8004b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003540:	2100      	movs	r1, #0
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_I2C1_Init+0x74>)
 8003544:	f008 fddd 	bl	800c102 <HAL_I2CEx_ConfigDigitalFilter>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800354e:	f001 fb21 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200003bc 	.word	0x200003bc
 800355c:	40005400 	.word	0x40005400
 8003560:	10909cec 	.word	0x10909cec

08003564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <MX_SPI1_Init+0x74>)
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <MX_SPI1_Init+0x78>)
 800356c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <MX_SPI1_Init+0x74>)
 8003570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <MX_SPI1_Init+0x74>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <MX_SPI1_Init+0x74>)
 800357e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <MX_SPI1_Init+0x74>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <MX_SPI1_Init+0x74>)
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <MX_SPI1_Init+0x74>)
 8003592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <MX_SPI1_Init+0x74>)
 800359a:	2228      	movs	r2, #40	; 0x28
 800359c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035b2:	2207      	movs	r2, #7
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035be:	2208      	movs	r2, #8
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035c2:	4805      	ldr	r0, [pc, #20]	; (80035d8 <MX_SPI1_Init+0x74>)
 80035c4:	f00a f90a 	bl	800d7dc <HAL_SPI_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035ce:	f001 fae1 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000410 	.word	0x20000410
 80035dc:	40013000 	.word	0x40013000

080035e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b096      	sub	sp, #88	; 0x58
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	615a      	str	r2, [r3, #20]
 8003604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	222c      	movs	r2, #44	; 0x2c
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f00e fab0 	bl	8011b72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003614:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <MX_TIM1_Init+0x120>)
 8003616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <MX_TIM1_Init+0x11c>)
 800361a:	2200      	movs	r2, #0
 800361c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800362a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800362c:	4b33      	ldr	r3, [pc, #204]	; (80036fc <MX_TIM1_Init+0x11c>)
 800362e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <MX_TIM1_Init+0x11c>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003640:	482e      	ldr	r0, [pc, #184]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003642:	f00a ff7d 	bl	800e540 <HAL_TIM_PWM_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800364c:	f001 faa2 	bl	8004b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800365c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003660:	4619      	mov	r1, r3
 8003662:	4826      	ldr	r0, [pc, #152]	; (80036fc <MX_TIM1_Init+0x11c>)
 8003664:	f00b ff3e 	bl	800f4e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800366e:	f001 fa91 	bl	8004b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003672:	2360      	movs	r3, #96	; 0x60
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32767;
 8003676:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800367c:	2300      	movs	r3, #0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003680:	2300      	movs	r3, #0
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003694:	2200      	movs	r2, #0
 8003696:	4619      	mov	r1, r3
 8003698:	4818      	ldr	r0, [pc, #96]	; (80036fc <MX_TIM1_Init+0x11c>)
 800369a:	f00b fa47 	bl	800eb2c <HAL_TIM_PWM_ConfigChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80036a4:	f001 fa76 	bl	8004b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <MX_TIM1_Init+0x11c>)
 80036de:	f00b ff89 	bl	800f5f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80036e8:	f001 fa54 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036ec:	4803      	ldr	r0, [pc, #12]	; (80036fc <MX_TIM1_Init+0x11c>)
 80036ee:	f001 fc61 	bl	8004fb4 <HAL_TIM_MspPostInit>

}
 80036f2:	bf00      	nop
 80036f4:	3758      	adds	r7, #88	; 0x58
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000474 	.word	0x20000474
 8003700:	40012c00 	.word	0x40012c00

08003704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003716:	463b      	mov	r3, r7
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003728:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <MX_TIM2_Init+0xdc>)
 800372a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800372e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <MX_TIM2_Init+0xdc>)
 800373e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003744:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <MX_TIM2_Init+0xdc>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003752:	4823      	ldr	r0, [pc, #140]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003754:	f00a fef4 	bl	800e540 <HAL_TIM_PWM_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800375e:	f001 fa19 	bl	8004b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800376a:	f107 031c 	add.w	r3, r7, #28
 800376e:	4619      	mov	r1, r3
 8003770:	481b      	ldr	r0, [pc, #108]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003772:	f00b feb7 	bl	800f4e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800377c:	f001 fa0a 	bl	8004b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003780:	2360      	movs	r3, #96	; 0x60
 8003782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003790:	463b      	mov	r3, r7
 8003792:	2200      	movs	r2, #0
 8003794:	4619      	mov	r1, r3
 8003796:	4812      	ldr	r0, [pc, #72]	; (80037e0 <MX_TIM2_Init+0xdc>)
 8003798:	f00b f9c8 	bl	800eb2c <HAL_TIM_PWM_ConfigChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80037a2:	f001 f9f7 	bl	8004b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037a6:	463b      	mov	r3, r7
 80037a8:	2208      	movs	r2, #8
 80037aa:	4619      	mov	r1, r3
 80037ac:	480c      	ldr	r0, [pc, #48]	; (80037e0 <MX_TIM2_Init+0xdc>)
 80037ae:	f00b f9bd 	bl	800eb2c <HAL_TIM_PWM_ConfigChannel>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80037b8:	f001 f9ec 	bl	8004b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037bc:	463b      	mov	r3, r7
 80037be:	220c      	movs	r2, #12
 80037c0:	4619      	mov	r1, r3
 80037c2:	4807      	ldr	r0, [pc, #28]	; (80037e0 <MX_TIM2_Init+0xdc>)
 80037c4:	f00b f9b2 	bl	800eb2c <HAL_TIM_PWM_ConfigChannel>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80037ce:	f001 f9e1 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037d2:	4803      	ldr	r0, [pc, #12]	; (80037e0 <MX_TIM2_Init+0xdc>)
 80037d4:	f001 fbee 	bl	8004fb4 <HAL_TIM_MspPostInit>

}
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200004c0 	.word	0x200004c0

080037e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <MX_USART1_UART_Init+0x60>)
 80037ea:	4a17      	ldr	r2, [pc, #92]	; (8003848 <MX_USART1_UART_Init+0x64>)
 80037ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <MX_USART1_UART_Init+0x60>)
 80037f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <MX_USART1_UART_Init+0x60>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <MX_USART1_UART_Init+0x60>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <MX_USART1_UART_Init+0x60>)
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_USART1_UART_Init+0x60>)
 800380a:	220c      	movs	r2, #12
 800380c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <MX_USART1_UART_Init+0x60>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <MX_USART1_UART_Init+0x60>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <MX_USART1_UART_Init+0x60>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <MX_USART1_UART_Init+0x60>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003826:	4807      	ldr	r0, [pc, #28]	; (8003844 <MX_USART1_UART_Init+0x60>)
 8003828:	f00b ff80 	bl	800f72c <HAL_UART_Init>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003832:	f001 f9af 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuff, RxBuffSize);
 8003836:	2201      	movs	r2, #1
 8003838:	4904      	ldr	r1, [pc, #16]	; (800384c <MX_USART1_UART_Init+0x68>)
 800383a:	4802      	ldr	r0, [pc, #8]	; (8003844 <MX_USART1_UART_Init+0x60>)
 800383c:	f00d fa32 	bl	8010ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000050c 	.word	0x2000050c
 8003848:	40013800 	.word	0x40013800
 800384c:	20000734 	.word	0x20000734

08003850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <MX_USART2_UART_Init+0x5c>)
 8003858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 800385c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003876:	220c      	movs	r2, #12
 8003878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 800388e:	2200      	movs	r2, #0
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003892:	4805      	ldr	r0, [pc, #20]	; (80038a8 <MX_USART2_UART_Init+0x58>)
 8003894:	f00b ff4a 	bl	800f72c <HAL_UART_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800389e:	f001 f979 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000594 	.word	0x20000594
 80038ac:	40004400 	.word	0x40004400

080038b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <MX_USART3_UART_Init+0x64>)
 80038b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80038c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038d6:	220c      	movs	r2, #12
 80038d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038f2:	4807      	ldr	r0, [pc, #28]	; (8003910 <MX_USART3_UART_Init+0x60>)
 80038f4:	f00b ff1a 	bl	800f72c <HAL_UART_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038fe:	f001 f949 	bl	8004b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuff, RxBuffSize);
 8003902:	2201      	movs	r2, #1
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <MX_USART3_UART_Init+0x68>)
 8003906:	4802      	ldr	r0, [pc, #8]	; (8003910 <MX_USART3_UART_Init+0x60>)
 8003908:	f00d f9cc 	bl	8010ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART3_Init 2 */

}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	2000061c 	.word	0x2000061c
 8003914:	40004800 	.word	0x40004800
 8003918:	20000734 	.word	0x20000734

0800391c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <MX_DMA_Init+0x68>)
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <MX_DMA_Init+0x68>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6493      	str	r3, [r2, #72]	; 0x48
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_DMA_Init+0x68>)
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	2100      	movs	r1, #0
 800393e:	200b      	movs	r0, #11
 8003940:	f006 fc55 	bl	800a1ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003944:	200b      	movs	r0, #11
 8003946:	f006 fc6e 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	200c      	movs	r0, #12
 8003950:	f006 fc4d 	bl	800a1ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003954:	200c      	movs	r0, #12
 8003956:	f006 fc66 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	2100      	movs	r1, #0
 800395e:	200d      	movs	r0, #13
 8003960:	f006 fc45 	bl	800a1ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003964:	200d      	movs	r0, #13
 8003966:	f006 fc5e 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	200f      	movs	r0, #15
 8003970:	f006 fc3d 	bl	800a1ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003974:	200f      	movs	r0, #15
 8003976:	f006 fc56 	bl	800a226 <HAL_NVIC_EnableIRQ>

}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000

08003988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039aa:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <MX_GPIO_Init+0xc4>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 80039fe:	2201      	movs	r2, #1
 8003a00:	2110      	movs	r1, #16
 8003a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a06:	f007 f857 	bl	800aab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480b      	ldr	r0, [pc, #44]	; (8003a50 <MX_GPIO_Init+0xc8>)
 8003a22:	f006 fe9f 	bl	800a764 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin;
 8003a26:	2310      	movs	r3, #16
 8003a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a40:	f006 fe90 	bl	800a764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	48000800 	.word	0x48000800

08003a54 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <HAL_UARTEx_RxEventCallback+0x9c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d11c      	bne.n	8003aa4 <HAL_UARTEx_RxEventCallback+0x50>
		if (RxBuff[0] != '\0') {
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_UARTEx_RxEventCallback+0x2e>
			push(RxBuff[0]);
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f848 	bl	8003b0c <push>
			UARTFlag = 0;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
		}
		/* start the DMA again */
		RxBuff[0] = '\0';
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) RxBuff, RxBuffSize);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	491a      	ldr	r1, [pc, #104]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003a8c:	481b      	ldr	r0, [pc, #108]	; (8003afc <HAL_UARTEx_RxEventCallback+0xa8>)
 8003a8e:	f00d f909 	bl	8010ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_UARTEx_RxEventCallback+0xac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_UARTEx_RxEventCallback+0xac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
		/* start the DMA again */
		RxBuff[0] = '\0';
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuff, RxBuffSize);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	}
}
 8003aa2:	e020      	b.n	8003ae6 <HAL_UARTEx_RxEventCallback+0x92>
	else if (huart->Instance == USART1) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d11b      	bne.n	8003ae6 <HAL_UARTEx_RxEventCallback+0x92>
		if (RxBuff[0] != '\0') {
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_UARTEx_RxEventCallback+0x72>
			push(RxBuff[0]);
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f826 	bl	8003b0c <push>
			UARTFlag = 1;
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
		RxBuff[0] = '\0';
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuff, RxBuffSize);
 8003acc:	2201      	movs	r2, #1
 8003ace:	4909      	ldr	r1, [pc, #36]	; (8003af4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003ad2:	f00d f8e7 	bl	8010ca4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_UARTEx_RxEventCallback+0xac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_UARTEx_RxEventCallback+0xac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0204 	bic.w	r2, r2, #4
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40004800 	.word	0x40004800
 8003af4:	20000734 	.word	0x20000734
 8003af8:	20000009 	.word	0x20000009
 8003afc:	2000061c 	.word	0x2000061c
 8003b00:	200006ec 	.word	0x200006ec
 8003b04:	40013800 	.word	0x40013800
 8003b08:	2000050c 	.word	0x2000050c

08003b0c <push>:


int push(char data) {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]

    if (buffIsFull) {                                               // If the buffer is full
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <push+0x70>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <push+0x16>
        return 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e026      	b.n	8003b70 <push+0x64>
    }

    buffer[buffHead] = data;
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <push+0x74>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4917      	ldr	r1, [pc, #92]	; (8003b84 <push+0x78>)
 8003b28:	79fa      	ldrb	r2, [r7, #7]
 8003b2a:	54ca      	strb	r2, [r1, r3]

    buffHead++;
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <push+0x74>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <push+0x74>)
 8003b34:	6013      	str	r3, [r2, #0]

    if (buffHead == buffLen) {                                          // Wrap back to 0 if buffer is at last index
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <push+0x74>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d102      	bne.n	8003b46 <push+0x3a>
        buffHead = 0;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <push+0x74>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    }


    if ((buffHead + 1) % buffLen == buffTail) {                             // Check if buffHead has reached buffTail
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <push+0x74>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	425a      	negs	r2, r3
 8003b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b52:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b56:	bf58      	it	pl
 8003b58:	4253      	negpl	r3, r2
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <push+0x7c>)
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d102      	bne.n	8003b68 <push+0x5c>
        buffIsFull = 1;
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <push+0x70>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
    }

    buffIsEmpty = 0;
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <push+0x80>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    return 1;
 8003b6e:	2301      	movs	r3, #1
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	20000738 	.word	0x20000738
 8003b80:	2000073c 	.word	0x2000073c
 8003b84:	20000744 	.word	0x20000744
 8003b88:	20000740 	.word	0x20000740
 8003b8c:	20000004 	.word	0x20000004

08003b90 <get>:

void get(char arr[], int num) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	int tempTail = buffTail;
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <get+0x7c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
	int tempbuffHead = buffHead;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <get+0x80>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
	int tempBuffIsEmpty = buffIsEmpty;
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <get+0x84>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	613b      	str	r3, [r7, #16]

	memset(arr, '\0', num);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f00d ffdd 	bl	8011b72 <memset>

	for (int i = 0; i < num; i++) {
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e01c      	b.n	8003bf8 <get+0x68>
		// 1.) Make sure buffTail is valid
		if (tempBuffIsEmpty) {
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11e      	bne.n	8003c02 <get+0x72>
			return;
		}

		// 2.) Add byte to str
		arr[i] = buffer[tempTail];
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	4913      	ldr	r1, [pc, #76]	; (8003c18 <get+0x88>)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	440a      	add	r2, r1
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	701a      	strb	r2, [r3, #0]
		tempTail++;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]

		// 3.) check new buffTail position
		if (tempTail == buffLen) {
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be0:	d101      	bne.n	8003be6 <get+0x56>
			tempTail = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
		}
		if (tempbuffHead == tempTail) {         							// If buffTail has reached buffHead
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d101      	bne.n	8003bf2 <get+0x62>
			tempBuffIsEmpty = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < num; i++) {
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbde      	blt.n	8003bbe <get+0x2e>
 8003c00:	e000      	b.n	8003c04 <get+0x74>
			return;
 8003c02:	bf00      	nop
		}
	}
}
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000740 	.word	0x20000740
 8003c10:	2000073c 	.word	0x2000073c
 8003c14:	20000004 	.word	0x20000004
 8003c18:	20000744 	.word	0x20000744

08003c1c <pop>:


char pop() {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
	char data;
    int tempbuffHead = buffHead;                                       		// Save copy and use this in case buffHead changes
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <pop+0x5c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]


	// 1.) Make sure buffTail is valid
	if (buffIsEmpty) {
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <pop+0x60>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <pop+0x18>
		return '\0';
 8003c30:	2300      	movs	r3, #0
 8003c32:	e01a      	b.n	8003c6a <pop+0x4e>
	}

	// 2.) Add byte to str
	data = buffer[buffTail];
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <pop+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <pop+0x68>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	70fb      	strb	r3, [r7, #3]
	buffTail++;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <pop+0x64>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <pop+0x64>)
 8003c46:	6013      	str	r3, [r2, #0]

	// 3.) check new buffTail position
	if (buffTail == buffLen) {
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <pop+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d102      	bne.n	8003c58 <pop+0x3c>
		buffTail = 0;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <pop+0x64>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
	}
	if (tempbuffHead == buffTail) {         								// If buffTail has reached buffHead
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <pop+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d102      	bne.n	8003c68 <pop+0x4c>
		buffIsEmpty = 1;
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <pop+0x60>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
	}

    return data;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000073c 	.word	0x2000073c
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	20000740 	.word	0x20000740
 8003c84:	20000744 	.word	0x20000744

08003c88 <bme68x_interface_init>:



/* SENSOR FUNCTIONS */
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d015      	beq.n	8003cca <bme68x_interface_init+0x42>
	{
		//PDEBUG("I2C Interface\r\n");
		dev_addr = BME68X_I2C_ADDR_HIGH;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <bme68x_interface_init+0x58>)
 8003ca0:	2277      	movs	r2, #119	; 0x77
 8003ca2:	701a      	strb	r2, [r3, #0]
		bme->read = SensorAPI_I2Cx_Read;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <bme68x_interface_init+0x5c>)
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
		bme->write = SensorAPI_I2Cx_Write;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <bme68x_interface_init+0x60>)
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
		bme->intf = BME68X_I2C_INTF;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	731a      	strb	r2, [r3, #12]

		bme->delay_us = bme68x_delay_us;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <bme68x_interface_init+0x64>)
 8003cba:	649a      	str	r2, [r3, #72]	; 0x48
		bme->intf_ptr = &dev_addr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <bme68x_interface_init+0x58>)
 8003cc0:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2219      	movs	r2, #25
 8003cc6:	739a      	strb	r2, [r3, #14]
 8003cc8:	e001      	b.n	8003cce <bme68x_interface_init+0x46>
	}
	else
	{
		rslt = BME68X_E_NULL_PTR;
 8003cca:	23ff      	movs	r3, #255	; 0xff
 8003ccc:	73fb      	strb	r3, [r7, #15]
	}

    return rslt;
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000e70 	.word	0x20000e70
 8003ce4:	08003f69 	.word	0x08003f69
 8003ce8:	08003fbd 	.word	0x08003fbd
 8003cec:	08004019 	.word	0x08004019

08003cf0 <BME688ForceModeRead>:

void BME688ForceModeRead()
{
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b0a8      	sub	sp, #160	; 0xa0
 8003cf4:	af02      	add	r7, sp, #8
	int8_t rslt;
	struct bme68x_conf conf;
	struct bme68x_heatr_conf heatr_conf;
	struct bme68x_data data;
	uint32_t del_period;
	uint32_t time_ms = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t n_fields;
	uint16_t sample_count = 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	avgGas = 0;
 8003d02:	4991      	ldr	r1, [pc, #580]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
	avgTemp = 0;
 8003d10:	498e      	ldr	r1, [pc, #568]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Interface preference is updated as a parameter
	 * For I2C : BME68X_I2C_INTF
	 * For SPI : BME68X_SPI_INTF
	 */
	rslt = bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ffaf 	bl	8003c88 <bme68x_interface_init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	bme68x_soft_reset(&bme);
 8003d30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fd fa17 	bl	8001168 <bme68x_soft_reset>
	bme.delay_us(10, bme.intf_ptr);
 8003d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d40:	4611      	mov	r1, r2
 8003d42:	200a      	movs	r0, #10
 8003d44:	4798      	blx	r3

	rslt = bme68x_init(&bme);
 8003d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd f90a 	bl	8000f64 <bme68x_init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_OFF;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	conf.odr = BME68X_ODR_NONE;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	conf.os_hum = BME68X_OS_16X;
 8003d62:	2305      	movs	r3, #5
 8003d64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	conf.os_pres = BME68X_OS_1X;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	conf.os_temp = BME68X_OS_2X;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	rslt = bme68x_set_conf(&conf, &bme);
 8003d74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fa36 	bl	80011f0 <bme68x_set_conf>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	773b      	strb	r3, [r7, #28]
	heatr_conf.heatr_temp = 300;
 8003d8e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003d92:	83fb      	strh	r3, [r7, #30]
	heatr_conf.heatr_dur = 100;
 8003d94:	2364      	movs	r3, #100	; 0x64
 8003d96:	843b      	strh	r3, [r7, #32]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8003d98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	4619      	mov	r1, r3
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7fd fd1c 	bl	80017e0 <bme68x_set_heatr_conf>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	while (sample_count <= SAMPLE_COUNT)
 8003dae:	e0be      	b.n	8003f2e <BME688ForceModeRead+0x23e>
	{
		rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003db0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003db4:	4619      	mov	r1, r3
 8003db6:	2001      	movs	r0, #1
 8003db8:	f7fd fb1e 	bl	80013f8 <bme68x_set_op_mode>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		/* Calculate delay period in microseconds */
		del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme) + (heatr_conf.heatr_dur * 1000);
 8003dc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dca:	4619      	mov	r1, r3
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7fd fb95 	bl	80014fc <bme68x_get_meas_dur>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	8c3a      	ldrh	r2, [r7, #32]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ddc:	fb01 f202 	mul.w	r2, r1, r2
 8003de0:	4413      	add	r3, r2
 8003de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		bme.delay_us(del_period, bme.intf_ptr);
 8003de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dec:	4611      	mov	r1, r2
 8003dee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003df2:	4798      	blx	r3

		/* Check if rslt == BME68X_OK, report or handle if otherwise */
		rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 8003df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003df8:	1cfa      	adds	r2, r7, #3
 8003dfa:	1d39      	adds	r1, r7, #4
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f7fd fbf1 	bl	80015e4 <bme68x_get_data>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		if (n_fields)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <BME688ForceModeRead+0x160>
		{
			avgTemp += data.temperature;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fba9 	bl	8000568 <__aeabi_f2d>
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fa46 	bl	80002ac <__adddf3>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4949      	ldr	r1, [pc, #292]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003e26:	e9c1 2300 	strd	r2, r3, [r1]
			avgGas += data.gas_resistance;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fb9b 	bl	8000568 <__aeabi_f2d>
 8003e32:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc fa38 	bl	80002ac <__adddf3>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4941      	ldr	r1, [pc, #260]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003e42:	e9c1 2300 	strd	r2, r3, [r1]

			sample_count++;
 8003e46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		}

		// If we are past the initial sampling check the gas level
		if (SAMPLE_COUNT != 30 && sample_count % 3 == 0) {
 8003e50:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <BME688ForceModeRead+0x260>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b1e      	cmp	r3, #30
 8003e56:	d068      	beq.n	8003f2a <BME688ForceModeRead+0x23a>
 8003e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e5c:	4b3d      	ldr	r3, [pc, #244]	; (8003f54 <BME688ForceModeRead+0x264>)
 8003e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e62:	0859      	lsrs	r1, r3, #1
 8003e64:	460b      	mov	r3, r1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	440b      	add	r3, r1
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d15b      	bne.n	8003f2a <BME688ForceModeRead+0x23a>
			// First sensor readings are always bad. needs time to heat up so ingore them
			if (sample_count == 3) {
 8003e72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d10e      	bne.n	8003e98 <BME688ForceModeRead+0x1a8>
				avgTemp = 0.0;
 8003e7a:	4934      	ldr	r1, [pc, #208]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9c1 2300 	strd	r2, r3, [r1]
				avgGas = 0.0;
 8003e88:	492f      	ldr	r1, [pc, #188]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9c1 2300 	strd	r2, r3, [r1]
				continue;
 8003e96:	e04a      	b.n	8003f2e <BME688ForceModeRead+0x23e>
			}


			sprintf(chBuffer, "TEMPERATURE: %.2f Deg C\t\tGAS RESISTANCE: %.2f Ohm\r\n",
							  data.temperature,
 8003e98:	68fb      	ldr	r3, [r7, #12]
			sprintf(chBuffer, "TEMPERATURE: %.2f Deg C\t\tGAS RESISTANCE: %.2f Ohm\r\n",
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb64 	bl	8000568 <__aeabi_f2d>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	460d      	mov	r5, r1
							  data.gas_resistance);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
			sprintf(chBuffer, "TEMPERATURE: %.2f Deg C\t\tGAS RESISTANCE: %.2f Ohm\r\n",
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb5e 	bl	8000568 <__aeabi_f2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	4927      	ldr	r1, [pc, #156]	; (8003f58 <BME688ForceModeRead+0x268>)
 8003eba:	4828      	ldr	r0, [pc, #160]	; (8003f5c <BME688ForceModeRead+0x26c>)
 8003ebc:	f00d fdf4 	bl	8011aa8 <siprintf>
			HAL_UART_Transmit(&huart3, chBuffer, strlen(chBuffer), BUS_TIMEOUT);
 8003ec0:	4826      	ldr	r0, [pc, #152]	; (8003f5c <BME688ForceModeRead+0x26c>)
 8003ec2:	f7fc f9e5 	bl	8000290 <strlen>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ece:	4923      	ldr	r1, [pc, #140]	; (8003f5c <BME688ForceModeRead+0x26c>)
 8003ed0:	4823      	ldr	r0, [pc, #140]	; (8003f60 <BME688ForceModeRead+0x270>)
 8003ed2:	f00b fc79 	bl	800f7c8 <HAL_UART_Transmit>


			avgTemp = avgTemp / 3.0;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <BME688ForceModeRead+0x274>)
 8003ee2:	f7fc fcc3 	bl	800086c <__aeabi_ddiv>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4918      	ldr	r1, [pc, #96]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003eec:	e9c1 2300 	strd	r2, r3, [r1]
			avgGas = avgGas / 3.0;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <BME688ForceModeRead+0x274>)
 8003efc:	f7fc fcb6 	bl	800086c <__aeabi_ddiv>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4910      	ldr	r1, [pc, #64]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003f06:	e9c1 2300 	strd	r2, r3, [r1]

			checkGasReading();
 8003f0a:	f000 f8a1 	bl	8004050 <checkGasReading>

			avgTemp = 0;
 8003f0e:	490f      	ldr	r1, [pc, #60]	; (8003f4c <BME688ForceModeRead+0x25c>)
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9c1 2300 	strd	r2, r3, [r1]
			avgGas = 0;
 8003f1c:	490a      	ldr	r1, [pc, #40]	; (8003f48 <BME688ForceModeRead+0x258>)
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9c1 2300 	strd	r2, r3, [r1]
		}
//		if (sample_count % 2 == 0) {
		flashStateMachine();
 8003f2a:	f000 fa47 	bl	80043bc <flashStateMachine>
	while (sample_count <= SAMPLE_COUNT)
 8003f2e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <BME688ForceModeRead+0x260>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	f77f af3a 	ble.w	8003db0 <BME688ForceModeRead+0xc0>
//		}
	}

}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3798      	adds	r7, #152	; 0x98
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000b68 	.word	0x20000b68
 8003f4c:	20000b60 	.word	0x20000b60
 8003f50:	20000000 	.word	0x20000000
 8003f54:	aaaaaaab 	.word	0xaaaaaaab
 8003f58:	08014edc 	.word	0x08014edc
 8003f5c:	20000b70 	.word	0x20000b70
 8003f60:	2000061c 	.word	0x2000061c
 8003f64:	40080000 	.word	0x40080000

08003f68 <SensorAPI_I2Cx_Read>:

BME68X_INTF_RET_TYPE SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint32_t ReadNumbr, void *intf_ptr)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8003f86:	f107 020f 	add.w	r2, r7, #15
 8003f8a:	8ab9      	ldrh	r1, [r7, #20]
 8003f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <SensorAPI_I2Cx_Read+0x50>)
 8003f96:	f006 fe43 	bl	800ac20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8ab9      	ldrh	r1, [r7, #20]
 8003fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fa4:	9200      	str	r2, [sp, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <SensorAPI_I2Cx_Read+0x50>)
 8003faa:	f006 ff51 	bl	800ae50 <HAL_I2C_Master_Receive>
	return 0;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200003bc 	.word	0x200003bc

08003fbc <SensorAPI_I2Cx_Write>:

BME68X_INTF_RET_TYPE SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint32_t WriteNumbr, void *intf_ptr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <SensorAPI_I2Cx_Write+0x50>)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	480a      	ldr	r0, [pc, #40]	; (8004010 <SensorAPI_I2Cx_Write+0x54>)
 8003fe6:	f00e fa5c 	bl	80124a2 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	8ab9      	ldrh	r1, [r7, #20]
 8003ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <SensorAPI_I2Cx_Write+0x50>)
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <SensorAPI_I2Cx_Write+0x58>)
 8003ffe:	f006 fe0f 	bl	800ac20 <HAL_I2C_Master_Transmit>
	return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000c70 	.word	0x20000c70
 8004010:	20000c71 	.word	0x20000c71
 8004014:	200003bc 	.word	0x200003bc

08004018 <bme68x_delay_us>:
		}
	}
}

void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8004022:	e008      	b.n	8004036 <bme68x_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e002      	b.n	8004030 <bme68x_delay_us+0x18>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b53      	cmp	r3, #83	; 0x53
 8004034:	d9f9      	bls.n	800402a <bme68x_delay_us+0x12>
	while(period--)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f1      	bne.n	8004024 <bme68x_delay_us+0xc>
		{
			;
		}
	}
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <checkGasReading>:

void checkGasReading() {
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b090      	sub	sp, #64	; 0x40
 8004054:	af04      	add	r7, sp, #16
	static uint8_t hysteresis = 0;

	// Check gas reading and ADC values
	if (avgGas <= HIGH_GAS) {
 8004056:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <checkGasReading+0x190>)
 8004058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800405c:	a35e      	add	r3, pc, #376	; (adr r3, 80041d8 <checkGasReading+0x188>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc fd55 	bl	8000b10 <__aeabi_dcmple>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 808d 	beq.w	8004188 <checkGasReading+0x138>
	  lastSaveAlertFlag = saveAlertFlag;
 800406e:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <checkGasReading+0x194>)
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <checkGasReading+0x198>)
 8004074:	701a      	strb	r2, [r3, #0]
	  saveAlertFlag += 1;
 8004076:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <checkGasReading+0x194>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <checkGasReading+0x194>)
 8004080:	701a      	strb	r2, [r3, #0]

	  // Save a single alert file for each instance of a high gas level
	  if (lastSaveAlertFlag == 1 && saveAlertFlag == 2) {
 8004082:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <checkGasReading+0x198>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 80a0 	bne.w	80041cc <checkGasReading+0x17c>
 800408c:	4b55      	ldr	r3, [pc, #340]	; (80041e4 <checkGasReading+0x194>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	f040 809b 	bne.w	80041cc <checkGasReading+0x17c>

		  // Turn on Buzzer
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004096:	2100      	movs	r1, #0
 8004098:	4854      	ldr	r0, [pc, #336]	; (80041ec <checkGasReading+0x19c>)
 800409a:	f00a faa9 	bl	800e5f0 <HAL_TIM_PWM_Start>

		  // Turn on red LED
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800409e:	2100      	movs	r1, #0
 80040a0:	4853      	ldr	r0, [pc, #332]	; (80041f0 <checkGasReading+0x1a0>)
 80040a2:	f00a faa5 	bl	800e5f0 <HAL_TIM_PWM_Start>

		  // Turn off green LED
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80040a6:	2108      	movs	r1, #8
 80040a8:	4851      	ldr	r0, [pc, #324]	; (80041f0 <checkGasReading+0x1a0>)
 80040aa:	f00a fba7 	bl	800e7fc <HAL_TIM_PWM_Stop>

		  HAL_UART_Transmit(&huart1, "High Gas Level Detected!\n", 25, BUS_TIMEOUT);
 80040ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040b2:	2219      	movs	r2, #25
 80040b4:	494f      	ldr	r1, [pc, #316]	; (80041f4 <checkGasReading+0x1a4>)
 80040b6:	4850      	ldr	r0, [pc, #320]	; (80041f8 <checkGasReading+0x1a8>)
 80040b8:	f00b fb86 	bl	800f7c8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3, "High Gas Level Detected!\n", 25, BUS_TIMEOUT);
 80040bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c0:	2219      	movs	r2, #25
 80040c2:	494c      	ldr	r1, [pc, #304]	; (80041f4 <checkGasReading+0x1a4>)
 80040c4:	484d      	ldr	r0, [pc, #308]	; (80041fc <checkGasReading+0x1ac>)
 80040c6:	f00b fb7f 	bl	800f7c8 <HAL_UART_Transmit>


		  time_t t = HAL_GetTick() / 1000;
 80040ca:	f004 fa1b 	bl	8008504 <HAL_GetTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4a4b      	ldr	r2, [pc, #300]	; (8004200 <checkGasReading+0x1b0>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	2200      	movs	r2, #0
 80040da:	461c      	mov	r4, r3
 80040dc:	4615      	mov	r5, r2
 80040de:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28

		  struct tm tm = *localtime(&t);
 80040e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040e6:	4618      	mov	r0, r3
 80040e8:	f00d fd5e 	bl	8011ba8 <localtime>
 80040ec:	4603      	mov	r3, r0
 80040ee:	1d3c      	adds	r4, r7, #4
 80040f0:	461d      	mov	r5, r3
 80040f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	6023      	str	r3, [r4, #0]

		  sprintf(chBuffer, "%d-%d-%d %d:%d:%d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f203 746c 	addw	r4, r3, #1900	; 0x76c
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1c5d      	adds	r5, r3, #1
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	9003      	str	r0, [sp, #12]
 8004112:	9102      	str	r1, [sp, #8]
 8004114:	9201      	str	r2, [sp, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	462b      	mov	r3, r5
 800411a:	4622      	mov	r2, r4
 800411c:	4939      	ldr	r1, [pc, #228]	; (8004204 <checkGasReading+0x1b4>)
 800411e:	483a      	ldr	r0, [pc, #232]	; (8004208 <checkGasReading+0x1b8>)
 8004120:	f00d fcc2 	bl	8011aa8 <siprintf>
												 tm.tm_hour, tm.tm_min, tm.tm_sec);

		  sprintf(fileIn, "High gas level detected at %s\nTemperature: %.2lf\nGas reistance: %.2lf\n", chBuffer, avgTemp, avgGas);
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <checkGasReading+0x1bc>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	492d      	ldr	r1, [pc, #180]	; (80041e0 <checkGasReading+0x190>)
 800412c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004134:	e9cd 2300 	strd	r2, r3, [sp]
 8004138:	4a33      	ldr	r2, [pc, #204]	; (8004208 <checkGasReading+0x1b8>)
 800413a:	4935      	ldr	r1, [pc, #212]	; (8004210 <checkGasReading+0x1c0>)
 800413c:	4835      	ldr	r0, [pc, #212]	; (8004214 <checkGasReading+0x1c4>)
 800413e:	f00d fcb3 	bl	8011aa8 <siprintf>
		  fileLen = strlen(fileIn);
 8004142:	4834      	ldr	r0, [pc, #208]	; (8004214 <checkGasReading+0x1c4>)
 8004144:	f7fc f8a4 	bl	8000290 <strlen>
 8004148:	4603      	mov	r3, r0
 800414a:	4a33      	ldr	r2, [pc, #204]	; (8004218 <checkGasReading+0x1c8>)
 800414c:	6013      	str	r3, [r2, #0]
		  sprintf(filename, "Alert_%s", chBuffer);
 800414e:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <checkGasReading+0x1b8>)
 8004150:	4932      	ldr	r1, [pc, #200]	; (800421c <checkGasReading+0x1cc>)
 8004152:	4833      	ldr	r0, [pc, #204]	; (8004220 <checkGasReading+0x1d0>)
 8004154:	f00d fca8 	bl	8011aa8 <siprintf>

		  didFileWrite = writeFile(fileIn, fileLen, filename, 1);
 8004158:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <checkGasReading+0x1c8>)
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	2301      	movs	r3, #1
 800415e:	4a30      	ldr	r2, [pc, #192]	; (8004220 <checkGasReading+0x1d0>)
 8004160:	482c      	ldr	r0, [pc, #176]	; (8004214 <checkGasReading+0x1c4>)
 8004162:	f002 f966 	bl	8006432 <writeFile>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <checkGasReading+0x1d4>)
 800416c:	701a      	strb	r2, [r3, #0]

		  // If the file failed to write try again
		  if (didFileWrite == 0) {
 800416e:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <checkGasReading+0x1d4>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d12a      	bne.n	80041cc <checkGasReading+0x17c>
			  writeFile(fileIn, fileLen, filename, fileType);
 8004176:	4b28      	ldr	r3, [pc, #160]	; (8004218 <checkGasReading+0x1c8>)
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <checkGasReading+0x1d8>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	4a28      	ldr	r2, [pc, #160]	; (8004220 <checkGasReading+0x1d0>)
 8004180:	4824      	ldr	r0, [pc, #144]	; (8004214 <checkGasReading+0x1c4>)
 8004182:	f002 f956 	bl	8006432 <writeFile>
			  // Turn on green LED
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

		  }
	  }
}
 8004186:	e021      	b.n	80041cc <checkGasReading+0x17c>
		  hysteresis += 1;
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <checkGasReading+0x1dc>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <checkGasReading+0x1dc>)
 8004192:	701a      	strb	r2, [r3, #0]
		  if (hysteresis >= 2) {
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <checkGasReading+0x1dc>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d917      	bls.n	80041cc <checkGasReading+0x17c>
			  hysteresis -= 1;
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <checkGasReading+0x1dc>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <checkGasReading+0x1dc>)
 80041a6:	701a      	strb	r2, [r3, #0]
			  lastSaveAlertFlag = 0;
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <checkGasReading+0x198>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
			  saveAlertFlag = 0;
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <checkGasReading+0x194>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80041b4:	2100      	movs	r1, #0
 80041b6:	480d      	ldr	r0, [pc, #52]	; (80041ec <checkGasReading+0x19c>)
 80041b8:	f00a fb20 	bl	800e7fc <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80041bc:	2100      	movs	r1, #0
 80041be:	480c      	ldr	r0, [pc, #48]	; (80041f0 <checkGasReading+0x1a0>)
 80041c0:	f00a fb1c 	bl	800e7fc <HAL_TIM_PWM_Stop>
			  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80041c4:	2108      	movs	r1, #8
 80041c6:	480a      	ldr	r0, [pc, #40]	; (80041f0 <checkGasReading+0x1a0>)
 80041c8:	f00a fa12 	bl	800e5f0 <HAL_TIM_PWM_Start>
}
 80041cc:	bf00      	nop
 80041ce:	3730      	adds	r7, #48	; 0x30
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdb0      	pop	{r4, r5, r7, pc}
 80041d4:	f3af 8000 	nop.w
 80041d8:	00000000 	.word	0x00000000
 80041dc:	41055cc0 	.word	0x41055cc0
 80041e0:	20000b68 	.word	0x20000b68
 80041e4:	2000000b 	.word	0x2000000b
 80041e8:	2000000a 	.word	0x2000000a
 80041ec:	20000474 	.word	0x20000474
 80041f0:	200004c0 	.word	0x200004c0
 80041f4:	08014f10 	.word	0x08014f10
 80041f8:	2000050c 	.word	0x2000050c
 80041fc:	2000061c 	.word	0x2000061c
 8004200:	10624dd3 	.word	0x10624dd3
 8004204:	08014f2c 	.word	0x08014f2c
 8004208:	20000b70 	.word	0x20000b70
 800420c:	20000b60 	.word	0x20000b60
 8004210:	08014f40 	.word	0x08014f40
 8004214:	20000eb8 	.word	0x20000eb8
 8004218:	20000eb4 	.word	0x20000eb4
 800421c:	08014f88 	.word	0x08014f88
 8004220:	20000e74 	.word	0x20000e74
 8004224:	20001eec 	.word	0x20001eec
 8004228:	20000008 	.word	0x20000008
 800422c:	20001ef1 	.word	0x20001ef1

08004230 <checkADCReading>:

void checkADCReading() {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
	if (batteryVoltage < 3.600) {
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <checkADCReading+0xd0>)
 8004236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800423a:	a32f      	add	r3, pc, #188	; (adr r3, 80042f8 <checkADCReading+0xc8>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fc fc5c 	bl	8000afc <__aeabi_dcmplt>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01d      	beq.n	8004286 <checkADCReading+0x56>
		if (batAlertFlag == 1 && lastBatAlertFlag == 1) {
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <checkADCReading+0xd4>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d103      	bne.n	800425a <checkADCReading+0x2a>
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <checkADCReading+0xd8>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d01b      	beq.n	8004292 <checkADCReading+0x62>
			// do nothing
		}
		else {
			lastBatAlertFlag = batAlertFlag;
 800425a:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <checkADCReading+0xd4>)
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <checkADCReading+0xd8>)
 8004260:	701a      	strb	r2, [r3, #0]
			batAlertFlag = 1;
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <checkADCReading+0xd4>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "Low battery voltage detected!\n", 30, BUS_TIMEOUT);
 8004268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426c:	221e      	movs	r2, #30
 800426e:	4927      	ldr	r1, [pc, #156]	; (800430c <checkADCReading+0xdc>)
 8004270:	4827      	ldr	r0, [pc, #156]	; (8004310 <checkADCReading+0xe0>)
 8004272:	f00b faa9 	bl	800f7c8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "Low battery voltage detected!\n", 30, BUS_TIMEOUT);
 8004276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427a:	221e      	movs	r2, #30
 800427c:	4923      	ldr	r1, [pc, #140]	; (800430c <checkADCReading+0xdc>)
 800427e:	4825      	ldr	r0, [pc, #148]	; (8004314 <checkADCReading+0xe4>)
 8004280:	f00b faa2 	bl	800f7c8 <HAL_UART_Transmit>
 8004284:	e005      	b.n	8004292 <checkADCReading+0x62>
		}
	}
	else {
		lastBatAlertFlag = 0;
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <checkADCReading+0xd8>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
		batAlertFlag = 0;
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <checkADCReading+0xd4>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
	}



	if (SPVoltage < 200) {
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <checkADCReading+0xe8>)
 8004294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	4b1f      	ldr	r3, [pc, #124]	; (800431c <checkADCReading+0xec>)
 800429e:	f7fc fc2d 	bl	8000afc <__aeabi_dcmplt>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01d      	beq.n	80042e4 <checkADCReading+0xb4>
		if (SPAlertFlag == 1 && lastSPAlertFlag == 1)
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <checkADCReading+0xf0>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d103      	bne.n	80042b8 <checkADCReading+0x88>
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <checkADCReading+0xf4>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d01c      	beq.n	80042f2 <checkADCReading+0xc2>
			return;

		lastSPAlertFlag = SPAlertFlag;
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <checkADCReading+0xf0>)
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <checkADCReading+0xf4>)
 80042be:	701a      	strb	r2, [r3, #0]
		SPAlertFlag = 1;
 80042c0:	4b17      	ldr	r3, [pc, #92]	; (8004320 <checkADCReading+0xf0>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart1, "Low solar panel voltage!\n", 25, BUS_TIMEOUT);
 80042c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ca:	2219      	movs	r2, #25
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <checkADCReading+0xf8>)
 80042ce:	4810      	ldr	r0, [pc, #64]	; (8004310 <checkADCReading+0xe0>)
 80042d0:	f00b fa7a 	bl	800f7c8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "Low solar panel voltage!\n", 25, BUS_TIMEOUT);
 80042d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042d8:	2219      	movs	r2, #25
 80042da:	4913      	ldr	r1, [pc, #76]	; (8004328 <checkADCReading+0xf8>)
 80042dc:	480d      	ldr	r0, [pc, #52]	; (8004314 <checkADCReading+0xe4>)
 80042de:	f00b fa73 	bl	800f7c8 <HAL_UART_Transmit>
 80042e2:	e007      	b.n	80042f4 <checkADCReading+0xc4>
	}
	else {
		lastSPAlertFlag = 0;
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <checkADCReading+0xf4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
		SPAlertFlag = 0;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <checkADCReading+0xf0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e000      	b.n	80042f4 <checkADCReading+0xc4>
			return;
 80042f2:	bf00      	nop
	}



}
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	cccccccd 	.word	0xcccccccd
 80042fc:	400ccccc 	.word	0x400ccccc
 8004300:	20000b50 	.word	0x20000b50
 8004304:	20001eed 	.word	0x20001eed
 8004308:	20001eee 	.word	0x20001eee
 800430c:	08014f94 	.word	0x08014f94
 8004310:	2000050c 	.word	0x2000050c
 8004314:	2000061c 	.word	0x2000061c
 8004318:	20000b58 	.word	0x20000b58
 800431c:	40690000 	.word	0x40690000
 8004320:	20001ef0 	.word	0x20001ef0
 8004324:	20001eef 	.word	0x20001eef
 8004328:	08014fb4 	.word	0x08014fb4

0800432c <setDC>:

// PWM functions
void setDC(TIM_HandleTypeDef *handle, uint8_t CH, uint16_t dc) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
 8004338:	4613      	mov	r3, r2
 800433a:	803b      	strh	r3, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
 800434c:	615a      	str	r2, [r3, #20]
 800434e:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004350:	2360      	movs	r3, #96	; 0x60
 8004352:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = dc;
 8004354:	883b      	ldrh	r3, [r7, #0]
 8004356:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	2200      	movs	r2, #0
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f00a fbd9 	bl	800eb2c <HAL_TIM_PWM_ConfigChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <setDC+0x58>
	{
	Error_Handler();
 8004380:	f000 fc08 	bl	8004b94 <Error_Handler>
	}
}
 8004384:	bf00      	nop
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <setPeriod>:
void setPeriod(TIM_HandleTypeDef *handle, uint8_t CH, uint16_t period) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
 8004398:	4613      	mov	r3, r2
 800439a:	803b      	strh	r3, [r7, #0]
	(*handle).Init.Period = period;
 800439c:	883a      	ldrh	r2, [r7, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_PWM_Init(handle) != HAL_OK)
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f00a f8cc 	bl	800e540 <HAL_TIM_PWM_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <setPeriod+0x26>
	{
	Error_Handler();
 80043ae:	f000 fbf1 	bl	8004b94 <Error_Handler>
	}
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <flashStateMachine>:

// FLASH MEMORY FUNCTIONS
void flashStateMachine() {
 80043bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043be:	b08b      	sub	sp, #44	; 0x2c
 80043c0:	af08      	add	r7, sp, #32

	for (int i = 0; i < 25; i++) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	e19c      	b.n	8004702 <flashStateMachine+0x346>
		HAL_Delay(20);
 80043c8:	2014      	movs	r0, #20
 80043ca:	f004 f8a7 	bl	800851c <HAL_Delay>

		switch (state) {
 80043ce:	4ba0      	ldr	r3, [pc, #640]	; (8004650 <flashStateMachine+0x294>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	f200 8192 	bhi.w	80046fc <flashStateMachine+0x340>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <flashStateMachine+0x24>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004403 	.word	0x08004403
 80043e8:	080044a1 	.word	0x080044a1
 80043ec:	080044c5 	.word	0x080044c5
 80043f0:	080044e9 	.word	0x080044e9
 80043f4:	08004565 	.word	0x08004565
 80043f8:	0800462f 	.word	0x0800462f
			 case idle:
				 parseCommand();
 80043fc:	f000 f99a 	bl	8004734 <parseCommand>
				 break;
 8004400:	e17c      	b.n	80046fc <flashStateMachine+0x340>

			 case store:
				 parseStoreCommand();
 8004402:	f000 fa69 	bl	80048d8 <parseStoreCommand>

				 if (fileType != 1) {
 8004406:	4b93      	ldr	r3, [pc, #588]	; (8004654 <flashStateMachine+0x298>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d00f      	beq.n	800442e <flashStateMachine+0x72>
					 state = idle;
 800440e:	4b90      	ldr	r3, [pc, #576]	; (8004650 <flashStateMachine+0x294>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 8004414:	4b90      	ldr	r3, [pc, #576]	; (8004658 <flashStateMachine+0x29c>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <flashStateMachine+0x64>
 800441c:	488f      	ldr	r0, [pc, #572]	; (800465c <flashStateMachine+0x2a0>)
 800441e:	e000      	b.n	8004422 <flashStateMachine+0x66>
 8004420:	488f      	ldr	r0, [pc, #572]	; (8004660 <flashStateMachine+0x2a4>)
 8004422:	2301      	movs	r3, #1
 8004424:	2202      	movs	r2, #2
 8004426:	498f      	ldr	r1, [pc, #572]	; (8004664 <flashStateMachine+0x2a8>)
 8004428:	f00b f9ce 	bl	800f7c8 <HAL_UART_Transmit>
					 break;
 800442c:	e166      	b.n	80046fc <flashStateMachine+0x340>
				 }

				 // TODO : If in here for too long, go back to idle and free buffer

				 didFileWrite = writeFile(fileIn, fileLen, filename, fileType);
 800442e:	4b8e      	ldr	r3, [pc, #568]	; (8004668 <flashStateMachine+0x2ac>)
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <flashStateMachine+0x298>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	4a8d      	ldr	r2, [pc, #564]	; (800466c <flashStateMachine+0x2b0>)
 8004438:	488d      	ldr	r0, [pc, #564]	; (8004670 <flashStateMachine+0x2b4>)
 800443a:	f001 fffa 	bl	8006432 <writeFile>
 800443e:	4603      	mov	r3, r0
 8004440:	461a      	mov	r2, r3
 8004442:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <flashStateMachine+0x2b8>)
 8004444:	701a      	strb	r2, [r3, #0]

				 if (didFileWrite == 1) {
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <flashStateMachine+0x2b8>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10c      	bne.n	8004468 <flashStateMachine+0xac>
					 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Wrote file successfully\n", 24, 100);
 800444e:	4b82      	ldr	r3, [pc, #520]	; (8004658 <flashStateMachine+0x29c>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <flashStateMachine+0x9e>
 8004456:	4881      	ldr	r0, [pc, #516]	; (800465c <flashStateMachine+0x2a0>)
 8004458:	e000      	b.n	800445c <flashStateMachine+0xa0>
 800445a:	4881      	ldr	r0, [pc, #516]	; (8004660 <flashStateMachine+0x2a4>)
 800445c:	2364      	movs	r3, #100	; 0x64
 800445e:	2218      	movs	r2, #24
 8004460:	4985      	ldr	r1, [pc, #532]	; (8004678 <flashStateMachine+0x2bc>)
 8004462:	f00b f9b1 	bl	800f7c8 <HAL_UART_Transmit>
 8004466:	e00b      	b.n	8004480 <flashStateMachine+0xc4>
				 }
				 else {
					 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Failed to Write file\n", 21, 100);
 8004468:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <flashStateMachine+0x29c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <flashStateMachine+0xb8>
 8004470:	487a      	ldr	r0, [pc, #488]	; (800465c <flashStateMachine+0x2a0>)
 8004472:	e000      	b.n	8004476 <flashStateMachine+0xba>
 8004474:	487a      	ldr	r0, [pc, #488]	; (8004660 <flashStateMachine+0x2a4>)
 8004476:	2364      	movs	r3, #100	; 0x64
 8004478:	2215      	movs	r2, #21
 800447a:	4980      	ldr	r1, [pc, #512]	; (800467c <flashStateMachine+0x2c0>)
 800447c:	f00b f9a4 	bl	800f7c8 <HAL_UART_Transmit>
				 }

				 state = idle;
 8004480:	4b73      	ldr	r3, [pc, #460]	; (8004650 <flashStateMachine+0x294>)
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 8004486:	4b74      	ldr	r3, [pc, #464]	; (8004658 <flashStateMachine+0x29c>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <flashStateMachine+0xd6>
 800448e:	4873      	ldr	r0, [pc, #460]	; (800465c <flashStateMachine+0x2a0>)
 8004490:	e000      	b.n	8004494 <flashStateMachine+0xd8>
 8004492:	4873      	ldr	r0, [pc, #460]	; (8004660 <flashStateMachine+0x2a4>)
 8004494:	2301      	movs	r3, #1
 8004496:	2202      	movs	r2, #2
 8004498:	4972      	ldr	r1, [pc, #456]	; (8004664 <flashStateMachine+0x2a8>)
 800449a:	f00b f995 	bl	800f7c8 <HAL_UART_Transmit>


				 break;
 800449e:	e12d      	b.n	80046fc <flashStateMachine+0x340>

			 case dir:
				getDir();
 80044a0:	f001 fd30 	bl	8005f04 <getDir>
				state = idle;
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <flashStateMachine+0x294>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 80044aa:	4b6b      	ldr	r3, [pc, #428]	; (8004658 <flashStateMachine+0x29c>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <flashStateMachine+0xfa>
 80044b2:	486a      	ldr	r0, [pc, #424]	; (800465c <flashStateMachine+0x2a0>)
 80044b4:	e000      	b.n	80044b8 <flashStateMachine+0xfc>
 80044b6:	486a      	ldr	r0, [pc, #424]	; (8004660 <flashStateMachine+0x2a4>)
 80044b8:	2301      	movs	r3, #1
 80044ba:	2202      	movs	r2, #2
 80044bc:	4969      	ldr	r1, [pc, #420]	; (8004664 <flashStateMachine+0x2a8>)
 80044be:	f00b f983 	bl	800f7c8 <HAL_UART_Transmit>
				break;
 80044c2:	e11b      	b.n	80046fc <flashStateMachine+0x340>

			 case mem:
				 profileMemory();
 80044c4:	f001 fc04 	bl	8005cd0 <profileMemory>
				 state = idle;
 80044c8:	4b61      	ldr	r3, [pc, #388]	; (8004650 <flashStateMachine+0x294>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 80044ce:	4b62      	ldr	r3, [pc, #392]	; (8004658 <flashStateMachine+0x29c>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <flashStateMachine+0x11e>
 80044d6:	4861      	ldr	r0, [pc, #388]	; (800465c <flashStateMachine+0x2a0>)
 80044d8:	e000      	b.n	80044dc <flashStateMachine+0x120>
 80044da:	4861      	ldr	r0, [pc, #388]	; (8004660 <flashStateMachine+0x2a4>)
 80044dc:	2301      	movs	r3, #1
 80044de:	2202      	movs	r2, #2
 80044e0:	4960      	ldr	r1, [pc, #384]	; (8004664 <flashStateMachine+0x2a8>)
 80044e2:	f00b f971 	bl	800f7c8 <HAL_UART_Transmit>
				 break;
 80044e6:	e109      	b.n	80046fc <flashStateMachine+0x340>

			 case del:
				 parseINodeNumber();
 80044e8:	f000 faf8 	bl	8004adc <parseINodeNumber>

				 if (INodeNumber != 0) {
 80044ec:	4b64      	ldr	r3, [pc, #400]	; (8004680 <flashStateMachine+0x2c4>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d033      	beq.n	800455c <flashStateMachine+0x1a0>

					 if (deleteINode(INodeNumber)) {
 80044f4:	4b62      	ldr	r3, [pc, #392]	; (8004680 <flashStateMachine+0x2c4>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f002 fd5f 	bl	8006fbc <deleteINode>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00c      	beq.n	800451e <flashStateMachine+0x162>
						 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "File has been deleted\n", 22, 100);
 8004504:	4b54      	ldr	r3, [pc, #336]	; (8004658 <flashStateMachine+0x29c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <flashStateMachine+0x154>
 800450c:	4853      	ldr	r0, [pc, #332]	; (800465c <flashStateMachine+0x2a0>)
 800450e:	e000      	b.n	8004512 <flashStateMachine+0x156>
 8004510:	4853      	ldr	r0, [pc, #332]	; (8004660 <flashStateMachine+0x2a4>)
 8004512:	2364      	movs	r3, #100	; 0x64
 8004514:	2216      	movs	r2, #22
 8004516:	495b      	ldr	r1, [pc, #364]	; (8004684 <flashStateMachine+0x2c8>)
 8004518:	f00b f956 	bl	800f7c8 <HAL_UART_Transmit>
 800451c:	e00b      	b.n	8004536 <flashStateMachine+0x17a>
					 }
					 else {
						 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Failed to find INode\n", 21, 100);
 800451e:	4b4e      	ldr	r3, [pc, #312]	; (8004658 <flashStateMachine+0x29c>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <flashStateMachine+0x16e>
 8004526:	484d      	ldr	r0, [pc, #308]	; (800465c <flashStateMachine+0x2a0>)
 8004528:	e000      	b.n	800452c <flashStateMachine+0x170>
 800452a:	484d      	ldr	r0, [pc, #308]	; (8004660 <flashStateMachine+0x2a4>)
 800452c:	2364      	movs	r3, #100	; 0x64
 800452e:	2215      	movs	r2, #21
 8004530:	4955      	ldr	r1, [pc, #340]	; (8004688 <flashStateMachine+0x2cc>)
 8004532:	f00b f949 	bl	800f7c8 <HAL_UART_Transmit>
					 }
					 state = idle;
 8004536:	4b46      	ldr	r3, [pc, #280]	; (8004650 <flashStateMachine+0x294>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 800453c:	4b46      	ldr	r3, [pc, #280]	; (8004658 <flashStateMachine+0x29c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <flashStateMachine+0x18c>
 8004544:	4845      	ldr	r0, [pc, #276]	; (800465c <flashStateMachine+0x2a0>)
 8004546:	e000      	b.n	800454a <flashStateMachine+0x18e>
 8004548:	4845      	ldr	r0, [pc, #276]	; (8004660 <flashStateMachine+0x2a4>)
 800454a:	2301      	movs	r3, #1
 800454c:	2202      	movs	r2, #2
 800454e:	4945      	ldr	r1, [pc, #276]	; (8004664 <flashStateMachine+0x2a8>)
 8004550:	f00b f93a 	bl	800f7c8 <HAL_UART_Transmit>

					 INodeNumber = 0;
 8004554:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <flashStateMachine+0x2c4>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
				 }
				 else {
					 state = idle;
				 }

				 break;
 800455a:	e0cf      	b.n	80046fc <flashStateMachine+0x340>
					 state = idle;
 800455c:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <flashStateMachine+0x294>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
				 break;
 8004562:	e0cb      	b.n	80046fc <flashStateMachine+0x340>

			 case read:
				 parseINodeNumber();
 8004564:	f000 faba 	bl	8004adc <parseINodeNumber>

				 if (INodeNumber != 0) {
 8004568:	4b45      	ldr	r3, [pc, #276]	; (8004680 <flashStateMachine+0x2c4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05a      	beq.n	8004626 <flashStateMachine+0x26a>

					 if (getINode(INodeNumber, &node)) {
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <flashStateMachine+0x2c4>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4945      	ldr	r1, [pc, #276]	; (800468c <flashStateMachine+0x2d0>)
 8004576:	4618      	mov	r0, r3
 8004578:	f003 fb16 	bl	8007ba8 <getINode>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d032      	beq.n	80045e8 <flashStateMachine+0x22c>
						 fileReadFromMem = readFile(node);
 8004582:	4e42      	ldr	r6, [pc, #264]	; (800468c <flashStateMachine+0x2d0>)
 8004584:	466d      	mov	r5, sp
 8004586:	f106 0410 	add.w	r4, r6, #16
 800458a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800458c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800458e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004592:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004596:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800459a:	f001 fe99 	bl	80062d0 <readFile>
 800459e:	4603      	mov	r3, r0
 80045a0:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <flashStateMachine+0x2d4>)
 80045a2:	6013      	str	r3, [r2, #0]
						 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, fileReadFromMem, node.fileSize, 10000);
 80045a4:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <flashStateMachine+0x29c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <flashStateMachine+0x1f4>
 80045ac:	482b      	ldr	r0, [pc, #172]	; (800465c <flashStateMachine+0x2a0>)
 80045ae:	e000      	b.n	80045b2 <flashStateMachine+0x1f6>
 80045b0:	482b      	ldr	r0, [pc, #172]	; (8004660 <flashStateMachine+0x2a4>)
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <flashStateMachine+0x2d4>)
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	4b35      	ldr	r3, [pc, #212]	; (800468c <flashStateMachine+0x2d0>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80045c0:	f00b f902 	bl	800f7c8 <HAL_UART_Transmit>
						 free(fileReadFromMem);
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <flashStateMachine+0x2d4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f00c fbcb 	bl	8010d64 <free>
						 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n", 1, 100);
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <flashStateMachine+0x29c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <flashStateMachine+0x21e>
 80045d6:	4821      	ldr	r0, [pc, #132]	; (800465c <flashStateMachine+0x2a0>)
 80045d8:	e000      	b.n	80045dc <flashStateMachine+0x220>
 80045da:	4821      	ldr	r0, [pc, #132]	; (8004660 <flashStateMachine+0x2a4>)
 80045dc:	2364      	movs	r3, #100	; 0x64
 80045de:	2201      	movs	r2, #1
 80045e0:	492c      	ldr	r1, [pc, #176]	; (8004694 <flashStateMachine+0x2d8>)
 80045e2:	f00b f8f1 	bl	800f7c8 <HAL_UART_Transmit>
 80045e6:	e00b      	b.n	8004600 <flashStateMachine+0x244>
					 }
					 else {
						 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Failed to read file\n", 20, 100);
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <flashStateMachine+0x29c>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <flashStateMachine+0x238>
 80045f0:	481a      	ldr	r0, [pc, #104]	; (800465c <flashStateMachine+0x2a0>)
 80045f2:	e000      	b.n	80045f6 <flashStateMachine+0x23a>
 80045f4:	481a      	ldr	r0, [pc, #104]	; (8004660 <flashStateMachine+0x2a4>)
 80045f6:	2364      	movs	r3, #100	; 0x64
 80045f8:	2214      	movs	r2, #20
 80045fa:	4927      	ldr	r1, [pc, #156]	; (8004698 <flashStateMachine+0x2dc>)
 80045fc:	f00b f8e4 	bl	800f7c8 <HAL_UART_Transmit>
					 }
					 state = idle;
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <flashStateMachine+0x294>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <flashStateMachine+0x29c>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <flashStateMachine+0x256>
 800460e:	4813      	ldr	r0, [pc, #76]	; (800465c <flashStateMachine+0x2a0>)
 8004610:	e000      	b.n	8004614 <flashStateMachine+0x258>
 8004612:	4813      	ldr	r0, [pc, #76]	; (8004660 <flashStateMachine+0x2a4>)
 8004614:	2301      	movs	r3, #1
 8004616:	2202      	movs	r2, #2
 8004618:	4912      	ldr	r1, [pc, #72]	; (8004664 <flashStateMachine+0x2a8>)
 800461a:	f00b f8d5 	bl	800f7c8 <HAL_UART_Transmit>

					 INodeNumber = 0;
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <flashStateMachine+0x2c4>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
				 }
				 else {
					 state = idle;
				 }
				 break;
 8004624:	e06a      	b.n	80046fc <flashStateMachine+0x340>
					 state = idle;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <flashStateMachine+0x294>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
				 break;
 800462c:	e066      	b.n	80046fc <flashStateMachine+0x340>

			 case clear:
				if (chipErase()) {
 800462e:	f001 fa5d 	bl	8005aec <chipErase>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d045      	beq.n	80046c4 <flashStateMachine+0x308>
					if (SetupFilesystem()) {
 8004638:	f001 fec1 	bl	80063be <SetupFilesystem>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d033      	beq.n	80046aa <flashStateMachine+0x2ee>
						HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Memory has been cleared\n", 24, 100);
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <flashStateMachine+0x29c>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <flashStateMachine+0x2e0>
 800464a:	4804      	ldr	r0, [pc, #16]	; (800465c <flashStateMachine+0x2a0>)
 800464c:	e027      	b.n	800469e <flashStateMachine+0x2e2>
 800464e:	bf00      	nop
 8004650:	20000e71 	.word	0x20000e71
 8004654:	20000008 	.word	0x20000008
 8004658:	20000009 	.word	0x20000009
 800465c:	2000050c 	.word	0x2000050c
 8004660:	2000061c 	.word	0x2000061c
 8004664:	08014fd0 	.word	0x08014fd0
 8004668:	20000eb4 	.word	0x20000eb4
 800466c:	20000e74 	.word	0x20000e74
 8004670:	20000eb8 	.word	0x20000eb8
 8004674:	20001eec 	.word	0x20001eec
 8004678:	08014fd4 	.word	0x08014fd4
 800467c:	08014ff0 	.word	0x08014ff0
 8004680:	20000e72 	.word	0x20000e72
 8004684:	08015008 	.word	0x08015008
 8004688:	08015020 	.word	0x08015020
 800468c:	20001eb8 	.word	0x20001eb8
 8004690:	20001ee8 	.word	0x20001ee8
 8004694:	08015038 	.word	0x08015038
 8004698:	0801503c 	.word	0x0801503c
 800469c:	481d      	ldr	r0, [pc, #116]	; (8004714 <flashStateMachine+0x358>)
 800469e:	2364      	movs	r3, #100	; 0x64
 80046a0:	2218      	movs	r2, #24
 80046a2:	491d      	ldr	r1, [pc, #116]	; (8004718 <flashStateMachine+0x35c>)
 80046a4:	f00b f890 	bl	800f7c8 <HAL_UART_Transmit>
 80046a8:	e018      	b.n	80046dc <flashStateMachine+0x320>
					}
					else {
						HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Failed to initialize file system\n", 33, 100);
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <flashStateMachine+0x360>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <flashStateMachine+0x2fa>
 80046b2:	481b      	ldr	r0, [pc, #108]	; (8004720 <flashStateMachine+0x364>)
 80046b4:	e000      	b.n	80046b8 <flashStateMachine+0x2fc>
 80046b6:	4817      	ldr	r0, [pc, #92]	; (8004714 <flashStateMachine+0x358>)
 80046b8:	2364      	movs	r3, #100	; 0x64
 80046ba:	2221      	movs	r2, #33	; 0x21
 80046bc:	4919      	ldr	r1, [pc, #100]	; (8004724 <flashStateMachine+0x368>)
 80046be:	f00b f883 	bl	800f7c8 <HAL_UART_Transmit>
 80046c2:	e00b      	b.n	80046dc <flashStateMachine+0x320>
					}

				}
				else {
					HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Failed to clear memory\n", 23, 100);
 80046c4:	4b15      	ldr	r3, [pc, #84]	; (800471c <flashStateMachine+0x360>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <flashStateMachine+0x314>
 80046cc:	4814      	ldr	r0, [pc, #80]	; (8004720 <flashStateMachine+0x364>)
 80046ce:	e000      	b.n	80046d2 <flashStateMachine+0x316>
 80046d0:	4810      	ldr	r0, [pc, #64]	; (8004714 <flashStateMachine+0x358>)
 80046d2:	2364      	movs	r3, #100	; 0x64
 80046d4:	2217      	movs	r2, #23
 80046d6:	4914      	ldr	r1, [pc, #80]	; (8004728 <flashStateMachine+0x36c>)
 80046d8:	f00b f876 	bl	800f7c8 <HAL_UART_Transmit>
				}
				state = idle;
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <flashStateMachine+0x370>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <flashStateMachine+0x360>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <flashStateMachine+0x332>
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <flashStateMachine+0x364>)
 80046ec:	e000      	b.n	80046f0 <flashStateMachine+0x334>
 80046ee:	4809      	ldr	r0, [pc, #36]	; (8004714 <flashStateMachine+0x358>)
 80046f0:	2301      	movs	r3, #1
 80046f2:	2202      	movs	r2, #2
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <flashStateMachine+0x374>)
 80046f6:	f00b f867 	bl	800f7c8 <HAL_UART_Transmit>

				break;
 80046fa:	bf00      	nop
	for (int i = 0; i < 25; i++) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b18      	cmp	r3, #24
 8004706:	f77f ae5f 	ble.w	80043c8 <flashStateMachine+0xc>
		 }
	}
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004714:	2000061c 	.word	0x2000061c
 8004718:	08015054 	.word	0x08015054
 800471c:	20000009 	.word	0x20000009
 8004720:	2000050c 	.word	0x2000050c
 8004724:	08015070 	.word	0x08015070
 8004728:	08015094 	.word	0x08015094
 800472c:	20000e71 	.word	0x20000e71
 8004730:	08014fd0 	.word	0x08014fd0

08004734 <parseCommand>:


void parseCommand() {
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
	char trash;

	/* Check if a command was entered - read length of longest command*/
	char temp[10];
	get(temp, 10);
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	210a      	movs	r1, #10
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fa26 	bl	8003b90 <get>

	// If the buffer does not have enough chars for a command yet
	if (strlen(temp) < 3) {
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	4618      	mov	r0, r3
 8004748:	f7fb fda2 	bl	8000290 <strlen>
 800474c:	4603      	mov	r3, r0
 800474e:	2b02      	cmp	r3, #2
 8004750:	f240 80a6 	bls.w	80048a0 <parseCommand+0x16c>
		return;
	}


	if (strncmp(temp, "store", 5) == 0) {
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	2205      	movs	r2, #5
 8004758:	4953      	ldr	r1, [pc, #332]	; (80048a8 <parseCommand+0x174>)
 800475a:	4618      	mov	r0, r3
 800475c:	f00d fa11 	bl	8011b82 <strncmp>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11c      	bne.n	80047a0 <parseCommand+0x6c>
		state = store;
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <parseCommand+0x178>)
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
		memset(filename, 0, NAME_LIM);
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	2100      	movs	r1, #0
 8004770:	484f      	ldr	r0, [pc, #316]	; (80048b0 <parseCommand+0x17c>)
 8004772:	f00d f9fe 	bl	8011b72 <memset>
		fileType = 255;
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <parseCommand+0x180>)
 8004778:	22ff      	movs	r2, #255	; 0xff
 800477a:	701a      	strb	r2, [r3, #0]
		endOfFile = 0;
 800477c:	4b4e      	ldr	r3, [pc, #312]	; (80048b8 <parseCommand+0x184>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
		fileLen = 0;
 8004782:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <parseCommand+0x188>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 6; i++) pop();
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	e004      	b.n	8004798 <parseCommand+0x64>
 800478e:	f7ff fa45 	bl	8003c1c <pop>
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	3301      	adds	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	2b05      	cmp	r3, #5
 800479c:	ddf7      	ble.n	800478e <parseCommand+0x5a>
 800479e:	e080      	b.n	80048a2 <parseCommand+0x16e>

	}
	else if (strncmp(temp, "dir", 3) == 0) {
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	2203      	movs	r2, #3
 80047a4:	4946      	ldr	r1, [pc, #280]	; (80048c0 <parseCommand+0x18c>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f00d f9eb 	bl	8011b82 <strncmp>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10e      	bne.n	80047d0 <parseCommand+0x9c>
		state = dir;
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <parseCommand+0x178>)
 80047b4:	2202      	movs	r2, #2
 80047b6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++) pop();
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	e004      	b.n	80047c8 <parseCommand+0x94>
 80047be:	f7ff fa2d 	bl	8003c1c <pop>
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	3301      	adds	r3, #1
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	ddf7      	ble.n	80047be <parseCommand+0x8a>
 80047ce:	e068      	b.n	80048a2 <parseCommand+0x16e>
	}

	else if (strncmp(temp, "mem", 3) == 0) {
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	2203      	movs	r2, #3
 80047d4:	493b      	ldr	r1, [pc, #236]	; (80048c4 <parseCommand+0x190>)
 80047d6:	4618      	mov	r0, r3
 80047d8:	f00d f9d3 	bl	8011b82 <strncmp>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10e      	bne.n	8004800 <parseCommand+0xcc>
		state = mem;
 80047e2:	4b32      	ldr	r3, [pc, #200]	; (80048ac <parseCommand+0x178>)
 80047e4:	2203      	movs	r2, #3
 80047e6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++) pop();
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e004      	b.n	80047f8 <parseCommand+0xc4>
 80047ee:	f7ff fa15 	bl	8003c1c <pop>
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	ddf7      	ble.n	80047ee <parseCommand+0xba>
 80047fe:	e050      	b.n	80048a2 <parseCommand+0x16e>
	}


	else if (strncmp(temp, "delete", 6) == 0) {
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	2206      	movs	r2, #6
 8004804:	4930      	ldr	r1, [pc, #192]	; (80048c8 <parseCommand+0x194>)
 8004806:	4618      	mov	r0, r3
 8004808:	f00d f9bb 	bl	8011b82 <strncmp>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10e      	bne.n	8004830 <parseCommand+0xfc>
		state = del;
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <parseCommand+0x178>)
 8004814:	2204      	movs	r2, #4
 8004816:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 6; i++) pop();
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e004      	b.n	8004828 <parseCommand+0xf4>
 800481e:	f7ff f9fd 	bl	8003c1c <pop>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	3301      	adds	r3, #1
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b05      	cmp	r3, #5
 800482c:	ddf7      	ble.n	800481e <parseCommand+0xea>
 800482e:	e038      	b.n	80048a2 <parseCommand+0x16e>
	}

	else if (strncmp(temp, "read", 4) == 0) {
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	2204      	movs	r2, #4
 8004834:	4925      	ldr	r1, [pc, #148]	; (80048cc <parseCommand+0x198>)
 8004836:	4618      	mov	r0, r3
 8004838:	f00d f9a3 	bl	8011b82 <strncmp>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d111      	bne.n	8004866 <parseCommand+0x132>
		INodeNumber = 0;
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <parseCommand+0x19c>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
		state = read;
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <parseCommand+0x178>)
 800484a:	2205      	movs	r2, #5
 800484c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) pop();
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e004      	b.n	800485e <parseCommand+0x12a>
 8004854:	f7ff f9e2 	bl	8003c1c <pop>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3301      	adds	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b03      	cmp	r3, #3
 8004862:	ddf7      	ble.n	8004854 <parseCommand+0x120>
 8004864:	e01d      	b.n	80048a2 <parseCommand+0x16e>
	}

	else if (strncmp(temp, "clear", 5) == 0) {
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	2205      	movs	r2, #5
 800486a:	491a      	ldr	r1, [pc, #104]	; (80048d4 <parseCommand+0x1a0>)
 800486c:	4618      	mov	r0, r3
 800486e:	f00d f988 	bl	8011b82 <strncmp>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10e      	bne.n	8004896 <parseCommand+0x162>
		state = clear;
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <parseCommand+0x178>)
 800487a:	2206      	movs	r2, #6
 800487c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i++) pop();
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e004      	b.n	800488e <parseCommand+0x15a>
 8004884:	f7ff f9ca 	bl	8003c1c <pop>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b04      	cmp	r3, #4
 8004892:	ddf7      	ble.n	8004884 <parseCommand+0x150>
 8004894:	e005      	b.n	80048a2 <parseCommand+0x16e>
	}

	// If no good command was read, advance the tail by popping once
	else {
		trash = pop();
 8004896:	f7ff f9c1 	bl	8003c1c <pop>
 800489a:	4603      	mov	r3, r0
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e000      	b.n	80048a2 <parseCommand+0x16e>
		return;
 80048a0:	bf00      	nop
	}
}
 80048a2:	3728      	adds	r7, #40	; 0x28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	080150ac 	.word	0x080150ac
 80048ac:	20000e71 	.word	0x20000e71
 80048b0:	20000e74 	.word	0x20000e74
 80048b4:	20000008 	.word	0x20000008
 80048b8:	20000eb3 	.word	0x20000eb3
 80048bc:	20000eb4 	.word	0x20000eb4
 80048c0:	080150b4 	.word	0x080150b4
 80048c4:	080150b8 	.word	0x080150b8
 80048c8:	080150bc 	.word	0x080150bc
 80048cc:	080150c4 	.word	0x080150c4
 80048d0:	20000e72 	.word	0x20000e72
 80048d4:	080150cc 	.word	0x080150cc

080048d8 <parseStoreCommand>:

void parseStoreCommand() {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
	int waitCount = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
	int i = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
	int flag = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
	char type[4] = {'\0'};
 80048ea:	2300      	movs	r3, #0
 80048ec:	607b      	str	r3, [r7, #4]
	memset(filename, '\0', NAME_LIM);
 80048ee:	223f      	movs	r2, #63	; 0x3f
 80048f0:	2100      	movs	r1, #0
 80048f2:	486d      	ldr	r0, [pc, #436]	; (8004aa8 <parseStoreCommand+0x1d0>)
 80048f4:	f00d f93d 	bl	8011b72 <memset>

	/* Parse filename */
	while (waitCount < 250) {
 80048f8:	e036      	b.n	8004968 <parseStoreCommand+0x90>
		filename[i] = pop();
 80048fa:	f7ff f98f 	bl	8003c1c <pop>
 80048fe:	4603      	mov	r3, r0
 8004900:	4619      	mov	r1, r3
 8004902:	4a69      	ldr	r2, [pc, #420]	; (8004aa8 <parseStoreCommand+0x1d0>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	460a      	mov	r2, r1
 800490a:	701a      	strb	r2, [r3, #0]

		if (filename[i] == '\0'){
 800490c:	4a66      	ldr	r2, [pc, #408]	; (8004aa8 <parseStoreCommand+0x1d0>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <parseStoreCommand+0x4e>
			waitCount++;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3301      	adds	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
			HAL_Delay(1);
 800491e:	2001      	movs	r0, #1
 8004920:	f003 fdfc 	bl	800851c <HAL_Delay>
			continue;
 8004924:	e020      	b.n	8004968 <parseStoreCommand+0x90>
		}

		if (filename[i] == '.') {
 8004926:	4a60      	ldr	r2, [pc, #384]	; (8004aa8 <parseStoreCommand+0x1d0>)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b2e      	cmp	r3, #46	; 0x2e
 8004930:	d105      	bne.n	800493e <parseStoreCommand+0x66>
			filename[i] = '\0';
 8004932:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <parseStoreCommand+0x1d0>)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
			break;
 800493c:	e017      	b.n	800496e <parseStoreCommand+0x96>
		}
		if (i >= NAME_LIM) {
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b3e      	cmp	r3, #62	; 0x3e
 8004942:	dd0e      	ble.n	8004962 <parseStoreCommand+0x8a>
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Unable to parse file name\n", 26, 100);
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <parseStoreCommand+0x1d4>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <parseStoreCommand+0x78>
 800494c:	4858      	ldr	r0, [pc, #352]	; (8004ab0 <parseStoreCommand+0x1d8>)
 800494e:	e000      	b.n	8004952 <parseStoreCommand+0x7a>
 8004950:	4858      	ldr	r0, [pc, #352]	; (8004ab4 <parseStoreCommand+0x1dc>)
 8004952:	2364      	movs	r3, #100	; 0x64
 8004954:	221a      	movs	r2, #26
 8004956:	4958      	ldr	r1, [pc, #352]	; (8004ab8 <parseStoreCommand+0x1e0>)
 8004958:	f00a ff36 	bl	800f7c8 <HAL_UART_Transmit>
			flag = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
			break;
 8004960:	e005      	b.n	800496e <parseStoreCommand+0x96>
		}
		i++;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3301      	adds	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
	while (waitCount < 250) {
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2bf9      	cmp	r3, #249	; 0xf9
 800496c:	ddc5      	ble.n	80048fa <parseStoreCommand+0x22>
	}

	if (waitCount == 250) {
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2bfa      	cmp	r3, #250	; 0xfa
 8004972:	d10d      	bne.n	8004990 <parseStoreCommand+0xb8>
		flag = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Unable to parse file name\n", 26, 100);
 8004978:	4b4c      	ldr	r3, [pc, #304]	; (8004aac <parseStoreCommand+0x1d4>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <parseStoreCommand+0xac>
 8004980:	484b      	ldr	r0, [pc, #300]	; (8004ab0 <parseStoreCommand+0x1d8>)
 8004982:	e000      	b.n	8004986 <parseStoreCommand+0xae>
 8004984:	484b      	ldr	r0, [pc, #300]	; (8004ab4 <parseStoreCommand+0x1dc>)
 8004986:	2364      	movs	r3, #100	; 0x64
 8004988:	221a      	movs	r2, #26
 800498a:	494b      	ldr	r1, [pc, #300]	; (8004ab8 <parseStoreCommand+0x1e0>)
 800498c:	f00a ff1c 	bl	800f7c8 <HAL_UART_Transmit>
	}

	/* Check file type */
	waitCount = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
	for (i = 0; i < 3; i++) {
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e01d      	b.n	80049d6 <parseStoreCommand+0xfe>
		type[i] = pop();
 800499a:	f7ff f93f 	bl	8003c1c <pop>
 800499e:	4603      	mov	r3, r0
 80049a0:	4619      	mov	r1, r3
 80049a2:	1d3a      	adds	r2, r7, #4
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	460a      	mov	r2, r1
 80049aa:	701a      	strb	r2, [r3, #0]

		if (type[i] == '\0') {
 80049ac:	1d3a      	adds	r2, r7, #4
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <parseStoreCommand+0xf8>
			waitCount++;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3301      	adds	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
			HAL_Delay(1);
 80049be:	2001      	movs	r0, #1
 80049c0:	f003 fdac 	bl	800851c <HAL_Delay>
			if (waitCount > 100) {
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	dc09      	bgt.n	80049de <parseStoreCommand+0x106>
				break;
			}
			i--;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 3; i++) {
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	3301      	adds	r3, #1
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	ddde      	ble.n	800499a <parseStoreCommand+0xc2>
 80049dc:	e000      	b.n	80049e0 <parseStoreCommand+0x108>
				break;
 80049de:	bf00      	nop
		}


	}

	if (strcmp(type, "txt") != 0 && flag == 0) {
 80049e0:	1d3b      	adds	r3, r7, #4
 80049e2:	4936      	ldr	r1, [pc, #216]	; (8004abc <parseStoreCommand+0x1e4>)
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fb fbf3 	bl	80001d0 <strcmp>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d010      	beq.n	8004a12 <parseStoreCommand+0x13a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <parseStoreCommand+0x13a>
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Unable to parse file type\n", 26, 100);
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <parseStoreCommand+0x1d4>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <parseStoreCommand+0x12a>
 80049fe:	482c      	ldr	r0, [pc, #176]	; (8004ab0 <parseStoreCommand+0x1d8>)
 8004a00:	e000      	b.n	8004a04 <parseStoreCommand+0x12c>
 8004a02:	482c      	ldr	r0, [pc, #176]	; (8004ab4 <parseStoreCommand+0x1dc>)
 8004a04:	2364      	movs	r3, #100	; 0x64
 8004a06:	221a      	movs	r2, #26
 8004a08:	492d      	ldr	r1, [pc, #180]	; (8004ac0 <parseStoreCommand+0x1e8>)
 8004a0a:	f00a fedd 	bl	800f7c8 <HAL_UART_Transmit>
		flag = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
	}

	// If parsing the filename or file type failed
	if (flag) {
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <parseStoreCommand+0x156>
		HAL_Delay(250);
 8004a18:	20fa      	movs	r0, #250	; 0xfa
 8004a1a:	f003 fd7f 	bl	800851c <HAL_Delay>
		buffTail = buffHead;
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <parseStoreCommand+0x1ec>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <parseStoreCommand+0x1f0>)
 8004a24:	6013      	str	r3, [r2, #0]
		fileType = 0xFF;
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <parseStoreCommand+0x1f4>)
 8004a28:	22ff      	movs	r2, #255	; 0xff
 8004a2a:	701a      	strb	r2, [r3, #0]
		return;
 8004a2c:	e039      	b.n	8004aa2 <parseStoreCommand+0x1ca>
	}


	fileType = 1;
 8004a2e:	4b27      	ldr	r3, [pc, #156]	; (8004acc <parseStoreCommand+0x1f4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
	memset(fileIn, '\0', 1024*4);
 8004a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4825      	ldr	r0, [pc, #148]	; (8004ad0 <parseStoreCommand+0x1f8>)
 8004a3c:	f00d f899 	bl	8011b72 <memset>

	/* Read file contents */
	i = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
	char temp;
	waitCount = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]

	while (i < 1024*4) {
 8004a48:	e027      	b.n	8004a9a <parseStoreCommand+0x1c2>
		temp = pop();
 8004a4a:	f7ff f8e7 	bl	8003c1c <pop>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	72fb      	strb	r3, [r7, #11]
		if (temp == '\0') {
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10e      	bne.n	8004a76 <parseStoreCommand+0x19e>
			HAL_Delay(1);
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f003 fd5f 	bl	800851c <HAL_Delay>
			waitCount++;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
			if (waitCount > 2500) {
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	dd15      	ble.n	8004a9a <parseStoreCommand+0x1c2>
				fileType = 0xFF;
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <parseStoreCommand+0x1f4>)
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	701a      	strb	r2, [r3, #0]
				return;
 8004a74:	e015      	b.n	8004aa2 <parseStoreCommand+0x1ca>
			}
			continue;
		}

		if (temp == 0x04) {
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d106      	bne.n	8004a8a <parseStoreCommand+0x1b2>
			fileLen = i;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <parseStoreCommand+0x1fc>)
 8004a80:	6013      	str	r3, [r2, #0]
			endOfFile = 1;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <parseStoreCommand+0x200>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
			break;
 8004a88:	e00b      	b.n	8004aa2 <parseStoreCommand+0x1ca>
		}

		fileIn[i] = temp;
 8004a8a:	4a11      	ldr	r2, [pc, #68]	; (8004ad0 <parseStoreCommand+0x1f8>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	7afa      	ldrb	r2, [r7, #11]
 8004a92:	701a      	strb	r2, [r3, #0]
		i++;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3301      	adds	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
	while (i < 1024*4) {
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	dbd3      	blt.n	8004a4a <parseStoreCommand+0x172>
	}
}
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000e74 	.word	0x20000e74
 8004aac:	20000009 	.word	0x20000009
 8004ab0:	2000050c 	.word	0x2000050c
 8004ab4:	2000061c 	.word	0x2000061c
 8004ab8:	080150d4 	.word	0x080150d4
 8004abc:	080150f0 	.word	0x080150f0
 8004ac0:	080150f4 	.word	0x080150f4
 8004ac4:	2000073c 	.word	0x2000073c
 8004ac8:	20000740 	.word	0x20000740
 8004acc:	20000008 	.word	0x20000008
 8004ad0:	20000eb8 	.word	0x20000eb8
 8004ad4:	20000eb4 	.word	0x20000eb4
 8004ad8:	20000eb3 	.word	0x20000eb3

08004adc <parseINodeNumber>:

void parseINodeNumber() {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	pop(); // get rid of space
 8004ae2:	f7ff f89b 	bl	8003c1c <pop>
	char num[4] = {'\0'};
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
	num[0] = pop();
 8004aea:	f7ff f897 	bl	8003c1c <pop>
 8004aee:	4603      	mov	r3, r0
 8004af0:	713b      	strb	r3, [r7, #4]
	num[1] = pop();
 8004af2:	f7ff f893 	bl	8003c1c <pop>
 8004af6:	4603      	mov	r3, r0
 8004af8:	717b      	strb	r3, [r7, #5]
	num[2] = pop();
 8004afa:	f7ff f88f 	bl	8003c1c <pop>
 8004afe:	4603      	mov	r3, r0
 8004b00:	71bb      	strb	r3, [r7, #6]

	/* Read in the file number to read from mem */
	if (atoi(num) > 0 && atoi(num) < MAX_INODES) {
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f00c f921 	bl	8010d4c <atoi>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd0f      	ble.n	8004b30 <parseINodeNumber+0x54>
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	4618      	mov	r0, r3
 8004b14:	f00c f91a 	bl	8010d4c <atoi>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2bfe      	cmp	r3, #254	; 0xfe
 8004b1c:	dc08      	bgt.n	8004b30 <parseINodeNumber+0x54>
		INodeNumber = atoi(num);
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f00c f913 	bl	8010d4c <atoi>
 8004b26:	4603      	mov	r3, r0
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <parseINodeNumber+0x9c>)
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e01e      	b.n	8004b6e <parseINodeNumber+0x92>
	}
	else {
		state = idle;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <parseINodeNumber+0xa0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
		INodeNumber = 0;
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <parseINodeNumber+0x9c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Unable to parse file number\n", 28, 100);
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <parseINodeNumber+0xa4>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <parseINodeNumber+0x6c>
 8004b44:	480f      	ldr	r0, [pc, #60]	; (8004b84 <parseINodeNumber+0xa8>)
 8004b46:	e000      	b.n	8004b4a <parseINodeNumber+0x6e>
 8004b48:	480f      	ldr	r0, [pc, #60]	; (8004b88 <parseINodeNumber+0xac>)
 8004b4a:	2364      	movs	r3, #100	; 0x64
 8004b4c:	221c      	movs	r2, #28
 8004b4e:	490f      	ldr	r1, [pc, #60]	; (8004b8c <parseINodeNumber+0xb0>)
 8004b50:	f00a fe3a 	bl	800f7c8 <HAL_UART_Transmit>
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n>", 2, 1);
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <parseINodeNumber+0xa4>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <parseINodeNumber+0x84>
 8004b5c:	4809      	ldr	r0, [pc, #36]	; (8004b84 <parseINodeNumber+0xa8>)
 8004b5e:	e000      	b.n	8004b62 <parseINodeNumber+0x86>
 8004b60:	4809      	ldr	r0, [pc, #36]	; (8004b88 <parseINodeNumber+0xac>)
 8004b62:	2301      	movs	r3, #1
 8004b64:	2202      	movs	r2, #2
 8004b66:	490a      	ldr	r1, [pc, #40]	; (8004b90 <parseINodeNumber+0xb4>)
 8004b68:	f00a fe2e 	bl	800f7c8 <HAL_UART_Transmit>
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000e72 	.word	0x20000e72
 8004b7c:	20000e71 	.word	0x20000e71
 8004b80:	20000009 	.word	0x20000009
 8004b84:	2000050c 	.word	0x2000050c
 8004b88:	2000061c 	.word	0x2000061c
 8004b8c:	08015110 	.word	0x08015110
 8004b90:	08014fd0 	.word	0x08014fd0

08004b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b98:	b672      	cpsid	i
}
 8004b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b9c:	e7fe      	b.n	8004b9c <Error_Handler+0x8>
	...

08004ba0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_MspInit+0x44>)
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_MspInit+0x44>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_MspInit+0x44>)
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_MspInit+0x44>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_MspInit+0x44>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_MspInit+0x44>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000

08004be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	f107 031c 	add.w	r3, r7, #28
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a66      	ldr	r2, [pc, #408]	; (8004da0 <HAL_ADC_MspInit+0x1b8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d160      	bne.n	8004ccc <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004c0a:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	4a64      	ldr	r2, [pc, #400]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004c12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004c14:	4b63      	ldr	r3, [pc, #396]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d10b      	bne.n	8004c34 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004c1c:	4b62      	ldr	r3, [pc, #392]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	4a61      	ldr	r2, [pc, #388]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c28:	4b5f      	ldr	r3, [pc, #380]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c34:	4b5c      	ldr	r3, [pc, #368]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c38:	4a5b      	ldr	r2, [pc, #364]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c40:	4b59      	ldr	r3, [pc, #356]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004c50:	230b      	movs	r3, #11
 8004c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c58:	f107 031c 	add.w	r3, r7, #28
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4853      	ldr	r0, [pc, #332]	; (8004dac <HAL_ADC_MspInit+0x1c4>)
 8004c60:	f005 fd80 	bl	800a764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004c64:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c66:	4a53      	ldr	r2, [pc, #332]	; (8004db4 <HAL_ADC_MspInit+0x1cc>)
 8004c68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c70:	4b4f      	ldr	r3, [pc, #316]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c76:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c7e:	2280      	movs	r2, #128	; 0x80
 8004c80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c82:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c94:	2220      	movs	r2, #32
 8004c96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c98:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c9e:	4844      	ldr	r0, [pc, #272]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004ca0:	f005 fadc 	bl	800a25c <HAL_DMA_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004caa:	f7ff ff73 	bl	8004b94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a3f      	ldr	r2, [pc, #252]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004cb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004cb4:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <HAL_ADC_MspInit+0x1c8>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	2012      	movs	r0, #18
 8004cc0:	f005 fa95 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004cc4:	2012      	movs	r0, #18
 8004cc6:	f005 faae 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004cca:	e064      	b.n	8004d96 <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a39      	ldr	r2, [pc, #228]	; (8004db8 <HAL_ADC_MspInit+0x1d0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d15f      	bne.n	8004d96 <HAL_ADC_MspInit+0x1ae>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004cd6:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004cde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004ce0:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_ADC_MspInit+0x1bc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10b      	bne.n	8004d00 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004ce8:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	4a2e      	ldr	r2, [pc, #184]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf4:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d00:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d04:	4a28      	ldr	r2, [pc, #160]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d0c:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <HAL_ADC_MspInit+0x1c0>)
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004d1c:	230b      	movs	r3, #11
 8004d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d24:	f107 031c 	add.w	r3, r7, #28
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4820      	ldr	r0, [pc, #128]	; (8004dac <HAL_ADC_MspInit+0x1c4>)
 8004d2c:	f005 fd1a 	bl	800a764 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d32:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <HAL_ADC_MspInit+0x1d8>)
 8004d34:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d4a:	2280      	movs	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d54:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d5c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004d5e:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d60:	2220      	movs	r2, #32
 8004d62:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004d6a:	4814      	ldr	r0, [pc, #80]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d6c:	f005 fa76 	bl	800a25c <HAL_DMA_Init>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_ADC_MspInit+0x192>
      Error_Handler();
 8004d76:	f7ff ff0d 	bl	8004b94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_ADC_MspInit+0x1d4>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2012      	movs	r0, #18
 8004d8c:	f005 fa2f 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d90:	2012      	movs	r0, #18
 8004d92:	f005 fa48 	bl	800a226 <HAL_NVIC_EnableIRQ>
}
 8004d96:	bf00      	nop
 8004d98:	3730      	adds	r7, #48	; 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	50040000 	.word	0x50040000
 8004da4:	20001ef4 	.word	0x20001ef4
 8004da8:	40021000 	.word	0x40021000
 8004dac:	48000800 	.word	0x48000800
 8004db0:	2000032c 	.word	0x2000032c
 8004db4:	40020008 	.word	0x40020008
 8004db8:	50040100 	.word	0x50040100
 8004dbc:	20000374 	.word	0x20000374
 8004dc0:	4002001c 	.word	0x4002001c

08004dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b0ac      	sub	sp, #176	; 0xb0
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	2288      	movs	r2, #136	; 0x88
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f00c fec4 	bl	8011b72 <memset>
  if(hi2c->Instance==I2C1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <HAL_I2C_MspInit+0xd0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d14a      	bne.n	8004e8a <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4618      	mov	r0, r3
 8004e02:	f008 f82f 	bl	800ce64 <HAL_RCCEx_PeriphCLKConfig>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e0c:	f7ff fec2 	bl	8004b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e1c:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e28:	23c0      	movs	r3, #192	; 0xc0
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e2e:	2312      	movs	r3, #18
 8004e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e40:	2304      	movs	r3, #4
 8004e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4813      	ldr	r0, [pc, #76]	; (8004e9c <HAL_I2C_MspInit+0xd8>)
 8004e4e:	f005 fc89 	bl	800a764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_I2C_MspInit+0xd4>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	201f      	movs	r0, #31
 8004e70:	f005 f9bd 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004e74:	201f      	movs	r0, #31
 8004e76:	f005 f9d6 	bl	800a226 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	2020      	movs	r0, #32
 8004e80:	f005 f9b5 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004e84:	2020      	movs	r0, #32
 8004e86:	f005 f9ce 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e8a:	bf00      	nop
 8004e8c:	37b0      	adds	r7, #176	; 0xb0
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40005400 	.word	0x40005400
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	48000400 	.word	0x48000400

08004ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <HAL_SPI_MspInit+0x8c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d130      	bne.n	8004f24 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_SPI_MspInit+0x90>)
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ef2:	23e0      	movs	r3, #224	; 0xe0
 8004ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f02:	2305      	movs	r3, #5
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f06:	f107 0314 	add.w	r3, r7, #20
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f10:	f005 fc28 	bl	800a764 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	2023      	movs	r0, #35	; 0x23
 8004f1a:	f005 f968 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004f1e:	2023      	movs	r0, #35	; 0x23
 8004f20:	f005 f981 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f24:	bf00      	nop
 8004f26:	3728      	adds	r7, #40	; 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40013000 	.word	0x40013000
 8004f30:	40021000 	.word	0x40021000

08004f34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <HAL_TIM_PWM_MspInit+0x78>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d11c      	bne.n	8004f80 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f50:	6613      	str	r3, [r2, #96]	; 0x60
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2100      	movs	r1, #0
 8004f62:	2018      	movs	r0, #24
 8004f64:	f005 f943 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004f68:	2018      	movs	r0, #24
 8004f6a:	f005 f95c 	bl	800a226 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	2019      	movs	r0, #25
 8004f74:	f005 f93b 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f78:	2019      	movs	r0, #25
 8004f7a:	f005 f954 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004f7e:	e010      	b.n	8004fa2 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d10b      	bne.n	8004fa2 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6593      	str	r3, [r2, #88]	; 0x58
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_TIM_PWM_MspInit+0x7c>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a32      	ldr	r2, [pc, #200]	; (800509c <HAL_TIM_MspPostInit+0xe8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d11e      	bne.n	8005014 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005000:	2301      	movs	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4619      	mov	r1, r3
 800500a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500e:	f005 fba9 	bl	800a764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005012:	e03f      	b.n	8005094 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d13a      	bne.n	8005094 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_TIM_MspPostInit+0xec>)
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800504e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005054:	2302      	movs	r3, #2
 8005056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505c:	2300      	movs	r3, #0
 800505e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005060:	2301      	movs	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4619      	mov	r1, r3
 800506a:	480e      	ldr	r0, [pc, #56]	; (80050a4 <HAL_TIM_MspPostInit+0xf0>)
 800506c:	f005 fb7a 	bl	800a764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507e:	2300      	movs	r3, #0
 8005080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005082:	2301      	movs	r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	4619      	mov	r1, r3
 800508c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005090:	f005 fb68 	bl	800a764 <HAL_GPIO_Init>
}
 8005094:	bf00      	nop
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	48000400 	.word	0x48000400

080050a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b0b0      	sub	sp, #192	; 0xc0
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c4:	2288      	movs	r2, #136	; 0x88
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f00c fd52 	bl	8011b72 <memset>
  if(huart->Instance==USART1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a94      	ldr	r2, [pc, #592]	; (8005324 <HAL_UART_MspInit+0x27c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d16e      	bne.n	80051b6 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80050d8:	2301      	movs	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050dc:	2300      	movs	r3, #0
 80050de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 febd 	bl	800ce64 <HAL_RCCEx_PeriphCLKConfig>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80050f0:	f7ff fd50 	bl	8004b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050f4:	4b8c      	ldr	r3, [pc, #560]	; (8005328 <HAL_UART_MspInit+0x280>)
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	4a8b      	ldr	r2, [pc, #556]	; (8005328 <HAL_UART_MspInit+0x280>)
 80050fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fe:	6613      	str	r3, [r2, #96]	; 0x60
 8005100:	4b89      	ldr	r3, [pc, #548]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510c:	4b86      	ldr	r3, [pc, #536]	; (8005328 <HAL_UART_MspInit+0x280>)
 800510e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005110:	4a85      	ldr	r2, [pc, #532]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005118:	4b83      	ldr	r3, [pc, #524]	; (8005328 <HAL_UART_MspInit+0x280>)
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005124:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512c:	2302      	movs	r3, #2
 800512e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	2300      	movs	r3, #0
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005138:	2303      	movs	r3, #3
 800513a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800513e:	2307      	movs	r3, #7
 8005140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005148:	4619      	mov	r1, r3
 800514a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800514e:	f005 fb09 	bl	800a764 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005152:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_UART_MspInit+0x284>)
 8005154:	4a76      	ldr	r2, [pc, #472]	; (8005330 <HAL_UART_MspInit+0x288>)
 8005156:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8005158:	4b74      	ldr	r3, [pc, #464]	; (800532c <HAL_UART_MspInit+0x284>)
 800515a:	2202      	movs	r2, #2
 800515c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800515e:	4b73      	ldr	r3, [pc, #460]	; (800532c <HAL_UART_MspInit+0x284>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005164:	4b71      	ldr	r3, [pc, #452]	; (800532c <HAL_UART_MspInit+0x284>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800516a:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_UART_MspInit+0x284>)
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005170:	4b6e      	ldr	r3, [pc, #440]	; (800532c <HAL_UART_MspInit+0x284>)
 8005172:	2200      	movs	r2, #0
 8005174:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005176:	4b6d      	ldr	r3, [pc, #436]	; (800532c <HAL_UART_MspInit+0x284>)
 8005178:	2200      	movs	r2, #0
 800517a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800517c:	4b6b      	ldr	r3, [pc, #428]	; (800532c <HAL_UART_MspInit+0x284>)
 800517e:	2200      	movs	r2, #0
 8005180:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005182:	4b6a      	ldr	r3, [pc, #424]	; (800532c <HAL_UART_MspInit+0x284>)
 8005184:	2200      	movs	r2, #0
 8005186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005188:	4868      	ldr	r0, [pc, #416]	; (800532c <HAL_UART_MspInit+0x284>)
 800518a:	f005 f867 	bl	800a25c <HAL_DMA_Init>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005194:	f7ff fcfe 	bl	8004b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a64      	ldr	r2, [pc, #400]	; (800532c <HAL_UART_MspInit+0x284>)
 800519c:	675a      	str	r2, [r3, #116]	; 0x74
 800519e:	4a63      	ldr	r2, [pc, #396]	; (800532c <HAL_UART_MspInit+0x284>)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80051a4:	2200      	movs	r2, #0
 80051a6:	2100      	movs	r1, #0
 80051a8:	2025      	movs	r0, #37	; 0x25
 80051aa:	f005 f820 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051ae:	2025      	movs	r0, #37	; 0x25
 80051b0:	f005 f839 	bl	800a226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051b4:	e0b2      	b.n	800531c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a5e      	ldr	r2, [pc, #376]	; (8005334 <HAL_UART_MspInit+0x28c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d13c      	bne.n	800523a <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051c0:	2302      	movs	r3, #2
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80051c4:	2300      	movs	r3, #0
 80051c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f007 fe49 	bl	800ce64 <HAL_RCCEx_PeriphCLKConfig>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_UART_MspInit+0x134>
      Error_Handler();
 80051d8:	f7ff fcdc 	bl	8004b94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051dc:	4b52      	ldr	r3, [pc, #328]	; (8005328 <HAL_UART_MspInit+0x280>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	4a51      	ldr	r2, [pc, #324]	; (8005328 <HAL_UART_MspInit+0x280>)
 80051e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e6:	6593      	str	r3, [r2, #88]	; 0x58
 80051e8:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <HAL_UART_MspInit+0x280>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <HAL_UART_MspInit+0x280>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	4a4b      	ldr	r2, [pc, #300]	; (8005328 <HAL_UART_MspInit+0x280>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005200:	4b49      	ldr	r3, [pc, #292]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800520c:	230c      	movs	r3, #12
 800520e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	2302      	movs	r3, #2
 8005214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521e:	2303      	movs	r3, #3
 8005220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005224:	2307      	movs	r3, #7
 8005226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800522e:	4619      	mov	r1, r3
 8005230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005234:	f005 fa96 	bl	800a764 <HAL_GPIO_Init>
}
 8005238:	e070      	b.n	800531c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3e      	ldr	r2, [pc, #248]	; (8005338 <HAL_UART_MspInit+0x290>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d16b      	bne.n	800531c <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005244:	2304      	movs	r3, #4
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005248:	2300      	movs	r3, #0
 800524a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800524c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005250:	4618      	mov	r0, r3
 8005252:	f007 fe07 	bl	800ce64 <HAL_RCCEx_PeriphCLKConfig>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 800525c:	f7ff fc9a 	bl	8004b94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	4a30      	ldr	r2, [pc, #192]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <HAL_UART_MspInit+0x280>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005278:	4b2b      	ldr	r3, [pc, #172]	; (8005328 <HAL_UART_MspInit+0x280>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527c:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <HAL_UART_MspInit+0x280>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005284:	4b28      	ldr	r3, [pc, #160]	; (8005328 <HAL_UART_MspInit+0x280>)
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005290:	2330      	movs	r3, #48	; 0x30
 8005292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005296:	2302      	movs	r3, #2
 8005298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a2:	2303      	movs	r3, #3
 80052a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052a8:	2307      	movs	r3, #7
 80052aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052b2:	4619      	mov	r1, r3
 80052b4:	4821      	ldr	r0, [pc, #132]	; (800533c <HAL_UART_MspInit+0x294>)
 80052b6:	f005 fa55 	bl	800a764 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_UART_MspInit+0x29c>)
 80052be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052c2:	2202      	movs	r2, #2
 80052c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052cc:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052d2:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052da:	2200      	movs	r2, #0
 80052dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80052f0:	4813      	ldr	r0, [pc, #76]	; (8005340 <HAL_UART_MspInit+0x298>)
 80052f2:	f004 ffb3 	bl	800a25c <HAL_DMA_Init>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80052fc:	f7ff fc4a 	bl	8004b94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <HAL_UART_MspInit+0x298>)
 8005304:	675a      	str	r2, [r3, #116]	; 0x74
 8005306:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_UART_MspInit+0x298>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800530c:	2200      	movs	r2, #0
 800530e:	2100      	movs	r1, #0
 8005310:	2027      	movs	r0, #39	; 0x27
 8005312:	f004 ff6c 	bl	800a1ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005316:	2027      	movs	r0, #39	; 0x27
 8005318:	f004 ff85 	bl	800a226 <HAL_NVIC_EnableIRQ>
}
 800531c:	bf00      	nop
 800531e:	37c0      	adds	r7, #192	; 0xc0
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40013800 	.word	0x40013800
 8005328:	40021000 	.word	0x40021000
 800532c:	200006a4 	.word	0x200006a4
 8005330:	40020058 	.word	0x40020058
 8005334:	40004400 	.word	0x40004400
 8005338:	40004800 	.word	0x40004800
 800533c:	48000800 	.word	0x48000800
 8005340:	200006ec 	.word	0x200006ec
 8005344:	40020030 	.word	0x40020030

08005348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800534c:	e7fe      	b.n	800534c <NMI_Handler+0x4>

0800534e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005352:	e7fe      	b.n	8005352 <HardFault_Handler+0x4>

08005354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005358:	e7fe      	b.n	8005358 <MemManage_Handler+0x4>

0800535a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800535e:	e7fe      	b.n	800535e <BusFault_Handler+0x4>

08005360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005364:	e7fe      	b.n	8005364 <UsageFault_Handler+0x4>

08005366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005394:	f003 f8a2 	bl	80084dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}

0800539c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80053a0:	4802      	ldr	r0, [pc, #8]	; (80053ac <DMA1_Channel1_IRQHandler+0x10>)
 80053a2:	f005 f8f2 	bl	800a58a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2000032c 	.word	0x2000032c

080053b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80053b4:	4802      	ldr	r0, [pc, #8]	; (80053c0 <DMA1_Channel2_IRQHandler+0x10>)
 80053b6:	f005 f8e8 	bl	800a58a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000374 	.word	0x20000374

080053c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80053c8:	4802      	ldr	r0, [pc, #8]	; (80053d4 <DMA1_Channel3_IRQHandler+0x10>)
 80053ca:	f005 f8de 	bl	800a58a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200006ec 	.word	0x200006ec

080053d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <DMA1_Channel5_IRQHandler+0x10>)
 80053de:	f005 f8d4 	bl	800a58a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200006a4 	.word	0x200006a4

080053ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80053f0:	4803      	ldr	r0, [pc, #12]	; (8005400 <ADC1_2_IRQHandler+0x14>)
 80053f2:	f003 fcdf 	bl	8008db4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80053f6:	4803      	ldr	r0, [pc, #12]	; (8005404 <ADC1_2_IRQHandler+0x18>)
 80053f8:	f003 fcdc 	bl	8008db4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80053fc:	bf00      	nop
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000264 	.word	0x20000264
 8005404:	200002c8 	.word	0x200002c8

08005408 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800540c:	4802      	ldr	r0, [pc, #8]	; (8005418 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800540e:	f009 fa8b 	bl	800e928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000474 	.word	0x20000474

0800541c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005420:	4802      	ldr	r0, [pc, #8]	; (800542c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005422:	f009 fa81 	bl	800e928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000474 	.word	0x20000474

08005430 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005434:	4802      	ldr	r0, [pc, #8]	; (8005440 <I2C1_EV_IRQHandler+0x10>)
 8005436:	f005 fe01 	bl	800b03c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200003bc 	.word	0x200003bc

08005444 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <I2C1_ER_IRQHandler+0x10>)
 800544a:	f005 fe11 	bl	800b070 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200003bc 	.word	0x200003bc

08005458 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <SPI1_IRQHandler+0x10>)
 800545e:	f008 fdf7 	bl	800e050 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000410 	.word	0x20000410

0800546c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <USART1_IRQHandler+0x10>)
 8005472:	f00a fa33 	bl	800f8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000050c 	.word	0x2000050c

08005480 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005484:	4802      	ldr	r0, [pc, #8]	; (8005490 <USART3_IRQHandler+0x10>)
 8005486:	f00a fa29 	bl	800f8dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	2000061c 	.word	0x2000061c

08005494 <writeEnable>:
		data[i] = data[len-1-i];
		data[len-1-i] = temp;
	}
}

uint8_t writeEnable() {
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
	uint8_t Tx[2];
	uint8_t Rx[2];


	HAL_Delay(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f003 f83e 	bl	800851c <HAL_Delay>

	// Send Write enable instruction
	Tx[0] = WRITE_ENABLE;
 80054a0:	2306      	movs	r3, #6
 80054a2:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80054a4:	2200      	movs	r2, #0
 80054a6:	2110      	movs	r1, #16
 80054a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ac:	f005 fb04 	bl	800aab8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 25; i++) asm("nop");
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e003      	b.n	80054be <writeEnable+0x2a>
 80054b6:	bf00      	nop
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3301      	adds	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b18      	cmp	r3, #24
 80054c2:	ddf8      	ble.n	80054b6 <writeEnable+0x22>

	HAL_SPI_Transmit(&hspi1, Tx, 1, SPI_TIMEOUT);
 80054c4:	1d39      	adds	r1, r7, #4
 80054c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ca:	2201      	movs	r2, #1
 80054cc:	4828      	ldr	r0, [pc, #160]	; (8005570 <writeEnable+0xdc>)
 80054ce:	f008 fa28 	bl	800d922 <HAL_SPI_Transmit>

	for (int i = 0; i < 25; i++) asm("nop");
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e003      	b.n	80054e0 <writeEnable+0x4c>
 80054d8:	bf00      	nop
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3301      	adds	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b18      	cmp	r3, #24
 80054e4:	ddf8      	ble.n	80054d8 <writeEnable+0x44>
	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 80054e6:	2201      	movs	r2, #1
 80054e8:	2110      	movs	r1, #16
 80054ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ee:	f005 fae3 	bl	800aab8 <HAL_GPIO_WritePin>


	HAL_Delay(1);
 80054f2:	2001      	movs	r0, #1
 80054f4:	f003 f812 	bl	800851c <HAL_Delay>

	// Check status register if WEL is high
	Tx[0] = READ_STATUS_REG;
 80054f8:	2305      	movs	r3, #5
 80054fa:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2110      	movs	r1, #16
 8005500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005504:	f005 fad8 	bl	800aab8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 25; i++) asm("nop");
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e003      	b.n	8005516 <writeEnable+0x82>
 800550e:	bf00      	nop
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b18      	cmp	r3, #24
 800551a:	ddf8      	ble.n	800550e <writeEnable+0x7a>

	HAL_SPI_TransmitReceive(&hspi1, Tx, Rx, 2, SPI_TIMEOUT);
 800551c:	463a      	mov	r2, r7
 800551e:	1d39      	adds	r1, r7, #4
 8005520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2302      	movs	r3, #2
 8005528:	4811      	ldr	r0, [pc, #68]	; (8005570 <writeEnable+0xdc>)
 800552a:	f008 fb6f 	bl	800dc0c <HAL_SPI_TransmitReceive>

	for (int i = 0; i < 25; i++) asm("nop");
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	e003      	b.n	800553c <writeEnable+0xa8>
 8005534:	bf00      	nop
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3301      	adds	r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b18      	cmp	r3, #24
 8005540:	ddf8      	ble.n	8005534 <writeEnable+0xa0>
	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005542:	2201      	movs	r2, #1
 8005544:	2110      	movs	r1, #16
 8005546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800554a:	f005 fab5 	bl	800aab8 <HAL_GPIO_WritePin>

	// If the WEL bit is low or the BUSY flag is high
	if (  ((Rx[1] & 0x02) != 0x02) || ((Rx[1] & 0x01) == 0x01)  )
 800554e:	787b      	ldrb	r3, [r7, #1]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <writeEnable+0xce>
 8005558:	787b      	ldrb	r3, [r7, #1]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <writeEnable+0xd2>
		return 0;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <writeEnable+0xd4>

	// If a page program instruction can be executed
	else
		return 1;
 8005566:	2301      	movs	r3, #1
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000410 	.word	0x20000410

08005574 <writeData>:


uint8_t writeData(uint8_t *data, uint32_t startAddr, uint32_t bytesToWrite) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b0ce      	sub	sp, #312	; 0x138
 8005578:	af00      	add	r7, sp, #0
 800557a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800557e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005582:	6018      	str	r0, [r3, #0]
 8005584:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005592:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005596:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status;
	uint16_t writeLen = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint32_t bytesWritten = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint32_t initialBytesToWrite = bytesToWrite;
 80055a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	// Write from 0x2300-0x235b




	uint16_t instructionsNeeded = bytesToWrite / 256;			// Basic Case: Works for addrs aligned at 0x00 and writing more than 256 bytes
 80055b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint8_t isBasic = ((startAddr & 0xFF) == 0) ? 1 : 0;
 80055c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf0c      	ite	eq
 80055d2:	2301      	moveq	r3, #1
 80055d4:	2300      	movne	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d

	// If there will be a roll over

	instructionsNeeded += (((startAddr & 0xFF) + bytesToWrite) > 0xFF) ? 1:0;
 80055dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4413      	add	r3, r2
 80055f4:	2bff      	cmp	r3, #255	; 0xff
 80055f6:	bf8c      	ite	hi
 80055f8:	2301      	movhi	r3, #1
 80055fa:	2300      	movls	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8005604:	4413      	add	r3, r2
 8005606:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e


	instructionsNeeded += !isBasic;								// Special Case: add 1 instruction if the alignment is off
 800560a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	b29a      	uxth	r2, r3
 800561a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800561e:	4413      	add	r3, r2
 8005620:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

	if (isBasic && (bytesToWrite < 256))						// Special Case: If the starting addr is 0 and writing less than 256 bytes
 8005624:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <writeData+0xd0>
 800562c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005630:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2bff      	cmp	r3, #255	; 0xff
 8005638:	d804      	bhi.n	8005644 <writeData+0xd0>
		instructionsNeeded += 1;
 800563a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800563e:	3301      	adds	r3, #1
 8005640:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e


	// TODO : test all cases
	for (int i = 0; i < instructionsNeeded; i++) {
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800564a:	e17d      	b.n	8005948 <writeData+0x3d4>
		// Try to write enable, check if it worked and make sure mem is not BUSY
		if (writeEnable() == 0)
 800564c:	f7ff ff22 	bl	8005494 <writeEnable>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <writeData+0xe6>
			return 0;
 8005656:	2300      	movs	r3, #0
 8005658:	e182      	b.n	8005960 <writeData+0x3ec>


		memset(Tx, 0, 260);			// Reset to 0s every time
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f00c fa84 	bl	8011b72 <memset>

		/* If the addr is not aligned at 0x00 -- can't write a full page at once */
		if (!isBasic) {
 800566a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 80bc 	bne.w	80057ec <writeData+0x278>
			// Setup Instruction and addr
			Tx[0] = PAGE_PROGRAM;
 8005674:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005678:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
			Tx[1] = (startAddr & 0x00FF0000) >> 16;
 8005680:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	b2da      	uxtb	r2, r3
 800568e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005696:	705a      	strb	r2, [r3, #1]
			Tx[2] = (startAddr & 0x0000FF00) >> 8;
 8005698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056ae:	709a      	strb	r2, [r3, #2]
			Tx[3] =  startAddr & 0x000000FF;
 80056b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056c4:	70da      	strb	r2, [r3, #3]


			writeLen = 0xFF - (startAddr & 0xFF);								// How many bytes left before rollover
 80056c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			if (bytesToWrite < writeLen)										// If the bytes left fits in bytes before roll over
 80056dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056e0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80056e4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d206      	bcs.n	80056fc <writeData+0x188>
				writeLen = bytesToWrite;
 80056ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80056f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

			// Copy data after instruction and addr
			memcpy(Tx+4, data+bytesWritten, writeLen);
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	3304      	adds	r3, #4
 8005702:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005706:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800570a:	6811      	ldr	r1, [r2, #0]
 800570c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005710:	4411      	add	r1, r2
 8005712:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8005716:	4618      	mov	r0, r3
 8005718:	f00c fec3 	bl	80124a2 <memcpy>

			bytesWritten += writeLen + 1;													// Advance the pointer to next write operation
 800571c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8005720:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005724:	4413      	add	r3, r2
 8005726:	3301      	adds	r3, #1
 8005728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

			HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 800572c:	2200      	movs	r2, #0
 800572e:	2110      	movs	r1, #16
 8005730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005734:	f005 f9c0 	bl	800aab8 <HAL_GPIO_WritePin>
			for (int i = 0; i < 25; i++) asm("nop");
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800573e:	e005      	b.n	800574c <writeData+0x1d8>
 8005740:	bf00      	nop
 8005742:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005746:	3301      	adds	r3, #1
 8005748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800574c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005750:	2b18      	cmp	r3, #24
 8005752:	ddf5      	ble.n	8005740 <writeData+0x1cc>

			status = HAL_SPI_Transmit(&hspi1, Tx, writeLen+4, SPI_TIMEOUT);
 8005754:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005758:	3304      	adds	r3, #4
 800575a:	b29a      	uxth	r2, r3
 800575c:	f107 0110 	add.w	r1, r7, #16
 8005760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005764:	4881      	ldr	r0, [pc, #516]	; (800596c <writeData+0x3f8>)
 8005766:	f008 f8dc 	bl	800d922 <HAL_SPI_Transmit>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

			for (int i = 0; i < 25; i++) asm("nop");
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005776:	e005      	b.n	8005784 <writeData+0x210>
 8005778:	bf00      	nop
 800577a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800577e:	3301      	adds	r3, #1
 8005780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005788:	2b18      	cmp	r3, #24
 800578a:	ddf5      	ble.n	8005778 <writeData+0x204>
			HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 800578c:	2201      	movs	r2, #1
 800578e:	2110      	movs	r1, #16
 8005790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005794:	f005 f990 	bl	800aab8 <HAL_GPIO_WritePin>

			if (writeLen == bytesToWrite)
 8005798:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800579c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80057a0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f000 80d6 	beq.w	8005958 <writeData+0x3e4>
				break;															// If we finished writing in 1 page exit loop

			startAddr += writeLen+1;												// If we are writing another page this should be 0x00
 80057ac:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 80057b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	441a      	add	r2, r3
 80057bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c4:	3201      	adds	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
			bytesToWrite -= writeLen+1;
 80057c8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80057cc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80057d0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80057e0:	3a01      	subs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
			isBasic = 1;														// After 1 write for alignement the rest should be the basic case
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80057ea:	e099      	b.n	8005920 <writeData+0x3ac>
		}

		/* If the addr is aligned at 0x00 -- can write a full page at once */
		else {
			Tx[0] = PAGE_PROGRAM;
 80057ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057f4:	2202      	movs	r2, #2
 80057f6:	701a      	strb	r2, [r3, #0]
			Tx[1] = (startAddr & 0x00FF0000) >> 16;
 80057f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	b2da      	uxtb	r2, r3
 8005806:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800580a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800580e:	705a      	strb	r2, [r3, #1]
			Tx[2] = (startAddr & 0x0000FF00) >> 8;
 8005810:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	b2da      	uxtb	r2, r3
 800581e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005826:	709a      	strb	r2, [r3, #2]
			Tx[3] =  startAddr & 0x000000FF;
 8005828:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005838:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800583c:	70da      	strb	r2, [r3, #3]


			writeLen = (bytesToWrite > 256) ? 256 : bytesToWrite;				// If more than 256 write 256, if less, finish writing file
 800583e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005842:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584c:	bf28      	it	cs
 800584e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005852:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134

			// Copy data after instruction and addr
			memcpy(Tx+4, data+bytesWritten, writeLen);
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	3304      	adds	r3, #4
 800585c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005860:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800586a:	4411      	add	r1, r2
 800586c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8005870:	4618      	mov	r0, r3
 8005872:	f00c fe16 	bl	80124a2 <memcpy>

			bytesWritten += writeLen;			// Advance the pointer to next write operation
 8005876:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800587a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800587e:	4413      	add	r3, r2
 8005880:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


			HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005884:	2200      	movs	r2, #0
 8005886:	2110      	movs	r1, #16
 8005888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588c:	f005 f914 	bl	800aab8 <HAL_GPIO_WritePin>
			for (int i = 0; i < 25; i++) asm("nop");
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005896:	e005      	b.n	80058a4 <writeData+0x330>
 8005898:	bf00      	nop
 800589a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800589e:	3301      	adds	r3, #1
 80058a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058a8:	2b18      	cmp	r3, #24
 80058aa:	ddf5      	ble.n	8005898 <writeData+0x324>

			status = HAL_SPI_Transmit(&hspi1, Tx, writeLen+4, SPI_TIMEOUT);
 80058ac:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80058b0:	3304      	adds	r3, #4
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f107 0110 	add.w	r1, r7, #16
 80058b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058bc:	482b      	ldr	r0, [pc, #172]	; (800596c <writeData+0x3f8>)
 80058be:	f008 f830 	bl	800d922 <HAL_SPI_Transmit>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

			for (int i = 0; i < 25; i++) asm("nop");
 80058c8:	2300      	movs	r3, #0
 80058ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058ce:	e005      	b.n	80058dc <writeData+0x368>
 80058d0:	bf00      	nop
 80058d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058d6:	3301      	adds	r3, #1
 80058d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058e0:	2b18      	cmp	r3, #24
 80058e2:	ddf5      	ble.n	80058d0 <writeData+0x35c>
			HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 80058e4:	2201      	movs	r2, #1
 80058e6:	2110      	movs	r1, #16
 80058e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058ec:	f005 f8e4 	bl	800aab8 <HAL_GPIO_WritePin>

			startAddr += 0x100;										// If we are writing more than 256 bytes need in increment pointer
 80058f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80058fc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005906:	601a      	str	r2, [r3, #0]
			bytesToWrite -= 0x100;									// Reduce bytes to write by 256
 8005908:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800590c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005910:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005914:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800591e:	601a      	str	r2, [r3, #0]
		}

		if (status != HAL_OK) {
 8005920:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <writeData+0x3b8>
			return 0;
 8005928:	2300      	movs	r3, #0
 800592a:	e019      	b.n	8005960 <writeData+0x3ec>
		}

		// Check if the len rolled over, which indicates we are done writing
		if (bytesToWrite > initialBytesToWrite) {
 800592c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005930:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593a:	429a      	cmp	r2, r3
 800593c:	d80e      	bhi.n	800595c <writeData+0x3e8>
	for (int i = 0; i < instructionsNeeded; i++) {
 800593e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005942:	3301      	adds	r3, #1
 8005944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005948:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800594c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005950:	429a      	cmp	r2, r3
 8005952:	f6ff ae7b 	blt.w	800564c <writeData+0xd8>
 8005956:	e002      	b.n	800595e <writeData+0x3ea>
				break;															// If we finished writing in 1 page exit loop
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <writeData+0x3ea>
			break;
 800595c:	bf00      	nop
		}
	}

	return 1;
 800595e:	2301      	movs	r3, #1
}
 8005960:	4618      	mov	r0, r3
 8005962:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000410 	.word	0x20000410

08005970 <readData>:


uint8_t* readData(uint32_t startAddr, uint32_t bytesToRead) {
 8005970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005974:	b08d      	sub	sp, #52	; 0x34
 8005976:	af02      	add	r7, sp, #8
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
 800597c:	466b      	mov	r3, sp
 800597e:	461e      	mov	r6, r3
	HAL_StatusTypeDef status;
	uint8_t Tx[bytesToRead+4];
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1d19      	adds	r1, r3, #4
 8005984:	460b      	mov	r3, r1
 8005986:	3b01      	subs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	2300      	movs	r3, #0
 800598c:	4688      	mov	r8, r1
 800598e:	4699      	mov	r9, r3
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a4:	2300      	movs	r3, #0
 80059a6:	460c      	mov	r4, r1
 80059a8:	461d      	mov	r5, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	00eb      	lsls	r3, r5, #3
 80059b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b8:	00e2      	lsls	r2, r4, #3
 80059ba:	1dcb      	adds	r3, r1, #7
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	ebad 0d03 	sub.w	sp, sp, r3
 80059c4:	ab02      	add	r3, sp, #8
 80059c6:	3300      	adds	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]


	// Check status register if BUSY
	Tx[0] = READ_STATUS_REG;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2205      	movs	r2, #5
 80059ce:	701a      	strb	r2, [r3, #0]
	uint8_t reg[2] = {0, 0x01};	// Start with 0x03 so that loop will run at least once
 80059d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d4:	813b      	strh	r3, [r7, #8]

	while ((reg[1] & 0x01) == 0x01) { 		// Continue to read status register if BUSY is HIGH
 80059d6:	e029      	b.n	8005a2c <readData+0xbc>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 80059d8:	2200      	movs	r2, #0
 80059da:	2110      	movs	r1, #16
 80059dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059e0:	f005 f86a 	bl	800aab8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 25; i++) asm("nop");
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
 80059e8:	e003      	b.n	80059f2 <readData+0x82>
 80059ea:	bf00      	nop
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	3301      	adds	r3, #1
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b18      	cmp	r3, #24
 80059f6:	ddf8      	ble.n	80059ea <readData+0x7a>

		HAL_SPI_TransmitReceive(&hspi1, Tx, reg, 2, SPI_TIMEOUT);
 80059f8:	f107 0208 	add.w	r2, r7, #8
 80059fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	2302      	movs	r3, #2
 8005a04:	6939      	ldr	r1, [r7, #16]
 8005a06:	4838      	ldr	r0, [pc, #224]	; (8005ae8 <readData+0x178>)
 8005a08:	f008 f900 	bl	800dc0c <HAL_SPI_TransmitReceive>

		for (int i = 0; i < 25; i++) asm("nop");
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	e003      	b.n	8005a1a <readData+0xaa>
 8005a12:	bf00      	nop
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	3301      	adds	r3, #1
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	2b18      	cmp	r3, #24
 8005a1e:	ddf8      	ble.n	8005a12 <readData+0xa2>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005a20:	2201      	movs	r2, #1
 8005a22:	2110      	movs	r1, #16
 8005a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a28:	f005 f846 	bl	800aab8 <HAL_GPIO_WritePin>
	while ((reg[1] & 0x01) == 0x01) { 		// Continue to read status register if BUSY is HIGH
 8005a2c:	7a7b      	ldrb	r3, [r7, #9]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1d0      	bne.n	80059d8 <readData+0x68>
	}

	uint8_t *Rx = (uint8_t*) malloc(bytesToRead+4);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f00b f98a 	bl	8010d54 <malloc>
 8005a40:	4603      	mov	r3, r0
 8005a42:	60fb      	str	r3, [r7, #12]
	memset(Rx, 0, bytesToRead+4);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	3304      	adds	r3, #4
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f00c f890 	bl	8011b72 <memset>

	Tx[0] = READ_DATA;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2203      	movs	r2, #3
 8005a56:	701a      	strb	r2, [r3, #0]
	Tx[1] = (startAddr & 0x00FF0000) >> 16;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	705a      	strb	r2, [r3, #1]
	Tx[2] = (startAddr & 0x0000FF00) >> 8;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	709a      	strb	r2, [r3, #2]
	Tx[3] =  startAddr & 0x000000FF;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	70da      	strb	r2, [r3, #3]


	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005a74:	2200      	movs	r2, #0
 8005a76:	2110      	movs	r1, #16
 8005a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a7c:	f005 f81c 	bl	800aab8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 25; i++) asm("nop");
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	e003      	b.n	8005a8e <readData+0x11e>
 8005a86:	bf00      	nop
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b18      	cmp	r3, #24
 8005a92:	ddf8      	ble.n	8005a86 <readData+0x116>

	status = HAL_SPI_TransmitReceive(&hspi1, Tx, Rx, bytesToRead+4, SPI_TIMEOUT);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3304      	adds	r3, #4
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aa0:	9200      	str	r2, [sp, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	6939      	ldr	r1, [r7, #16]
 8005aa6:	4810      	ldr	r0, [pc, #64]	; (8005ae8 <readData+0x178>)
 8005aa8:	f008 f8b0 	bl	800dc0c <HAL_SPI_TransmitReceive>
 8005aac:	4603      	mov	r3, r0
 8005aae:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 25; i++) asm("nop");
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e003      	b.n	8005abe <readData+0x14e>
 8005ab6:	bf00      	nop
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	3301      	adds	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b18      	cmp	r3, #24
 8005ac2:	ddf8      	ble.n	8005ab6 <readData+0x146>
	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005acc:	f004 fff4 	bl	800aab8 <HAL_GPIO_WritePin>

	if (status != HAL_OK) {
 8005ad0:	7afb      	ldrb	r3, [r7, #11]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <readData+0x16a>
		return 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <readData+0x16c>
	}

	return Rx;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	46b5      	mov	sp, r6
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	372c      	adds	r7, #44	; 0x2c
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae8:	20000410 	.word	0x20000410

08005aec <chipErase>:

uint8_t chipErase(void) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
	// Try to write enable, check if it worked and make sure mem is not BUSY
	if (writeEnable() == 0)
 8005af2:	f7ff fccf 	bl	8005494 <writeEnable>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <chipErase+0x14>
		return 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e060      	b.n	8005bc2 <chipErase+0xd6>

	uint8_t Tx[4];


	// Setup Instruction and addr
	Tx[0] = CHIP_ERASE;
 8005b00:	2360      	movs	r3, #96	; 0x60
 8005b02:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2110      	movs	r1, #16
 8005b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b0c:	f004 ffd4 	bl	800aab8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 25; i++) asm("nop");
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e003      	b.n	8005b1e <chipErase+0x32>
 8005b16:	bf00      	nop
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b18      	cmp	r3, #24
 8005b22:	ddf8      	ble.n	8005b16 <chipErase+0x2a>

	HAL_SPI_Transmit(&hspi1, Tx, 1, SPI_TIMEOUT);
 8005b24:	1d39      	adds	r1, r7, #4
 8005b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4827      	ldr	r0, [pc, #156]	; (8005bcc <chipErase+0xe0>)
 8005b2e:	f007 fef8 	bl	800d922 <HAL_SPI_Transmit>

	for (int i = 0; i < 25; i++) asm("nop");
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e003      	b.n	8005b40 <chipErase+0x54>
 8005b38:	bf00      	nop
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b18      	cmp	r3, #24
 8005b44:	ddf8      	ble.n	8005b38 <chipErase+0x4c>
	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005b46:	2201      	movs	r2, #1
 8005b48:	2110      	movs	r1, #16
 8005b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b4e:	f004 ffb3 	bl	800aab8 <HAL_GPIO_WritePin>



	HAL_Delay(5);
 8005b52:	2005      	movs	r0, #5
 8005b54:	f002 fce2 	bl	800851c <HAL_Delay>

	// Check status register if WEL is high
	Tx[0] = READ_STATUS_REG;
 8005b58:	2305      	movs	r3, #5
 8005b5a:	713b      	strb	r3, [r7, #4]
	uint8_t Rx[2] = {0, 0x03};							// Start with 0x03 so that loop will run at least once
 8005b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b60:	803b      	strh	r3, [r7, #0]
	while ((Rx[1] & 0x03) != 0x00) { 					// Continue to read status register if BUSY is HIGH or WEL has not returned LOW
 8005b62:	e028      	b.n	8005bb6 <chipErase+0xca>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2110      	movs	r1, #16
 8005b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b6c:	f004 ffa4 	bl	800aab8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 25; i++) asm("nop");
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e003      	b.n	8005b7e <chipErase+0x92>
 8005b76:	bf00      	nop
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b18      	cmp	r3, #24
 8005b82:	ddf8      	ble.n	8005b76 <chipErase+0x8a>

		HAL_SPI_TransmitReceive(&hspi1, Tx, Rx, 2, SPI_TIMEOUT);
 8005b84:	463a      	mov	r2, r7
 8005b86:	1d39      	adds	r1, r7, #4
 8005b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2302      	movs	r3, #2
 8005b90:	480e      	ldr	r0, [pc, #56]	; (8005bcc <chipErase+0xe0>)
 8005b92:	f008 f83b 	bl	800dc0c <HAL_SPI_TransmitReceive>

		for (int i = 0; i < 25; i++) asm("nop");
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	e003      	b.n	8005ba4 <chipErase+0xb8>
 8005b9c:	bf00      	nop
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b18      	cmp	r3, #24
 8005ba8:	ddf8      	ble.n	8005b9c <chipErase+0xb0>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005baa:	2201      	movs	r2, #1
 8005bac:	2110      	movs	r1, #16
 8005bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb2:	f004 ff81 	bl	800aab8 <HAL_GPIO_WritePin>
	while ((Rx[1] & 0x03) != 0x00) { 					// Continue to read status register if BUSY is HIGH or WEL has not returned LOW
 8005bb6:	787b      	ldrb	r3, [r7, #1]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1d1      	bne.n	8005b64 <chipErase+0x78>

	}

	return 1;
 8005bc0:	2301      	movs	r3, #1

}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000410 	.word	0x20000410

08005bd0 <sectorErase>:



uint8_t sectorErase(uint32_t addr) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	6078      	str	r0, [r7, #4]

	// Try to write enable, check if it worked and make sure mem is not BUSY
	if (writeEnable() == 0)
 8005bd8:	f7ff fc5c 	bl	8005494 <writeEnable>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <sectorErase+0x16>
		return 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e06e      	b.n	8005cc4 <sectorErase+0xf4>

	uint8_t Tx[4];


	// Setup Instruction and addr
	Tx[0] = SECTOR_ERASE;
 8005be6:	2320      	movs	r3, #32
 8005be8:	733b      	strb	r3, [r7, #12]
	Tx[1] = (addr & 0x00FF0000) >> 16;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	737b      	strb	r3, [r7, #13]
	Tx[2] = (addr & 0x0000FF00) >> 8;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	73bb      	strb	r3, [r7, #14]
	Tx[3] =  addr & 0x000000FF;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	73fb      	strb	r3, [r7, #15]


	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005c00:	2200      	movs	r2, #0
 8005c02:	2110      	movs	r1, #16
 8005c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c08:	f004 ff56 	bl	800aab8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 25; i++) asm("nop");
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e003      	b.n	8005c1a <sectorErase+0x4a>
 8005c12:	bf00      	nop
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3301      	adds	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b18      	cmp	r3, #24
 8005c1e:	ddf8      	ble.n	8005c12 <sectorErase+0x42>

	HAL_SPI_Transmit(&hspi1, Tx, 4, SPI_TIMEOUT);
 8005c20:	f107 010c 	add.w	r1, r7, #12
 8005c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c28:	2204      	movs	r2, #4
 8005c2a:	4828      	ldr	r0, [pc, #160]	; (8005ccc <sectorErase+0xfc>)
 8005c2c:	f007 fe79 	bl	800d922 <HAL_SPI_Transmit>

	for (int i = 0; i < 25; i++) asm("nop");
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e003      	b.n	8005c3e <sectorErase+0x6e>
 8005c36:	bf00      	nop
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b18      	cmp	r3, #24
 8005c42:	ddf8      	ble.n	8005c36 <sectorErase+0x66>
	HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005c44:	2201      	movs	r2, #1
 8005c46:	2110      	movs	r1, #16
 8005c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c4c:	f004 ff34 	bl	800aab8 <HAL_GPIO_WritePin>



	HAL_Delay(1);
 8005c50:	2001      	movs	r0, #1
 8005c52:	f002 fc63 	bl	800851c <HAL_Delay>

	// Check status register if WEL is high
	Tx[0] = READ_STATUS_REG;
 8005c56:	2305      	movs	r3, #5
 8005c58:	733b      	strb	r3, [r7, #12]
	uint8_t Rx[2] = {0, 0x03};	// Start with 0x03 so that loop will run at least once
 8005c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c5e:	813b      	strh	r3, [r7, #8]

	while ((Rx[1] & 0x03) != 0x00) { 		// Continue to read status register if BUSY is HIGH or WEL has not returned LOW
 8005c60:	e02a      	b.n	8005cb8 <sectorErase+0xe8>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2110      	movs	r1, #16
 8005c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c6a:	f004 ff25 	bl	800aab8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 25; i++) asm("nop");
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e003      	b.n	8005c7c <sectorErase+0xac>
 8005c74:	bf00      	nop
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b18      	cmp	r3, #24
 8005c80:	ddf8      	ble.n	8005c74 <sectorErase+0xa4>

		HAL_SPI_TransmitReceive(&hspi1, Tx, Rx, 2, SPI_TIMEOUT);
 8005c82:	f107 0208 	add.w	r2, r7, #8
 8005c86:	f107 010c 	add.w	r1, r7, #12
 8005c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2302      	movs	r3, #2
 8005c92:	480e      	ldr	r0, [pc, #56]	; (8005ccc <sectorErase+0xfc>)
 8005c94:	f007 ffba 	bl	800dc0c <HAL_SPI_TransmitReceive>

		for (int i = 0; i < 25; i++) asm("nop");
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	e003      	b.n	8005ca6 <sectorErase+0xd6>
 8005c9e:	bf00      	nop
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b18      	cmp	r3, #24
 8005caa:	ddf8      	ble.n	8005c9e <sectorErase+0xce>
		HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2110      	movs	r1, #16
 8005cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb4:	f004 ff00 	bl	800aab8 <HAL_GPIO_WritePin>
	while ((Rx[1] & 0x03) != 0x00) { 		// Continue to read status register if BUSY is HIGH or WEL has not returned LOW
 8005cb8:	7a7b      	ldrb	r3, [r7, #9]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cf      	bne.n	8005c62 <sectorErase+0x92>

	}


	return 1;
 8005cc2:	2301      	movs	r3, #1
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000410 	.word	0x20000410

08005cd0 <profileMemory>:


void profileMemory(void) {
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b097      	sub	sp, #92	; 0x5c
 8005cd4:	af00      	add	r7, sp, #0
	struct INode *INodes = malloc(0);
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	f00b f83c 	bl	8010d54 <malloc>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t *INodeNumbers = malloc(0);
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f00b f837 	bl	8010d54 <malloc>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	643b      	str	r3, [r7, #64]	; 0x40

	uint8_t numINodes;
	uint32_t sum = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	657b      	str	r3, [r7, #84]	; 0x54
	unsigned char buff[64];
	int j;

	numINodes = readINodes(&INodes, &INodeNumbers);
 8005cee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005cf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f002 f829 	bl	8007d50 <readINodes>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	if (numINodes == 0) {
 8005d04:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <profileMemory+0x42>
		sum = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d10:	e015      	b.n	8005d3e <profileMemory+0x6e>
	}
	else {
		for (int i = 0; i < numINodes; i++) {
 8005d12:	2300      	movs	r3, #0
 8005d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d16:	e00d      	b.n	8005d34 <profileMemory+0x64>
			sum += INodes[i].fileSize;
 8005d18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	440b      	add	r3, r1
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d2a:	4413      	add	r3, r2
 8005d2c:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < numINodes; i++) {
 8005d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d30:	3301      	adds	r3, #1
 8005d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	dbec      	blt.n	8005d18 <profileMemory+0x48>
		}
	}

	/* Write free space available */
	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "Free space:\t", 12, 100);
 8005d3e:	4b67      	ldr	r3, [pc, #412]	; (8005edc <profileMemory+0x20c>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <profileMemory+0x7a>
 8005d46:	4866      	ldr	r0, [pc, #408]	; (8005ee0 <profileMemory+0x210>)
 8005d48:	e000      	b.n	8005d4c <profileMemory+0x7c>
 8005d4a:	4866      	ldr	r0, [pc, #408]	; (8005ee4 <profileMemory+0x214>)
 8005d4c:	2364      	movs	r3, #100	; 0x64
 8005d4e:	220c      	movs	r2, #12
 8005d50:	4965      	ldr	r1, [pc, #404]	; (8005ee8 <profileMemory+0x218>)
 8005d52:	f009 fd39 	bl	800f7c8 <HAL_UART_Transmit>

	sprintf(buff, "%.2lfKB", ((1024.0*504.0 - sum) / 1024.0));
 8005d56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d58:	f7fa fbe4 	bl	8000524 <__aeabi_ui2d>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	f04f 0000 	mov.w	r0, #0
 8005d64:	4961      	ldr	r1, [pc, #388]	; (8005eec <profileMemory+0x21c>)
 8005d66:	f7fa fa9f 	bl	80002a8 <__aeabi_dsub>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	4b5e      	ldr	r3, [pc, #376]	; (8005ef0 <profileMemory+0x220>)
 8005d78:	f7fa fd78 	bl	800086c <__aeabi_ddiv>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4638      	mov	r0, r7
 8005d82:	495c      	ldr	r1, [pc, #368]	; (8005ef4 <profileMemory+0x224>)
 8005d84:	f00b fe90 	bl	8011aa8 <siprintf>

	if (strlen(buff) < 8) {
 8005d88:	463b      	mov	r3, r7
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fa80 	bl	8000290 <strlen>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b07      	cmp	r3, #7
 8005d94:	d81b      	bhi.n	8005dce <profileMemory+0xfe>
		for (j = 0; j < (8 - strlen(buff)); j++) {
 8005d96:	2300      	movs	r3, #0
 8005d98:	653b      	str	r3, [r7, #80]	; 0x50
 8005d9a:	e00e      	b.n	8005dba <profileMemory+0xea>
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "0", 1, 100);			// Pad left side with spaces if necessary
 8005d9c:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <profileMemory+0x20c>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <profileMemory+0xd8>
 8005da4:	484e      	ldr	r0, [pc, #312]	; (8005ee0 <profileMemory+0x210>)
 8005da6:	e000      	b.n	8005daa <profileMemory+0xda>
 8005da8:	484e      	ldr	r0, [pc, #312]	; (8005ee4 <profileMemory+0x214>)
 8005daa:	2364      	movs	r3, #100	; 0x64
 8005dac:	2201      	movs	r2, #1
 8005dae:	4952      	ldr	r1, [pc, #328]	; (8005ef8 <profileMemory+0x228>)
 8005db0:	f009 fd0a 	bl	800f7c8 <HAL_UART_Transmit>
		for (j = 0; j < (8 - strlen(buff)); j++) {
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	3301      	adds	r3, #1
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dba:	463b      	mov	r3, r7
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fa fa67 	bl	8000290 <strlen>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f1c3 0208 	rsb	r2, r3, #8
 8005dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d8e6      	bhi.n	8005d9c <profileMemory+0xcc>
		}
	}

	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, buff, strlen(buff), 100);
 8005dce:	4b43      	ldr	r3, [pc, #268]	; (8005edc <profileMemory+0x20c>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <profileMemory+0x10a>
 8005dd6:	4c42      	ldr	r4, [pc, #264]	; (8005ee0 <profileMemory+0x210>)
 8005dd8:	e000      	b.n	8005ddc <profileMemory+0x10c>
 8005dda:	4c42      	ldr	r4, [pc, #264]	; (8005ee4 <profileMemory+0x214>)
 8005ddc:	463b      	mov	r3, r7
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa fa56 	bl	8000290 <strlen>
 8005de4:	4603      	mov	r3, r0
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	4639      	mov	r1, r7
 8005dea:	2364      	movs	r3, #100	; 0x64
 8005dec:	4620      	mov	r0, r4
 8005dee:	f009 fceb 	bl	800f7c8 <HAL_UART_Transmit>

	/* Write used space */
	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\tUsed space:\t", 13, 100);
 8005df2:	4b3a      	ldr	r3, [pc, #232]	; (8005edc <profileMemory+0x20c>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <profileMemory+0x12e>
 8005dfa:	4839      	ldr	r0, [pc, #228]	; (8005ee0 <profileMemory+0x210>)
 8005dfc:	e000      	b.n	8005e00 <profileMemory+0x130>
 8005dfe:	4839      	ldr	r0, [pc, #228]	; (8005ee4 <profileMemory+0x214>)
 8005e00:	2364      	movs	r3, #100	; 0x64
 8005e02:	220d      	movs	r2, #13
 8005e04:	493d      	ldr	r1, [pc, #244]	; (8005efc <profileMemory+0x22c>)
 8005e06:	f009 fcdf 	bl	800f7c8 <HAL_UART_Transmit>

	memset(buff, 0, 64);
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	2240      	movs	r2, #64	; 0x40
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f00b feae 	bl	8011b72 <memset>
	sprintf(buff, "%.2lfKB", (sum / 1024.0));
 8005e16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005e18:	f7fa fb84 	bl	8000524 <__aeabi_ui2d>
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <profileMemory+0x220>)
 8005e22:	f7fa fd23 	bl	800086c <__aeabi_ddiv>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	4931      	ldr	r1, [pc, #196]	; (8005ef4 <profileMemory+0x224>)
 8005e2e:	f00b fe3b 	bl	8011aa8 <siprintf>

	if (strlen(buff) < 8) {
 8005e32:	463b      	mov	r3, r7
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fa2b 	bl	8000290 <strlen>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	d81b      	bhi.n	8005e78 <profileMemory+0x1a8>
		for (j = 0; j < (8 - strlen(buff)); j++) {
 8005e40:	2300      	movs	r3, #0
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
 8005e44:	e00e      	b.n	8005e64 <profileMemory+0x194>
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "0", 1, 100);			// Pad left side with spaces if necessary
 8005e46:	4b25      	ldr	r3, [pc, #148]	; (8005edc <profileMemory+0x20c>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <profileMemory+0x182>
 8005e4e:	4824      	ldr	r0, [pc, #144]	; (8005ee0 <profileMemory+0x210>)
 8005e50:	e000      	b.n	8005e54 <profileMemory+0x184>
 8005e52:	4824      	ldr	r0, [pc, #144]	; (8005ee4 <profileMemory+0x214>)
 8005e54:	2364      	movs	r3, #100	; 0x64
 8005e56:	2201      	movs	r2, #1
 8005e58:	4927      	ldr	r1, [pc, #156]	; (8005ef8 <profileMemory+0x228>)
 8005e5a:	f009 fcb5 	bl	800f7c8 <HAL_UART_Transmit>
		for (j = 0; j < (8 - strlen(buff)); j++) {
 8005e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e60:	3301      	adds	r3, #1
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	463b      	mov	r3, r7
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fa12 	bl	8000290 <strlen>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f1c3 0208 	rsb	r2, r3, #8
 8005e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d8e6      	bhi.n	8005e46 <profileMemory+0x176>
		}
	}

	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, buff, strlen(buff), 100);
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <profileMemory+0x20c>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <profileMemory+0x1b4>
 8005e80:	4c17      	ldr	r4, [pc, #92]	; (8005ee0 <profileMemory+0x210>)
 8005e82:	e000      	b.n	8005e86 <profileMemory+0x1b6>
 8005e84:	4c17      	ldr	r4, [pc, #92]	; (8005ee4 <profileMemory+0x214>)
 8005e86:	463b      	mov	r3, r7
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fa fa01 	bl	8000290 <strlen>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	4639      	mov	r1, r7
 8005e94:	2364      	movs	r3, #100	; 0x64
 8005e96:	4620      	mov	r0, r4
 8005e98:	f009 fc96 	bl	800f7c8 <HAL_UART_Transmit>
	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n", 1, 100);
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <profileMemory+0x20c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <profileMemory+0x1d8>
 8005ea4:	480e      	ldr	r0, [pc, #56]	; (8005ee0 <profileMemory+0x210>)
 8005ea6:	e000      	b.n	8005eaa <profileMemory+0x1da>
 8005ea8:	480e      	ldr	r0, [pc, #56]	; (8005ee4 <profileMemory+0x214>)
 8005eaa:	2364      	movs	r3, #100	; 0x64
 8005eac:	2201      	movs	r2, #1
 8005eae:	4914      	ldr	r1, [pc, #80]	; (8005f00 <profileMemory+0x230>)
 8005eb0:	f009 fc8a 	bl	800f7c8 <HAL_UART_Transmit>


	if (INodeNumbers != NULL)
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <profileMemory+0x1f2>
		free(INodeNumbers);
 8005eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f00a ff51 	bl	8010d64 <free>
	if (INodes != NULL)
 8005ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <profileMemory+0x202>
		free(INodes);
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00a ff4a 	bl	8010d64 <free>

	return;
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
}
 8005ed4:	375c      	adds	r7, #92	; 0x5c
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd90      	pop	{r4, r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000009 	.word	0x20000009
 8005ee0:	2000050c 	.word	0x2000050c
 8005ee4:	2000061c 	.word	0x2000061c
 8005ee8:	08015130 	.word	0x08015130
 8005eec:	411f8000 	.word	0x411f8000
 8005ef0:	40900000 	.word	0x40900000
 8005ef4:	08015140 	.word	0x08015140
 8005ef8:	08015148 	.word	0x08015148
 8005efc:	0801514c 	.word	0x0801514c
 8005f00:	0801515c 	.word	0x0801515c

08005f04 <getDir>:



void getDir() {
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	b091      	sub	sp, #68	; 0x44
 8005f08:	af08      	add	r7, sp, #32
	struct INode *INodes = malloc(0);
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f00a ff22 	bl	8010d54 <malloc>
 8005f10:	4603      	mov	r3, r0
 8005f12:	613b      	str	r3, [r7, #16]
	uint8_t *INodeNumbers = malloc(0);
 8005f14:	2000      	movs	r0, #0
 8005f16:	f00a ff1d 	bl	8010d54 <malloc>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	60fb      	str	r3, [r7, #12]
	uint8_t numFiles;
	uint8_t temp;
	uint8_t i;
	uint8_t j;

	numINodes = readINodes(&INodes, &INodeNumbers);
 8005f1e:	f107 020c 	add.w	r2, r7, #12
 8005f22:	f107 0310 	add.w	r3, r7, #16
 8005f26:	4611      	mov	r1, r2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 ff11 	bl	8007d50 <readINodes>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	777b      	strb	r3, [r7, #29]
	if (numINodes == 0) {
 8005f32:	7f7b      	ldrb	r3, [r7, #29]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d114      	bne.n	8005f62 <getDir+0x5e>
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "No file system was found\n", 25, 100);
 8005f38:	4ba8      	ldr	r3, [pc, #672]	; (80061dc <getDir+0x2d8>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <getDir+0x40>
 8005f40:	48a7      	ldr	r0, [pc, #668]	; (80061e0 <getDir+0x2dc>)
 8005f42:	e000      	b.n	8005f46 <getDir+0x42>
 8005f44:	48a7      	ldr	r0, [pc, #668]	; (80061e4 <getDir+0x2e0>)
 8005f46:	2364      	movs	r3, #100	; 0x64
 8005f48:	2219      	movs	r2, #25
 8005f4a:	49a7      	ldr	r1, [pc, #668]	; (80061e8 <getDir+0x2e4>)
 8005f4c:	f009 fc3c 	bl	800f7c8 <HAL_UART_Transmit>
		free(INodes);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f00a ff06 	bl	8010d64 <free>
		free(INodeNumbers);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f00a ff02 	bl	8010d64 <free>
		return;
 8005f60:	e1a9      	b.n	80062b6 <getDir+0x3b2>
	}

	numFiles = INodes[0].fileSize / 64;					// Number of files in dir
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	773b      	strb	r3, [r7, #28]

	file = readFile(INodes[0]);							// Read contents of base dir
 8005f6a:	693e      	ldr	r6, [r7, #16]
 8005f6c:	466d      	mov	r5, sp
 8005f6e:	f106 0410 	add.w	r4, r6, #16
 8005f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005f7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005f82:	f000 f9a5 	bl	80062d0 <readFile>
 8005f86:	61b8      	str	r0, [r7, #24]
	char digit;
	char size[9];			// 000.00KB \0


	HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "ID    SIZE             File Name\n", 33, 100);
 8005f88:	4b94      	ldr	r3, [pc, #592]	; (80061dc <getDir+0x2d8>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <getDir+0x90>
 8005f90:	4893      	ldr	r0, [pc, #588]	; (80061e0 <getDir+0x2dc>)
 8005f92:	e000      	b.n	8005f96 <getDir+0x92>
 8005f94:	4893      	ldr	r0, [pc, #588]	; (80061e4 <getDir+0x2e0>)
 8005f96:	2364      	movs	r3, #100	; 0x64
 8005f98:	2221      	movs	r2, #33	; 0x21
 8005f9a:	4994      	ldr	r1, [pc, #592]	; (80061ec <getDir+0x2e8>)
 8005f9c:	f009 fc14 	bl	800f7c8 <HAL_UART_Transmit>

	// Iterate through entries in the directory file
	for (i = 0; i < numFiles; i++) {
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e176      	b.n	8006294 <getDir+0x390>
		temp = file[i*(NAME_LIM+1)];					// INode number is first byte of directory entry
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	461a      	mov	r2, r3
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	75fb      	strb	r3, [r7, #23]

		// Write INode number
		if (temp < 9) {
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d81d      	bhi.n	8005ff6 <getDir+0xf2>
			digit = '0' + temp;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	3330      	adds	r3, #48	; 0x30
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit, 1, 100);
 8005fc2:	4b86      	ldr	r3, [pc, #536]	; (80061dc <getDir+0x2d8>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <getDir+0xca>
 8005fca:	4885      	ldr	r0, [pc, #532]	; (80061e0 <getDir+0x2dc>)
 8005fcc:	e000      	b.n	8005fd0 <getDir+0xcc>
 8005fce:	4885      	ldr	r0, [pc, #532]	; (80061e4 <getDir+0x2e0>)
 8005fd0:	f107 010b 	add.w	r1, r7, #11
 8005fd4:	2364      	movs	r3, #100	; 0x64
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f009 fbf6 	bl	800f7c8 <HAL_UART_Transmit>
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "    ", 4, 100);
 8005fdc:	4b7f      	ldr	r3, [pc, #508]	; (80061dc <getDir+0x2d8>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <getDir+0xe4>
 8005fe4:	487e      	ldr	r0, [pc, #504]	; (80061e0 <getDir+0x2dc>)
 8005fe6:	e000      	b.n	8005fea <getDir+0xe6>
 8005fe8:	487e      	ldr	r0, [pc, #504]	; (80061e4 <getDir+0x2e0>)
 8005fea:	2364      	movs	r3, #100	; 0x64
 8005fec:	2204      	movs	r2, #4
 8005fee:	4980      	ldr	r1, [pc, #512]	; (80061f0 <getDir+0x2ec>)
 8005ff0:	f009 fbea 	bl	800f7c8 <HAL_UART_Transmit>
 8005ff4:	e093      	b.n	800611e <getDir+0x21a>
		}
		else if (temp < 99) {
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	2b62      	cmp	r3, #98	; 0x62
 8005ffa:	d83d      	bhi.n	8006078 <getDir+0x174>
			digit = '0' + (temp / 10);
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	4a7d      	ldr	r2, [pc, #500]	; (80061f4 <getDir+0x2f0>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	08db      	lsrs	r3, r3, #3
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	b2db      	uxtb	r3, r3
 800600c:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit, 1, 100);
 800600e:	4b73      	ldr	r3, [pc, #460]	; (80061dc <getDir+0x2d8>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <getDir+0x116>
 8006016:	4872      	ldr	r0, [pc, #456]	; (80061e0 <getDir+0x2dc>)
 8006018:	e000      	b.n	800601c <getDir+0x118>
 800601a:	4872      	ldr	r0, [pc, #456]	; (80061e4 <getDir+0x2e0>)
 800601c:	f107 010b 	add.w	r1, r7, #11
 8006020:	2364      	movs	r3, #100	; 0x64
 8006022:	2201      	movs	r2, #1
 8006024:	f009 fbd0 	bl	800f7c8 <HAL_UART_Transmit>

			digit = '0' + (temp % 10);
 8006028:	7dfa      	ldrb	r2, [r7, #23]
 800602a:	4b72      	ldr	r3, [pc, #456]	; (80061f4 <getDir+0x2f0>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	08d9      	lsrs	r1, r3, #3
 8006032:	460b      	mov	r3, r1
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	b2db      	uxtb	r3, r3
 800603e:	3330      	adds	r3, #48	; 0x30
 8006040:	b2db      	uxtb	r3, r3
 8006042:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit, 1, 100);
 8006044:	4b65      	ldr	r3, [pc, #404]	; (80061dc <getDir+0x2d8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <getDir+0x14c>
 800604c:	4864      	ldr	r0, [pc, #400]	; (80061e0 <getDir+0x2dc>)
 800604e:	e000      	b.n	8006052 <getDir+0x14e>
 8006050:	4864      	ldr	r0, [pc, #400]	; (80061e4 <getDir+0x2e0>)
 8006052:	f107 010b 	add.w	r1, r7, #11
 8006056:	2364      	movs	r3, #100	; 0x64
 8006058:	2201      	movs	r2, #1
 800605a:	f009 fbb5 	bl	800f7c8 <HAL_UART_Transmit>

			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "   ", 3, 100);
 800605e:	4b5f      	ldr	r3, [pc, #380]	; (80061dc <getDir+0x2d8>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <getDir+0x166>
 8006066:	485e      	ldr	r0, [pc, #376]	; (80061e0 <getDir+0x2dc>)
 8006068:	e000      	b.n	800606c <getDir+0x168>
 800606a:	485e      	ldr	r0, [pc, #376]	; (80061e4 <getDir+0x2e0>)
 800606c:	2364      	movs	r3, #100	; 0x64
 800606e:	2203      	movs	r2, #3
 8006070:	4961      	ldr	r1, [pc, #388]	; (80061f8 <getDir+0x2f4>)
 8006072:	f009 fba9 	bl	800f7c8 <HAL_UART_Transmit>
 8006076:	e052      	b.n	800611e <getDir+0x21a>
		}
		else {
			digit = '0' + (temp / 100);
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	4a60      	ldr	r2, [pc, #384]	; (80061fc <getDir+0x2f8>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	b2db      	uxtb	r3, r3
 8006084:	3330      	adds	r3, #48	; 0x30
 8006086:	b2db      	uxtb	r3, r3
 8006088:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit, 1, 100);
 800608a:	4b54      	ldr	r3, [pc, #336]	; (80061dc <getDir+0x2d8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <getDir+0x192>
 8006092:	4853      	ldr	r0, [pc, #332]	; (80061e0 <getDir+0x2dc>)
 8006094:	e000      	b.n	8006098 <getDir+0x194>
 8006096:	4853      	ldr	r0, [pc, #332]	; (80061e4 <getDir+0x2e0>)
 8006098:	f107 010b 	add.w	r1, r7, #11
 800609c:	2364      	movs	r3, #100	; 0x64
 800609e:	2201      	movs	r2, #1
 80060a0:	f009 fb92 	bl	800f7c8 <HAL_UART_Transmit>

			digit = '0' + (temp / 10);
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	4a53      	ldr	r2, [pc, #332]	; (80061f4 <getDir+0x2f0>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	08db      	lsrs	r3, r3, #3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	3330      	adds	r3, #48	; 0x30
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit, 1, 100);
 80060b6:	4b49      	ldr	r3, [pc, #292]	; (80061dc <getDir+0x2d8>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <getDir+0x1be>
 80060be:	4848      	ldr	r0, [pc, #288]	; (80061e0 <getDir+0x2dc>)
 80060c0:	e000      	b.n	80060c4 <getDir+0x1c0>
 80060c2:	4848      	ldr	r0, [pc, #288]	; (80061e4 <getDir+0x2e0>)
 80060c4:	f107 010b 	add.w	r1, r7, #11
 80060c8:	2364      	movs	r3, #100	; 0x64
 80060ca:	2201      	movs	r2, #1
 80060cc:	f009 fb7c 	bl	800f7c8 <HAL_UART_Transmit>

			digit = '0' + (temp % 10);
 80060d0:	7dfa      	ldrb	r2, [r7, #23]
 80060d2:	4b48      	ldr	r3, [pc, #288]	; (80061f4 <getDir+0x2f0>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	08d9      	lsrs	r1, r3, #3
 80060da:	460b      	mov	r3, r1
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	3330      	adds	r3, #48	; 0x30
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &digit , 1, 100);
 80060ec:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <getDir+0x2d8>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <getDir+0x1f4>
 80060f4:	483a      	ldr	r0, [pc, #232]	; (80061e0 <getDir+0x2dc>)
 80060f6:	e000      	b.n	80060fa <getDir+0x1f6>
 80060f8:	483a      	ldr	r0, [pc, #232]	; (80061e4 <getDir+0x2e0>)
 80060fa:	f107 010b 	add.w	r1, r7, #11
 80060fe:	2364      	movs	r3, #100	; 0x64
 8006100:	2201      	movs	r2, #1
 8006102:	f009 fb61 	bl	800f7c8 <HAL_UART_Transmit>

			HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "  ", 2, 100);
 8006106:	4b35      	ldr	r3, [pc, #212]	; (80061dc <getDir+0x2d8>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <getDir+0x20e>
 800610e:	4834      	ldr	r0, [pc, #208]	; (80061e0 <getDir+0x2dc>)
 8006110:	e000      	b.n	8006114 <getDir+0x210>
 8006112:	4834      	ldr	r0, [pc, #208]	; (80061e4 <getDir+0x2e0>)
 8006114:	2364      	movs	r3, #100	; 0x64
 8006116:	2202      	movs	r2, #2
 8006118:	4939      	ldr	r1, [pc, #228]	; (8006200 <getDir+0x2fc>)
 800611a:	f009 fb55 	bl	800f7c8 <HAL_UART_Transmit>
		}

		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "  ", 2, 100);
 800611e:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <getDir+0x2d8>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <getDir+0x226>
 8006126:	482e      	ldr	r0, [pc, #184]	; (80061e0 <getDir+0x2dc>)
 8006128:	e000      	b.n	800612c <getDir+0x228>
 800612a:	482e      	ldr	r0, [pc, #184]	; (80061e4 <getDir+0x2e0>)
 800612c:	2364      	movs	r3, #100	; 0x64
 800612e:	2202      	movs	r2, #2
 8006130:	4933      	ldr	r1, [pc, #204]	; (8006200 <getDir+0x2fc>)
 8006132:	f009 fb49 	bl	800f7c8 <HAL_UART_Transmit>


		// Write File len in Kb
		for (j = 0; j < numINodes; j++) {
 8006136:	2300      	movs	r3, #0
 8006138:	77bb      	strb	r3, [r7, #30]
 800613a:	e009      	b.n	8006150 <getDir+0x24c>
			if (temp == INodeNumbers[j]) {					// File size is stored in the INode
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	7fbb      	ldrb	r3, [r7, #30]
 8006140:	4413      	add	r3, r2
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	7dfa      	ldrb	r2, [r7, #23]
 8006146:	429a      	cmp	r2, r3
 8006148:	d007      	beq.n	800615a <getDir+0x256>
		for (j = 0; j < numINodes; j++) {
 800614a:	7fbb      	ldrb	r3, [r7, #30]
 800614c:	3301      	adds	r3, #1
 800614e:	77bb      	strb	r3, [r7, #30]
 8006150:	7fba      	ldrb	r2, [r7, #30]
 8006152:	7f7b      	ldrb	r3, [r7, #29]
 8006154:	429a      	cmp	r2, r3
 8006156:	d3f1      	bcc.n	800613c <getDir+0x238>
 8006158:	e000      	b.n	800615c <getDir+0x258>
				break;
 800615a:	bf00      	nop
			}
		}

		// Use sprintf to convert double to str **need to change project config to compile this
		sprintf(size, "%.2lfKB", (INodes[j].fileSize / 1024.0));
 800615c:	6939      	ldr	r1, [r7, #16]
 800615e:	7fba      	ldrb	r2, [r7, #30]
 8006160:	4613      	mov	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	440b      	add	r3, r1
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fa f9d9 	bl	8000524 <__aeabi_ui2d>
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <getDir+0x300>)
 8006178:	f7fa fb78 	bl	800086c <__aeabi_ddiv>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4638      	mov	r0, r7
 8006182:	4921      	ldr	r1, [pc, #132]	; (8006208 <getDir+0x304>)
 8006184:	f00b fc90 	bl	8011aa8 <siprintf>

		if (strlen(size) < 8) {
 8006188:	463b      	mov	r3, r7
 800618a:	4618      	mov	r0, r3
 800618c:	f7fa f880 	bl	8000290 <strlen>
 8006190:	4603      	mov	r3, r0
 8006192:	2b07      	cmp	r3, #7
 8006194:	d81b      	bhi.n	80061ce <getDir+0x2ca>
			for (j = 0; j < (8 - strlen(size)); j++) {
 8006196:	2300      	movs	r3, #0
 8006198:	77bb      	strb	r3, [r7, #30]
 800619a:	e00e      	b.n	80061ba <getDir+0x2b6>
				HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "0", 1, 100);			// Pad left side with spaces if necessary
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <getDir+0x2d8>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <getDir+0x2a4>
 80061a4:	480e      	ldr	r0, [pc, #56]	; (80061e0 <getDir+0x2dc>)
 80061a6:	e000      	b.n	80061aa <getDir+0x2a6>
 80061a8:	480e      	ldr	r0, [pc, #56]	; (80061e4 <getDir+0x2e0>)
 80061aa:	2364      	movs	r3, #100	; 0x64
 80061ac:	2201      	movs	r2, #1
 80061ae:	4917      	ldr	r1, [pc, #92]	; (800620c <getDir+0x308>)
 80061b0:	f009 fb0a 	bl	800f7c8 <HAL_UART_Transmit>
			for (j = 0; j < (8 - strlen(size)); j++) {
 80061b4:	7fbb      	ldrb	r3, [r7, #30]
 80061b6:	3301      	adds	r3, #1
 80061b8:	77bb      	strb	r3, [r7, #30]
 80061ba:	7fbc      	ldrb	r4, [r7, #30]
 80061bc:	463b      	mov	r3, r7
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fa f866 	bl	8000290 <strlen>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f1c3 0308 	rsb	r3, r3, #8
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d3e6      	bcc.n	800619c <getDir+0x298>
			}
		}
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, size, strlen(size), 100);
 80061ce:	4b03      	ldr	r3, [pc, #12]	; (80061dc <getDir+0x2d8>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01c      	beq.n	8006210 <getDir+0x30c>
 80061d6:	4c02      	ldr	r4, [pc, #8]	; (80061e0 <getDir+0x2dc>)
 80061d8:	e01b      	b.n	8006212 <getDir+0x30e>
 80061da:	bf00      	nop
 80061dc:	20000009 	.word	0x20000009
 80061e0:	2000050c 	.word	0x2000050c
 80061e4:	2000061c 	.word	0x2000061c
 80061e8:	08015160 	.word	0x08015160
 80061ec:	0801517c 	.word	0x0801517c
 80061f0:	080151a0 	.word	0x080151a0
 80061f4:	cccccccd 	.word	0xcccccccd
 80061f8:	080151a8 	.word	0x080151a8
 80061fc:	51eb851f 	.word	0x51eb851f
 8006200:	080151ac 	.word	0x080151ac
 8006204:	40900000 	.word	0x40900000
 8006208:	08015140 	.word	0x08015140
 800620c:	08015148 	.word	0x08015148
 8006210:	4c2a      	ldr	r4, [pc, #168]	; (80062bc <getDir+0x3b8>)
 8006212:	463b      	mov	r3, r7
 8006214:	4618      	mov	r0, r3
 8006216:	f7fa f83b 	bl	8000290 <strlen>
 800621a:	4603      	mov	r3, r0
 800621c:	b29a      	uxth	r2, r3
 800621e:	4639      	mov	r1, r7
 8006220:	2364      	movs	r3, #100	; 0x64
 8006222:	4620      	mov	r0, r4
 8006224:	f009 fad0 	bl	800f7c8 <HAL_UART_Transmit>

		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "     ", 4, 100);
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <getDir+0x3bc>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <getDir+0x330>
 8006230:	4824      	ldr	r0, [pc, #144]	; (80062c4 <getDir+0x3c0>)
 8006232:	e000      	b.n	8006236 <getDir+0x332>
 8006234:	4821      	ldr	r0, [pc, #132]	; (80062bc <getDir+0x3b8>)
 8006236:	2364      	movs	r3, #100	; 0x64
 8006238:	2204      	movs	r2, #4
 800623a:	4923      	ldr	r1, [pc, #140]	; (80062c8 <getDir+0x3c4>)
 800623c:	f009 fac4 	bl	800f7c8 <HAL_UART_Transmit>

		// Write File Name
		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, &file[i*(NAME_LIM+1) + 1], strlen(&file[i*(NAME_LIM+1) + 1]), 100);
 8006240:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <getDir+0x3bc>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <getDir+0x348>
 8006248:	4c1e      	ldr	r4, [pc, #120]	; (80062c4 <getDir+0x3c0>)
 800624a:	e000      	b.n	800624e <getDir+0x34a>
 800624c:	4c1b      	ldr	r4, [pc, #108]	; (80062bc <getDir+0x3b8>)
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	3301      	adds	r3, #1
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	18d5      	adds	r5, r2, r3
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	019b      	lsls	r3, r3, #6
 800625c:	3301      	adds	r3, #1
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4413      	add	r3, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa f814 	bl	8000290 <strlen>
 8006268:	4603      	mov	r3, r0
 800626a:	b29a      	uxth	r2, r3
 800626c:	2364      	movs	r3, #100	; 0x64
 800626e:	4629      	mov	r1, r5
 8006270:	4620      	mov	r0, r4
 8006272:	f009 faa9 	bl	800f7c8 <HAL_UART_Transmit>

		HAL_UART_Transmit((UARTFlag) ? &huart1 : &huart3, "\n", 1, 100);
 8006276:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <getDir+0x3bc>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <getDir+0x37e>
 800627e:	4811      	ldr	r0, [pc, #68]	; (80062c4 <getDir+0x3c0>)
 8006280:	e000      	b.n	8006284 <getDir+0x380>
 8006282:	480e      	ldr	r0, [pc, #56]	; (80062bc <getDir+0x3b8>)
 8006284:	2364      	movs	r3, #100	; 0x64
 8006286:	2201      	movs	r2, #1
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <getDir+0x3c8>)
 800628a:	f009 fa9d 	bl	800f7c8 <HAL_UART_Transmit>
	for (i = 0; i < numFiles; i++) {
 800628e:	7ffb      	ldrb	r3, [r7, #31]
 8006290:	3301      	adds	r3, #1
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	7ffa      	ldrb	r2, [r7, #31]
 8006296:	7f3b      	ldrb	r3, [r7, #28]
 8006298:	429a      	cmp	r2, r3
 800629a:	f4ff ae84 	bcc.w	8005fa6 <getDir+0xa2>
	}

	free(INodes);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f00a fd5f 	bl	8010d64 <free>
	free(INodeNumbers);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f00a fd5b 	bl	8010d64 <free>
	free(file);
 80062ae:	69b8      	ldr	r0, [r7, #24]
 80062b0:	f00a fd58 	bl	8010d64 <free>
	return;
 80062b4:	bf00      	nop
}
 80062b6:	3724      	adds	r7, #36	; 0x24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062bc:	2000061c 	.word	0x2000061c
 80062c0:	20000009 	.word	0x20000009
 80062c4:	2000050c 	.word	0x2000050c
 80062c8:	080151b0 	.word	0x080151b0
 80062cc:	0801515c 	.word	0x0801515c

080062d0 <readFile>:

uint8_t* readFile(struct INode node) {
 80062d0:	b084      	sub	sp, #16
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	f107 0c20 	add.w	ip, r7, #32
 80062dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t *file = malloc(0);
 80062e0:	2000      	movs	r0, #0
 80062e2:	f00a fd37 	bl	8010d54 <malloc>
 80062e6:	4603      	mov	r3, r0
 80062e8:	617b      	str	r3, [r7, #20]
	uint8_t *temp;
	uint32_t offset = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
	uint32_t segmentLen;


	for (int i = 0; i < 5; i++) {
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e059      	b.n	80063a8 <readFile+0xd8>
		if (node.addr[i*2] != 0 && node.addr[i*2+1] != 0) {							// If the pointer is valid
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	3302      	adds	r3, #2
 80062fa:	f107 0220 	add.w	r2, r7, #32
 80062fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04d      	beq.n	80063a2 <readFile+0xd2>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	3301      	adds	r3, #1
 800630c:	3302      	adds	r3, #2
 800630e:	f107 0220 	add.w	r2, r7, #32
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d043      	beq.n	80063a2 <readFile+0xd2>
			segmentLen = node.addr[i*2+1] - node.addr[i*2];
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	3301      	adds	r3, #1
 8006320:	3302      	adds	r3, #2
 8006322:	f107 0220 	add.w	r2, r7, #32
 8006326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	3302      	adds	r3, #2
 8006330:	f107 0120 	add.w	r1, r7, #32
 8006334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	60bb      	str	r3, [r7, #8]

			temp = readData(node.addr[i*2], segmentLen);							// Read the data in the first pair
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	3302      	adds	r3, #2
 8006342:	f107 0220 	add.w	r2, r7, #32
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fb0f 	bl	8005970 <readData>
 8006352:	6078      	str	r0, [r7, #4]

			file = realloc(file, offset+segmentLen);								// Increase the size by the new segment
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4413      	add	r3, r2
 800635a:	4619      	mov	r1, r3
 800635c:	6978      	ldr	r0, [r7, #20]
 800635e:	f00a fdb5 	bl	8010ecc <realloc>
 8006362:	6178      	str	r0, [r7, #20]
			memcpy(file+offset, temp+4, segmentLen);									// Append if multiple segments
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	18d0      	adds	r0, r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4619      	mov	r1, r3
 8006372:	f00c f896 	bl	80124a2 <memcpy>

			offset += node.addr[i*2+1] - node.addr[i*2];								// Stores end of array
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	3301      	adds	r3, #1
 800637c:	3302      	adds	r3, #2
 800637e:	f107 0220 	add.w	r2, r7, #32
 8006382:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	3302      	adds	r3, #2
 800638c:	f107 0120 	add.w	r1, r7, #32
 8006390:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
			free(temp);																// If read data is called need to free memory
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f00a fce1 	bl	8010d64 <free>
	for (int i = 0; i < 5; i++) {
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	dda2      	ble.n	80062f4 <readFile+0x24>
		}
	}
	return file;
 80063ae:	697b      	ldr	r3, [r7, #20]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ba:	b004      	add	sp, #16
 80063bc:	4770      	bx	lr

080063be <SetupFilesystem>:

uint8_t SetupFilesystem() {
 80063be:	b5b0      	push	{r4, r5, r7, lr}
 80063c0:	b098      	sub	sp, #96	; 0x60
 80063c2:	af0a      	add	r7, sp, #40	; 0x28
	struct INode baseDir;

	baseDir.fileType = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	713b      	strb	r3, [r7, #4]
	baseDir.fileSize = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60bb      	str	r3, [r7, #8]
	memset(baseDir.addr, 0, 10 * sizeof(uint32_t));
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	3308      	adds	r3, #8
 80063d0:	2228      	movs	r2, #40	; 0x28
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f00b fbcc 	bl	8011b72 <memset>


	/* WRITE BASE DIR INODE TO MEMORY */
	uint8_t *INodeArray = malloc(INODE_SIZE);
 80063da:	2022      	movs	r0, #34	; 0x22
 80063dc:	f00a fcba 	bl	8010d54 <malloc>
 80063e0:	4603      	mov	r3, r0
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34

	structToArray(baseDir, INodeArray);
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	9308      	str	r3, [sp, #32]
 80063e8:	466d      	mov	r5, sp
 80063ea:	f107 0414 	add.w	r4, r7, #20
 80063ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80063f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063fe:	f001 fe58 	bl	80080b2 <structToArray>

	if (writeData(INodeArray, 0x000000, INODE_SIZE) != 1) {
 8006402:	2222      	movs	r2, #34	; 0x22
 8006404:	2100      	movs	r1, #0
 8006406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006408:	f7ff f8b4 	bl	8005574 <writeData>
 800640c:	4603      	mov	r3, r0
 800640e:	2b01      	cmp	r3, #1
 8006410:	d004      	beq.n	800641c <SetupFilesystem+0x5e>
		free(INodeArray);
 8006412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006414:	f00a fca6 	bl	8010d64 <free>
		return 0;
 8006418:	2300      	movs	r3, #0
 800641a:	e006      	b.n	800642a <SetupFilesystem+0x6c>
	}

	free(INodeArray);
 800641c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800641e:	f00a fca1 	bl	8010d64 <free>

	HAL_Delay(1);
 8006422:	2001      	movs	r0, #1
 8006424:	f002 f87a 	bl	800851c <HAL_Delay>

	return 1;
 8006428:	2301      	movs	r3, #1
}
 800642a:	4618      	mov	r0, r3
 800642c:	3738      	adds	r7, #56	; 0x38
 800642e:	46bd      	mov	sp, r7
 8006430:	bdb0      	pop	{r4, r5, r7, pc}

08006432 <writeFile>:

uint8_t writeFile(uint8_t *file, uint32_t len, char newFilename[NAME_LIM], uint8_t fileType) {
 8006432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006434:	b0b9      	sub	sp, #228	; 0xe4
 8006436:	af0c      	add	r7, sp, #48	; 0x30
 8006438:	6178      	str	r0, [r7, #20]
 800643a:	6139      	str	r1, [r7, #16]
 800643c:	60fa      	str	r2, [r7, #12]
 800643e:	72fb      	strb	r3, [r7, #11]
	uint8_t needNewPointer = 1;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	uint8_t numINodes;
	struct INode *INodes = malloc(0);
 8006446:	2000      	movs	r0, #0
 8006448:	f00a fc84 	bl	8010d54 <malloc>
 800644c:	4603      	mov	r3, r0
 800644e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint8_t *INodeNumbers = malloc(0);
 8006452:	2000      	movs	r0, #0
 8006454:	f00a fc7e 	bl	8010d54 <malloc>
 8006458:	4603      	mov	r3, r0
 800645a:	67fb      	str	r3, [r7, #124]	; 0x7c

	uint8_t newINodeNumber = 1; 												// Start at 1 because INode 0 should always be base directory
 800645c:	2301      	movs	r3, #1
 800645e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	uint8_t flag = 0;															// Used in the loop that finds the new file's INode number
 8006462:	2300      	movs	r3, #0
 8006464:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad

	struct INode newFile;


	/* 1.) Set up INode structure for new file */
	newFile.fileType = fileType;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	newFile.fileSize = len;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	653b      	str	r3, [r7, #80]	; 0x50
	memset(newFile.addr, 0, 10 * sizeof(uint32_t));
 8006472:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006476:	3308      	adds	r3, #8
 8006478:	2228      	movs	r2, #40	; 0x28
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f00b fb78 	bl	8011b72 <memset>


	/* Check available memory segments, determine where to store file */
	/* to do this read all of the INodes and check their pointers and numbers */

	numINodes = readINodes(&INodes, &INodeNumbers);
 8006482:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006486:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fc5f 	bl	8007d50 <readINodes>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	if (numINodes == 0) {
 8006498:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <writeFile+0x86>
		free(INodes);
 80064a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064a4:	4618      	mov	r0, r3
 80064a6:	f00a fc5d 	bl	8010d64 <free>
		free(INodeNumbers);
 80064aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ac:	4618      	mov	r0, r3
 80064ae:	f00a fc59 	bl	8010d64 <free>
		return -10;
 80064b2:	23f6      	movs	r3, #246	; 0xf6
 80064b4:	f000 bd7e 	b.w	8006fb4 <writeFile+0xb82>

	int i;
	int j;

	/* Find the lowest available INode Number and set write addr for INode */
	for (newINodeNumber = 1; newINodeNumber < MAX_INODES; newINodeNumber++) {		// Iterate from 1-max possible Inode number
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80064be:	e027      	b.n	8006510 <writeFile+0xde>
		flag = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		for (i = 0; i < numINodes; i++) {											// Check if its in the list of valid INodes from memory
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064cc:	e011      	b.n	80064f2 <writeFile+0xc0>
			if (newINodeNumber == INodeNumbers[i]) {								// If it is, increment new INode number, try again
 80064ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80064d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d4:	4413      	add	r3, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 80064dc:	429a      	cmp	r2, r3
 80064de:	d103      	bne.n	80064e8 <writeFile+0xb6>
				flag = 1;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
				break;
 80064e6:	e00a      	b.n	80064fe <writeFile+0xcc>
		for (i = 0; i < numINodes; i++) {											// Check if its in the list of valid INodes from memory
 80064e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064ec:	3301      	adds	r3, #1
 80064ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064f2:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80064f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064fa:	429a      	cmp	r2, r3
 80064fc:	dbe7      	blt.n	80064ce <writeFile+0x9c>
			}
		}
		if (flag == 0) {															// If the new number was not in the list exit the loops
 80064fe:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <writeFile+0xe8>
	for (newINodeNumber = 1; newINodeNumber < MAX_INODES; newINodeNumber++) {		// Iterate from 1-max possible Inode number
 8006506:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800650a:	3301      	adds	r3, #1
 800650c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8006510:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006514:	2bff      	cmp	r3, #255	; 0xff
 8006516:	d1d3      	bne.n	80064c0 <writeFile+0x8e>
 8006518:	e000      	b.n	800651c <writeFile+0xea>
			break;
 800651a:	bf00      	nop
		}
	}


	/* Use INode pointers to find open memory area */
	uint16_t numPointers = numINodes*5;
 800651c:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	0092      	lsls	r2, r2, #2
 8006526:	4413      	add	r3, r2
 8006528:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint32_t *startPointers = malloc(sizeof(uint32_t) * numPointers);
 800652c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4618      	mov	r0, r3
 8006534:	f00a fc0e 	bl	8010d54 <malloc>
 8006538:	4603      	mov	r3, r0
 800653a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t *endPointers = malloc(sizeof(uint32_t) * numPointers);
 800653e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f00a fc05 	bl	8010d54 <malloc>
 800654a:	4603      	mov	r3, r0
 800654c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// a.) Make lists of starting and ending pointers
	for (i = 0; i < numINodes; i++) {
 8006550:	2300      	movs	r3, #0
 8006552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006556:	e04a      	b.n	80065ee <writeFile+0x1bc>
		for (j = 0; j < 5; j++) {
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800655e:	e03d      	b.n	80065dc <writeFile+0x1aa>
			startPointers[i*5 +j] = INodes[i].addr[j*2];
 8006560:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006564:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006568:	4613      	mov	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	4413      	add	r3, r2
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	4419      	add	r1, r3
 8006572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006576:	0058      	lsls	r0, r3, #1
 8006578:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800658e:	4413      	add	r3, r2
 8006590:	1c82      	adds	r2, r0, #2
 8006592:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006596:	601a      	str	r2, [r3, #0]
			endPointers[i*5 + j] = INodes[i].addr[j*2 +1];
 8006598:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800659c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	4419      	add	r1, r3
 80065aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	1c58      	adds	r0, r3, #1
 80065b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065c8:	4413      	add	r3, r2
 80065ca:	1c82      	adds	r2, r0, #2
 80065cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065d0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 5; j++) {
 80065d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065d6:	3301      	adds	r3, #1
 80065d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	ddbd      	ble.n	8006560 <writeFile+0x12e>
	for (i = 0; i < numINodes; i++) {
 80065e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e8:	3301      	adds	r3, #1
 80065ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065ee:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80065f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065f6:	429a      	cmp	r2, r3
 80065f8:	dbae      	blt.n	8006558 <writeFile+0x126>
		}
	}

	// b.) Sort startPointers, make identical swaps to endPointers array
	sort(startPointers, endPointers, numPointers);
 80065fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80065fe:	461a      	mov	r2, r3
 8006600:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006604:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006608:	f001 fdc4 	bl	8008194 <sort>

	// c.) Find empty memory segments between used ones
	uint32_t *startFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 800660c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f00a fb9e 	bl	8010d54 <malloc>
 8006618:	4603      	mov	r3, r0
 800661a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t *endFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 800661e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4618      	mov	r0, r3
 8006626:	f00a fb95 	bl	8010d54 <malloc>
 800662a:	4603      	mov	r3, r0
 800662c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	memset(startFreeMemory, 0, numPointers * 4);
 8006630:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	461a      	mov	r2, r3
 8006638:	2100      	movs	r1, #0
 800663a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800663e:	f00b fa98 	bl	8011b72 <memset>
	memset(endFreeMemory, 0, numPointers * 4);
 8006642:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	461a      	mov	r2, r3
 800664a:	2100      	movs	r1, #0
 800664c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006650:	f00b fa8f 	bl	8011b72 <memset>
	uint16_t index = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2


	// Check if there is space open at start of mem
	if (startPointers[0] > RESERVED_ADDR) {
 800665a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006664:	d318      	bcc.n	8006698 <writeFile+0x266>
	    startFreeMemory[index] = RESERVED_ADDR;
 8006666:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006670:	4413      	add	r3, r2
 8006672:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006676:	601a      	str	r2, [r3, #0]
	    endFreeMemory[index] = startPointers[0] - 1;
 8006678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006688:	440b      	add	r3, r1
 800668a:	3a01      	subs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
	    index++;
 800668e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006692:	3301      	adds	r3, #1
 8006694:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	}

	// Check if there are open segments between data
	for (i = 0; i < numPointers; i++) {										// Iterate through pointer pairs
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800669e:	e046      	b.n	800672e <writeFile+0x2fc>
		if (startPointers[i] == 0) {										// If the start is 0 then its blank, skip
 80066a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066aa:	4413      	add	r3, r2
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d037      	beq.n	8006722 <writeFile+0x2f0>
			continue;
		}

		// Calculate the available memory segment between two used segments
		// If end is less than start it means there is no space between segments
		if ((endPointers[i] + 1) < (startPointers[i + 1] - 1)) {
 80066b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066bc:	4413      	add	r3, r2
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c6:	3301      	adds	r3, #1
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80066ce:	440b      	add	r3, r1
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d225      	bcs.n	8006724 <writeFile+0x2f2>
			startFreeMemory[index] = endPointers[i] + 1;
 80066d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066e2:	4413      	add	r3, r2
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066f0:	440b      	add	r3, r1
 80066f2:	3201      	adds	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
			endFreeMemory[index] = startPointers[i + 1] - 1;
 80066f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066fa:	3301      	adds	r3, #1
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006702:	4413      	add	r3, r2
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006710:	440b      	add	r3, r1
 8006712:	3a01      	subs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]
			index++;
 8006716:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800671a:	3301      	adds	r3, #1
 800671c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8006720:	e000      	b.n	8006724 <writeFile+0x2f2>
			continue;
 8006722:	bf00      	nop
	for (i = 0; i < numPointers; i++) {										// Iterate through pointer pairs
 8006724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800672e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006736:	429a      	cmp	r2, r3
 8006738:	dbb2      	blt.n	80066a0 <writeFile+0x26e>
		}

	}

	// Check if there is space open at end of mem
	if (endPointers[numPointers - 1] < END_ADDR) {
 800673a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800673e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006742:	3b01      	subs	r3, #1
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800674a:	4413      	add	r3, r2
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006752:	d235      	bcs.n	80067c0 <writeFile+0x38e>
		if (endPointers[numPointers - 1] == 0) {							// This shoudl indicate that nothing is in memory, so all of it is open
 8006754:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800675c:	3b01      	subs	r3, #1
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006764:	4413      	add	r3, r2
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <writeFile+0x34e>
			startFreeMemory[index] = RESERVED_ADDR+1;
 800676c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006776:	4413      	add	r3, r2
 8006778:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e011      	b.n	80067a4 <writeFile+0x372>
		}
		else {
			startFreeMemory[index] = endPointers[numPointers - 1] + 1;
 8006780:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006788:	3b01      	subs	r3, #1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006790:	4413      	add	r3, r2
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800679e:	440b      	add	r3, r1
 80067a0:	3201      	adds	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
		}

	    endFreeMemory[index] = END_ADDR;
 80067a4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067ae:	4413      	add	r3, r2
 80067b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80067b4:	601a      	str	r2, [r3, #0]
	    index++;
 80067b6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80067ba:	3301      	adds	r3, #1
 80067bc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2



	/* Use open memory segments to decide where to save */
	// TODO URG : If there is not one segment big enough use multiple
	for (i = 0; i < index; i++) {											// Iterate through open memory segments
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067c6:	e029      	b.n	800681c <writeFile+0x3ea>
		if (endFreeMemory[i] - startFreeMemory[i] > newFile.fileSize) {		// If the segment is big enough to hold the file
 80067c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067d2:	4413      	add	r3, r2
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067e0:	440b      	add	r3, r1
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	1ad2      	subs	r2, r2, r3
 80067e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d912      	bls.n	8006812 <writeFile+0x3e0>
			newFile.addr[0] = startFreeMemory[i];							// Store the file at the start of the open memory
 80067ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80067f6:	4413      	add	r3, r2
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	657b      	str	r3, [r7, #84]	; 0x54
			newFile.addr[1] = startFreeMemory[i] + len;
 80067fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006806:	4413      	add	r3, r2
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4413      	add	r3, r2
 800680e:	65bb      	str	r3, [r7, #88]	; 0x58
			break;
 8006810:	e00a      	b.n	8006828 <writeFile+0x3f6>
	for (i = 0; i < index; i++) {											// Iterate through open memory segments
 8006812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006816:	3301      	adds	r3, #1
 8006818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800681c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006820:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006824:	429a      	cmp	r2, r3
 8006826:	dbcf      	blt.n	80067c8 <writeFile+0x396>
		}
	}

	if (i == index) {
 8006828:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800682c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006830:	429a      	cmp	r2, r3
 8006832:	d11a      	bne.n	800686a <writeFile+0x438>
		free(INodes);
 8006834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006838:	4618      	mov	r0, r3
 800683a:	f00a fa93 	bl	8010d64 <free>
		free(INodeNumbers);
 800683e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006840:	4618      	mov	r0, r3
 8006842:	f00a fa8f 	bl	8010d64 <free>
		free(startPointers);
 8006846:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800684a:	f00a fa8b 	bl	8010d64 <free>
		free(endPointers);
 800684e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006852:	f00a fa87 	bl	8010d64 <free>
		free(startFreeMemory);
 8006856:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800685a:	f00a fa83 	bl	8010d64 <free>
		free(endFreeMemory);
 800685e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006862:	f00a fa7f 	bl	8010d64 <free>
		return -7;															// no segment big enough
 8006866:	23f9      	movs	r3, #249	; 0xf9
 8006868:	e3a4      	b.n	8006fb4 <writeFile+0xb82>
	}



	/* Write INode to memory */
	if (writeINode(INodes, INodeNumbers, numINodes, newINodeNumber, newFile) == 0) {
 800686a:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 800686e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	f897 e0ae 	ldrb.w	lr, [r7, #174]	; 0xae
 8006876:	f897 c0a1 	ldrb.w	ip, [r7, #161]	; 0xa1
 800687a:	466d      	mov	r5, sp
 800687c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8006880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006888:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800688c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006890:	4673      	mov	r3, lr
 8006892:	4662      	mov	r2, ip
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4630      	mov	r0, r6
 8006898:	f001 f8d4 	bl	8007a44 <writeINode>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11a      	bne.n	80068d8 <writeFile+0x4a6>
		free(INodes);
 80068a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068a6:	4618      	mov	r0, r3
 80068a8:	f00a fa5c 	bl	8010d64 <free>
		free(INodeNumbers);
 80068ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ae:	4618      	mov	r0, r3
 80068b0:	f00a fa58 	bl	8010d64 <free>
		free(startPointers);
 80068b4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80068b8:	f00a fa54 	bl	8010d64 <free>
		free(endPointers);
 80068bc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80068c0:	f00a fa50 	bl	8010d64 <free>
		free(startFreeMemory);
 80068c4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80068c8:	f00a fa4c 	bl	8010d64 <free>
		free(endFreeMemory);
 80068cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80068d0:	f00a fa48 	bl	8010d64 <free>
		return -5;																	// Failed to write INodes
 80068d4:	23fb      	movs	r3, #251	; 0xfb
 80068d6:	e36d      	b.n	8006fb4 <writeFile+0xb82>
	}


	free(INodes);
 80068d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068dc:	4618      	mov	r0, r3
 80068de:	f00a fa41 	bl	8010d64 <free>
	free(INodeNumbers);
 80068e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068e4:	4618      	mov	r0, r3
 80068e6:	f00a fa3d 	bl	8010d64 <free>

	free(startFreeMemory);
 80068ea:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80068ee:	f00a fa39 	bl	8010d64 <free>
	free(endFreeMemory);
 80068f2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80068f6:	f00a fa35 	bl	8010d64 <free>
	free(startPointers);
 80068fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80068fe:	f00a fa31 	bl	8010d64 <free>
	free(endPointers);
 8006902:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006906:	f00a fa2d 	bl	8010d64 <free>

	HAL_Delay(1);
 800690a:	2001      	movs	r0, #1
 800690c:	f001 fe06 	bl	800851c <HAL_Delay>


	/* 2.) Determine where in memory to store the new file */
	/* Check available memory segments, determine where to store file */
	/* to do this read all of the INodes and check their pointers and numbers */
	INodes = malloc(0);
 8006910:	2000      	movs	r0, #0
 8006912:	f00a fa1f 	bl	8010d54 <malloc>
 8006916:	4603      	mov	r3, r0
 8006918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	INodeNumbers = malloc(0);
 800691c:	2000      	movs	r0, #0
 800691e:	f00a fa19 	bl	8010d54 <malloc>
 8006922:	4603      	mov	r3, r0
 8006924:	67fb      	str	r3, [r7, #124]	; 0x7c

	numINodes = readINodes(&INodes, &INodeNumbers);
 8006926:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800692a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fa0d 	bl	8007d50 <readINodes>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	/* TODO : GET INode number of current directory */



	/* Use INode pointers to find open memory area */
	numPointers = numINodes*5;
 800693c:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	0092      	lsls	r2, r2, #2
 8006946:	4413      	add	r3, r2
 8006948:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	startPointers = malloc(sizeof(uint32_t) * numPointers);
 800694c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f00a f9fe 	bl	8010d54 <malloc>
 8006958:	4603      	mov	r3, r0
 800695a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	endPointers = malloc(sizeof(uint32_t) * numPointers);
 800695e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4618      	mov	r0, r3
 8006966:	f00a f9f5 	bl	8010d54 <malloc>
 800696a:	4603      	mov	r3, r0
 800696c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	startFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 8006970:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4618      	mov	r0, r3
 8006978:	f00a f9ec 	bl	8010d54 <malloc>
 800697c:	4603      	mov	r3, r0
 800697e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	endFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 8006982:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4618      	mov	r0, r3
 800698a:	f00a f9e3 	bl	8010d54 <malloc>
 800698e:	4603      	mov	r3, r0
 8006990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	memset(startFreeMemory, 0, numPointers * 4);
 8006994:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	461a      	mov	r2, r3
 800699c:	2100      	movs	r1, #0
 800699e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80069a2:	f00b f8e6 	bl	8011b72 <memset>
	memset(endFreeMemory, 0, numPointers * 4);
 80069a6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	461a      	mov	r2, r3
 80069ae:	2100      	movs	r1, #0
 80069b0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80069b4:	f00b f8dd 	bl	8011b72 <memset>


	// a.) Make lists of starting and ending pointers
	for (i = 0; i < numINodes; i++) {
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069be:	e04a      	b.n	8006a56 <writeFile+0x624>
		for (j = 0; j < 5; j++) {
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069c6:	e03d      	b.n	8006a44 <writeFile+0x612>
			startPointers[i*5 +j] = INodes[i].addr[j*2];
 80069c8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80069cc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	4419      	add	r1, r3
 80069da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069de:	0058      	lsls	r0, r3, #1
 80069e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069f6:	4413      	add	r3, r2
 80069f8:	1c82      	adds	r2, r0, #2
 80069fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80069fe:	601a      	str	r2, [r3, #0]
			endPointers[i*5 + j] = INodes[i].addr[j*2 +1];
 8006a00:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006a04:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	4419      	add	r1, r3
 8006a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	1c58      	adds	r0, r3, #1
 8006a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a30:	4413      	add	r3, r2
 8006a32:	1c82      	adds	r2, r0, #2
 8006a34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006a38:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 5; j++) {
 8006a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	ddbd      	ble.n	80069c8 <writeFile+0x596>
	for (i = 0; i < numINodes; i++) {
 8006a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a50:	3301      	adds	r3, #1
 8006a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a56:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8006a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	dbae      	blt.n	80069c0 <writeFile+0x58e>
		}
	}

	// b.) Sort startPointers, make identical swaps to endPointers array
	sort(startPointers, endPointers, numPointers);
 8006a62:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a66:	461a      	mov	r2, r3
 8006a68:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006a6c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006a70:	f001 fb90 	bl	8008194 <sort>

	// c.) Find empty memory segments between used ones
	memset(startFreeMemory, 0, numPointers * 4);
 8006a74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006a82:	f00b f876 	bl	8011b72 <memset>
	memset(endFreeMemory, 0, numPointers * 4);
 8006a86:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2100      	movs	r1, #0
 8006a90:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006a94:	f00b f86d 	bl	8011b72 <memset>
	index = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	// Check if there is space open at start of mem
	if (startPointers[0] > RESERVED_ADDR) {
 8006a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa8:	d318      	bcc.n	8006adc <writeFile+0x6aa>
	    startFreeMemory[index] = RESERVED_ADDR;
 8006aaa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006aba:	601a      	str	r2, [r3, #0]
	    endFreeMemory[index] = startPointers[0] - 1;
 8006abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006acc:	440b      	add	r3, r1
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
	    index++;
 8006ad2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	}

	// Check if there are open segments between data
	for (i = 0; i < numPointers; i++) {								// Iterate through pointer pairs
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ae2:	e052      	b.n	8006b8a <writeFile+0x758>
		if (startPointers[i] == 0) {								// If the start is 0 then its blank, skip
 8006ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006aee:	4413      	add	r3, r2
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d043      	beq.n	8006b7e <writeFile+0x74c>
			continue;
		}

		// Calculate the available memory segment between two used segments
		// If end is less than start it means there is no space between segments
		if ((endPointers[i] + 1) < (startPointers[i + 1] - 1) && (startPointers[i+1] - 1 < END_ADDR)) {
 8006af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b00:	4413      	add	r3, r2
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006b12:	440b      	add	r3, r1
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d231      	bcs.n	8006b80 <writeFile+0x74e>
 8006b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b20:	3301      	adds	r3, #1
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006b28:	4413      	add	r3, r2
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b32:	d225      	bcs.n	8006b80 <writeFile+0x74e>
			startFreeMemory[index] = endPointers[i] + 1;
 8006b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b3e:	4413      	add	r3, r2
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b4c:	440b      	add	r3, r1
 8006b4e:	3201      	adds	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
			endFreeMemory[index] = startPointers[i + 1] - 1;
 8006b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b56:	3301      	adds	r3, #1
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006b5e:	4413      	add	r3, r2
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
			index++;
 8006b72:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006b76:	3301      	adds	r3, #1
 8006b78:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8006b7c:	e000      	b.n	8006b80 <writeFile+0x74e>
			continue;
 8006b7e:	bf00      	nop
	for (i = 0; i < numPointers; i++) {								// Iterate through pointer pairs
 8006b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b84:	3301      	adds	r3, #1
 8006b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b8a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b92:	429a      	cmp	r2, r3
 8006b94:	dba6      	blt.n	8006ae4 <writeFile+0x6b2>
		}

	}

	// Check if there is space open at end of mem
	if (endPointers[numPointers - 1] < END_ADDR) {
 8006b96:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006b9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ba6:	4413      	add	r3, r2
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bae:	d235      	bcs.n	8006c1c <writeFile+0x7ea>
		if (endPointers[numPointers - 1] == 0) {							// This shoudl indicate that nothing is in memory, so all of it is open
 8006bb0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bc0:	4413      	add	r3, r2
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <writeFile+0x7aa>
			startFreeMemory[index] = RESERVED_ADDR+1;
 8006bc8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e011      	b.n	8006c00 <writeFile+0x7ce>
		}
		else {
			startFreeMemory[index] = endPointers[numPointers - 1] + 1;
 8006bdc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	3b01      	subs	r3, #1
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bec:	4413      	add	r3, r2
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bfa:	440b      	add	r3, r1
 8006bfc:	3201      	adds	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
		}

	    endFreeMemory[index] = END_ADDR;
 8006c00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c10:	601a      	str	r2, [r3, #0]
	    index++;
 8006c12:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	}

	/* 3.) Update the INode for the directory */
	/* Update base dir INode so that the new file can be appended */
	struct INode baseDir = INodes[0];								// base dir should always be 0
 8006c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c20:	f107 041c 	add.w	r4, r7, #28
 8006c24:	461d      	mov	r5, r3
 8006c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	baseDir.fileSize = baseDir.fileSize + NAME_LIM+1; 				// Add the size of the entry to the current size
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	623b      	str	r3, [r7, #32]

	// Find end of data in pointers
	for (j = 9; j > 0; j -= 2) {
 8006c3c:	2309      	movs	r3, #9
 8006c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c42:	e011      	b.n	8006c68 <writeFile+0x836>
		if (baseDir.addr[j] == 0) {									// If the addr is empty go to next one
 8006c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c48:	3302      	adds	r3, #2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	33a8      	adds	r3, #168	; 0xa8
 8006c4e:	f107 0208 	add.w	r2, r7, #8
 8006c52:	4413      	add	r3, r2
 8006c54:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <writeFile+0x840>
			continue;
 8006c5c:	bf00      	nop
	for (j = 9; j > 0; j -= 2) {
 8006c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c62:	3b02      	subs	r3, #2
 8006c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dce9      	bgt.n	8006c44 <writeFile+0x812>
 8006c70:	e000      	b.n	8006c74 <writeFile+0x842>
		}
		else
			break;													// If addr is not empty it is end of data
 8006c72:	bf00      	nop
	}

	if (j == -1) {													// If there are no pointers
 8006c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d103      	bne.n	8006c86 <writeFile+0x854>
		// J needs to be set to 0, do that in needNewPointer if
		needNewPointer = 1;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006c84:	e051      	b.n	8006d2a <writeFile+0x8f8>
	}
	else {
		// If there is more room at end add on to the last pointer
		for (i = 0; i < index; i++) {
 8006c86:	2300      	movs	r3, #0
 8006c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c8c:	e047      	b.n	8006d1e <writeFile+0x8ec>
			// If there is room at the end of the last pointer add on
			if (((baseDir.addr[j] + NAME_LIM+1) > startFreeMemory[i]) &&
 8006c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c92:	3302      	adds	r3, #2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	33a8      	adds	r3, #168	; 0xa8
 8006c98:	f107 0208 	add.w	r2, r7, #8
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006ca2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cb0:	440b      	add	r3, r1
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d92d      	bls.n	8006d14 <writeFile+0x8e2>
				((baseDir.addr[j] + NAME_LIM+1) < endFreeMemory[i])) {
 8006cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	33a8      	adds	r3, #168	; 0xa8
 8006cc2:	f107 0208 	add.w	r2, r7, #8
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006ccc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006cda:	440b      	add	r3, r1
 8006cdc:	681b      	ldr	r3, [r3, #0]
			if (((baseDir.addr[j] + NAME_LIM+1) > startFreeMemory[i]) &&
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d218      	bcs.n	8006d14 <writeFile+0x8e2>
				baseDir.addr[j] += NAME_LIM+1;										// Extend pointer
 8006ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ce6:	3302      	adds	r3, #2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	33a8      	adds	r3, #168	; 0xa8
 8006cec:	f107 0208 	add.w	r2, r7, #8
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006cf6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cfe:	3302      	adds	r3, #2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	33a8      	adds	r3, #168	; 0xa8
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	440b      	add	r3, r1
 8006d0a:	f843 2c94 	str.w	r2, [r3, #-148]
				needNewPointer = 0;													// Set flag so new pointers arent added
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		for (i = 0; i < index; i++) {
 8006d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d1e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d26:	429a      	cmp	r2, r3
 8006d28:	dbb1      	blt.n	8006c8e <writeFile+0x85c>
			}
		}
	}

	//TODO : TEST THIS SHIT.. Pretty sure it works
	if (needNewPointer) {														// If the last pointer could not be extended
 8006d2a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8081 	beq.w	8006e36 <writeFile+0xa04>
		if (j == 9) {
 8006d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d11a      	bne.n	8006d72 <writeFile+0x940>
			free(INodes);
 8006d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d40:	4618      	mov	r0, r3
 8006d42:	f00a f80f 	bl	8010d64 <free>
			free(INodeNumbers);
 8006d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f00a f80b 	bl	8010d64 <free>
			free(startFreeMemory);
 8006d4e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006d52:	f00a f807 	bl	8010d64 <free>
			free(endFreeMemory);
 8006d56:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006d5a:	f00a f803 	bl	8010d64 <free>
			free(startPointers);
 8006d5e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006d62:	f009 ffff 	bl	8010d64 <free>
			free(endPointers);
 8006d66:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006d6a:	f009 fffb 	bl	8010d64 <free>
			return -1;															// And we have used all 5 pointer pairs, we are too fragmented
 8006d6e:	23ff      	movs	r3, #255	; 0xff
 8006d70:	e120      	b.n	8006fb4 <writeFile+0xb82>
		}
		j += 1;																	// Increment 1 to move from previous ending pointer to new starting pointer
 8006d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d76:	3301      	adds	r3, #1
 8006d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		// TODO URG: If there is not one segment big enough use multiple
		for (i = 0; i < index; i++) {											// Iterate through open memory segments
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d82:	e052      	b.n	8006e2a <writeFile+0x9f8>
			if (endFreeMemory[i] - startFreeMemory[i] > 5*baseDir.fileSize) {		// If the segment is big enough to hold the new data
 8006d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006d8e:	4413      	add	r3, r2
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	1ad1      	subs	r1, r2, r3
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	4299      	cmp	r1, r3
 8006dac:	d938      	bls.n	8006e20 <writeFile+0x9ee>
				// Store the data in the middle of the open memory to reduce future fragmentation
				baseDir.addr[j]   = (endFreeMemory[i] - startFreeMemory[i]) / 2 + startFreeMemory[i];
 8006dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006db8:	4413      	add	r3, r2
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dc6:	440b      	add	r3, r1
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	085a      	lsrs	r2, r3, #1
 8006dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dd8:	440b      	add	r3, r1
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	441a      	add	r2, r3
 8006dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006de2:	3302      	adds	r3, #2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	33a8      	adds	r3, #168	; 0xa8
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	440b      	add	r3, r1
 8006dee:	f843 2c94 	str.w	r2, [r3, #-148]
				baseDir.addr[j+1] = baseDir.addr[j] + NAME_LIM+1;
 8006df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006df6:	3302      	adds	r3, #2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	33a8      	adds	r3, #168	; 0xa8
 8006dfc:	f107 0208 	add.w	r2, r7, #8
 8006e00:	4413      	add	r3, r2
 8006e02:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8006e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	3240      	adds	r2, #64	; 0x40
 8006e0e:	3302      	adds	r3, #2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	33a8      	adds	r3, #168	; 0xa8
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	440b      	add	r3, r1
 8006e1a:	f843 2c94 	str.w	r2, [r3, #-148]
				break;
 8006e1e:	e00a      	b.n	8006e36 <writeFile+0xa04>
		for (i = 0; i < index; i++) {											// Iterate through open memory segments
 8006e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e24:	3301      	adds	r3, #1
 8006e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e2a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e32:	429a      	cmp	r2, r3
 8006e34:	dba6      	blt.n	8006d84 <writeFile+0x952>
		}
	}


	/* rewrite the directory INode */
	if (writeINode(INodes, INodeNumbers, numINodes, 0, baseDir) == 0) {
 8006e36:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 8006e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	f897 c0a1 	ldrb.w	ip, [r7, #161]	; 0xa1
 8006e42:	466d      	mov	r5, sp
 8006e44:	f107 041c 	add.w	r4, r7, #28
 8006e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006e54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4662      	mov	r2, ip
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f000 fdf0 	bl	8007a44 <writeINode>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d11a      	bne.n	8006ea0 <writeFile+0xa6e>
		free(INodes);
 8006e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f009 ff78 	bl	8010d64 <free>
		free(INodeNumbers);
 8006e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e76:	4618      	mov	r0, r3
 8006e78:	f009 ff74 	bl	8010d64 <free>
		free(startFreeMemory);
 8006e7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006e80:	f009 ff70 	bl	8010d64 <free>
		free(endFreeMemory);
 8006e84:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006e88:	f009 ff6c 	bl	8010d64 <free>
		free(startPointers);
 8006e8c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006e90:	f009 ff68 	bl	8010d64 <free>
		free(endPointers);
 8006e94:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006e98:	f009 ff64 	bl	8010d64 <free>
		return -5;																	// Failed to write INodes
 8006e9c:	23fb      	movs	r3, #251	; 0xfb
 8006e9e:	e089      	b.n	8006fb4 <writeFile+0xb82>
	}
	HAL_Delay(1);
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f001 fb3b 	bl	800851c <HAL_Delay>


	/* 4.) Write the file type and the name of the new file to the directory file */
	/* TODO: determine the current directory */

	uint8_t *directoryEntry = malloc(1+NAME_LIM);
 8006ea6:	2040      	movs	r0, #64	; 0x40
 8006ea8:	f009 ff54 	bl	8010d54 <malloc>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// If we made new pointers start from the new start pointer.
	// If we extened an old pointer, start from the end pointer minus len
	uint32_t dirAddr = needNewPointer ? baseDir.addr[j] : (baseDir.addr[j] - 1 - NAME_LIM);
 8006eb2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <writeFile+0xa9e>
 8006eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	33a8      	adds	r3, #168	; 0xa8
 8006ec4:	f107 0208 	add.w	r2, r7, #8
 8006ec8:	4413      	add	r3, r2
 8006eca:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006ece:	e00a      	b.n	8006ee6 <writeFile+0xab4>
 8006ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	33a8      	adds	r3, #168	; 0xa8
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	4413      	add	r3, r2
 8006ee0:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006ee4:	3b40      	subs	r3, #64	; 0x40
 8006ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	directoryEntry[0] = newINodeNumber;
 8006eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eee:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 8006ef2:	701a      	strb	r2, [r3, #0]

	memcpy(directoryEntry+1, newFilename, NAME_LIM);
 8006ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ef8:	3301      	adds	r3, #1
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	68f9      	ldr	r1, [r7, #12]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f00b facf 	bl	80124a2 <memcpy>


	if(writeData(directoryEntry, dirAddr, 1+NAME_LIM) == 0) {
 8006f04:	2240      	movs	r2, #64	; 0x40
 8006f06:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006f0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006f0e:	f7fe fb31 	bl	8005574 <writeData>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d11e      	bne.n	8006f56 <writeFile+0xb24>
		free(directoryEntry);
 8006f18:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006f1c:	f009 ff22 	bl	8010d64 <free>
		free(INodes);
 8006f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f24:	4618      	mov	r0, r3
 8006f26:	f009 ff1d 	bl	8010d64 <free>
		free(INodeNumbers);
 8006f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f009 ff19 	bl	8010d64 <free>
		free(startFreeMemory);
 8006f32:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006f36:	f009 ff15 	bl	8010d64 <free>
		free(endFreeMemory);
 8006f3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006f3e:	f009 ff11 	bl	8010d64 <free>
		free(startPointers);
 8006f42:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006f46:	f009 ff0d 	bl	8010d64 <free>
		free(endPointers);
 8006f4a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006f4e:	f009 ff09 	bl	8010d64 <free>
		return 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e02e      	b.n	8006fb4 <writeFile+0xb82>
	}

	free(directoryEntry);
 8006f56:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006f5a:	f009 ff03 	bl	8010d64 <free>
	free(INodes);
 8006f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f62:	4618      	mov	r0, r3
 8006f64:	f009 fefe 	bl	8010d64 <free>
	free(INodeNumbers);
 8006f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f009 fefa 	bl	8010d64 <free>
	free(startFreeMemory);
 8006f70:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006f74:	f009 fef6 	bl	8010d64 <free>
	free(endFreeMemory);
 8006f78:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006f7c:	f009 fef2 	bl	8010d64 <free>
	free(startPointers);
 8006f80:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006f84:	f009 feee 	bl	8010d64 <free>
	free(endPointers);
 8006f88:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006f8c:	f009 feea 	bl	8010d64 <free>


	HAL_Delay(1);
 8006f90:	2001      	movs	r0, #1
 8006f92:	f001 fac3 	bl	800851c <HAL_Delay>


	/* 5.) Write the file to memory */
	// TODO : Update for case that multiple addr pairs are needed
	if (writeData(file, newFile.addr[0], len) == 0)
 8006f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6978      	ldr	r0, [r7, #20]
 8006f9e:	f7fe fae9 	bl	8005574 <writeData>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <writeFile+0xb7a>
		return 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e003      	b.n	8006fb4 <writeFile+0xb82>


	HAL_Delay(1);
 8006fac:	2001      	movs	r0, #1
 8006fae:	f001 fab5 	bl	800851c <HAL_Delay>


	return 1;
 8006fb2:	2301      	movs	r3, #1

}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	37b4      	adds	r7, #180	; 0xb4
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fbc <deleteINode>:


uint8_t deleteINode(uint8_t INodeNumber) {
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	b0b7      	sub	sp, #220	; 0xdc
 8006fc0:	af0c      	add	r7, sp, #48	; 0x30
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
	struct INode *INodes = malloc(0);
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f009 fec4 	bl	8010d54 <malloc>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *INodeNumbers = malloc(0);
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f009 febf 	bl	8010d54 <malloc>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t numINodes;
	uint8_t INodeIndex;
	int i;

	/* 1.) Read all INodes */
	numINodes = readINodes(&INodes, &INodeNumbers);
 8006fda:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006fde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 feb3 	bl	8007d50 <readINodes>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d


	// Check if the file to delete exists
	for (i = 0; i < numINodes; i++) {
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ff6:	e00c      	b.n	8007012 <deleteINode+0x56>
		if (INodeNumber == INodeNumbers[i]) {
 8006ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ffe:	4413      	add	r3, r2
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	79fa      	ldrb	r2, [r7, #7]
 8007004:	429a      	cmp	r2, r3
 8007006:	d00b      	beq.n	8007020 <deleteINode+0x64>
	for (i = 0; i < numINodes; i++) {
 8007008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800700c:	3301      	adds	r3, #1
 800700e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007012:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007016:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800701a:	429a      	cmp	r2, r3
 800701c:	dbec      	blt.n	8006ff8 <deleteINode+0x3c>
 800701e:	e000      	b.n	8007022 <deleteINode+0x66>
			break;
 8007020:	bf00      	nop
		}
	}
	// return if file does not exist
	if (i == numINodes) {
 8007022:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007026:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800702a:	429a      	cmp	r2, r3
 800702c:	d10a      	bne.n	8007044 <deleteINode+0x88>
		free(INodeNumbers);
 800702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007030:	4618      	mov	r0, r3
 8007032:	f009 fe97 	bl	8010d64 <free>
		free(INodes);
 8007036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007038:	4618      	mov	r0, r3
 800703a:	f009 fe93 	bl	8010d64 <free>
		return 0;
 800703e:	2300      	movs	r3, #0
 8007040:	f000 bcfc 	b.w	8007a3c <deleteINode+0xa80>
	}

	INodeIndex = i;
 8007044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007048:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

	/* 2.) Read current directory file and remove entry. save as array to write later (step 8) */
	// TODO : DO current dir instead of base dir
	uint8_t *file = readFile(INodes[0]);
 800704c:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800704e:	466d      	mov	r5, sp
 8007050:	f106 0410 	add.w	r4, r6, #16
 8007054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007058:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800705c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007060:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007064:	f7ff f934 	bl	80062d0 <readFile>
 8007068:	67b8      	str	r0, [r7, #120]	; 0x78
	uint8_t numFiles = INodes[0].fileSize / (NAME_LIM+1);
 800706a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	099b      	lsrs	r3, r3, #6
 8007070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	for (i = 0; i < numFiles; i++) {
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800707a:	e026      	b.n	80070ca <deleteINode+0x10e>
		// find the directory entry that needs to be deleted.
		if (file[i * 64] == INodeNumber) {									// Each directory entry is 64 bytes (1 bytes num, 63 bytes str)
 800707c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007080:	019b      	lsls	r3, r3, #6
 8007082:	461a      	mov	r2, r3
 8007084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007086:	4413      	add	r3, r2
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	79fa      	ldrb	r2, [r7, #7]
 800708c:	429a      	cmp	r2, r3
 800708e:	d117      	bne.n	80070c0 <deleteINode+0x104>
			// (start addr of entry remove, start of next entry, size)
			// size = 64 bytes * number of entries left
			memcpy(file + (i * (NAME_LIM+1)),
 8007090:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007094:	019b      	lsls	r3, r3, #6
 8007096:	461a      	mov	r2, r3
 8007098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709a:	1898      	adds	r0, r3, r2
				   file + ((i + 1) * (NAME_LIM+1)),
 800709c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070a0:	3301      	adds	r3, #1
 80070a2:	019b      	lsls	r3, r3, #6
 80070a4:	461a      	mov	r2, r3
 80070a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070a8:	1899      	adds	r1, r3, r2
				   (NAME_LIM+1)*(numFiles - 1 - i));
 80070aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80070ae:	1e5a      	subs	r2, r3, #1
 80070b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	019b      	lsls	r3, r3, #6
			memcpy(file + (i * (NAME_LIM+1)),
 80070b8:	461a      	mov	r2, r3
 80070ba:	f00b f9f2 	bl	80124a2 <memcpy>
			// case 2
			// three files: 0, 1, 2
			// delete 2 - i=1 when match
			// size 64 = 64*(numFiles-1) - 64*i = 64*2-64 = 64

			break;
 80070be:	e00a      	b.n	80070d6 <deleteINode+0x11a>
	for (i = 0; i < numFiles; i++) {
 80070c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80070ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80070d2:	429a      	cmp	r2, r3
 80070d4:	dbd2      	blt.n	800707c <deleteINode+0xc0>
		}

	}

	uint32_t newLength = (numINodes - 2) * 64;
 80070d6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80070da:	3b02      	subs	r3, #2
 80070dc:	019b      	lsls	r3, r3, #6
 80070de:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t startSector;
	uint32_t endSector;



	for (i = 0; i < 5; i++) {
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070e6:	e0c5      	b.n	8007274 <deleteINode+0x2b8>
		startPointer = INodes[INodeIndex].addr[i*2];
 80070e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ea:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	440b      	add	r3, r1
 80070f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80070fc:	0052      	lsls	r2, r2, #1
 80070fe:	3202      	adds	r2, #2
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	66fb      	str	r3, [r7, #108]	; 0x6c
		startSector = startPointer & 0x7F000;
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	f403 23fe 	and.w	r3, r3, #520192	; 0x7f000
 800710c:	66bb      	str	r3, [r7, #104]	; 0x68
		endPointer = INodes[INodeIndex].addr[i*2+1];
 800710e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007110:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8007114:	4613      	mov	r3, r2
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	4413      	add	r3, r2
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	440b      	add	r3, r1
 800711e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007122:	0052      	lsls	r2, r2, #1
 8007124:	3201      	adds	r2, #1
 8007126:	3202      	adds	r2, #2
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	667b      	str	r3, [r7, #100]	; 0x64
		endSector = endPointer & 0x7F000;
 800712e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007130:	f403 23fe 	and.w	r3, r3, #520192	; 0x7f000
 8007134:	663b      	str	r3, [r7, #96]	; 0x60

		if (startPointer == 0 || endPointer == 0)
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80a0 	beq.w	800727e <deleteINode+0x2c2>
 800713e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 809c 	beq.w	800727e <deleteINode+0x2c2>
			break;

		// Simple case - Clear data in one sector
		if (startSector == endSector) {
 8007146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800714a:	429a      	cmp	r2, r3
 800714c:	d12d      	bne.n	80071aa <deleteINode+0x1ee>
			sector = readData(startSector, 0xFFF);
 800714e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007152:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007154:	f7fe fc0c 	bl	8005970 <readData>
 8007158:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			for (int j = (startPointer & 0xFFF); j <= (endPointer & 0xFFF); j++) {
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007166:	e00c      	b.n	8007182 <deleteINode+0x1c6>
				sector[j+4] = 0xFF;
 8007168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800716c:	3304      	adds	r3, #4
 800716e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007172:	4413      	add	r3, r2
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	701a      	strb	r2, [r3, #0]
			for (int j = (startPointer & 0xFFF); j <= (endPointer & 0xFFF); j++) {
 8007178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007184:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8007188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800718c:	429a      	cmp	r2, r3
 800718e:	d2eb      	bcs.n	8007168 <deleteINode+0x1ac>
			}

			sectorErase(startSector);
 8007190:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007192:	f7fe fd1d 	bl	8005bd0 <sectorErase>
			writeData(sector+4, startSector, 0xFFF);
 8007196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800719a:	3304      	adds	r3, #4
 800719c:	f640 72ff 	movw	r2, #4095	; 0xfff
 80071a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe f9e6 	bl	8005574 <writeData>
 80071a8:	e05b      	b.n	8007262 <deleteINode+0x2a6>
		}

		// Complex Case - Clear data that starts in one sector and ends in another
		else {
			sector = readData(startSector, 0xFFF);
 80071aa:	f640 71ff 	movw	r1, #4095	; 0xfff
 80071ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80071b0:	f7fe fbde 	bl	8005970 <readData>
 80071b4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			// Clear from start point to end pointer
			for (int j = (startPointer & 0xFFF); j <= 0xFFF; j++) {
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071c2:	e00c      	b.n	80071de <deleteINode+0x222>
				sector[j+4] = 0xFF;
 80071c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071c8:	3304      	adds	r3, #4
 80071ca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80071ce:	4413      	add	r3, r2
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	701a      	strb	r2, [r3, #0]
			for (int j = (startPointer & 0xFFF); j <= 0xFFF; j++) {
 80071d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071d8:	3301      	adds	r3, #1
 80071da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	dbed      	blt.n	80071c4 <deleteINode+0x208>
			}

			sectorErase(startSector);
 80071e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80071ea:	f7fe fcf1 	bl	8005bd0 <sectorErase>
			writeData(sector+4, startSector, 0xFFF);
 80071ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071f2:	3304      	adds	r3, #4
 80071f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80071f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe f9ba 	bl	8005574 <writeData>

			free(sector);
 8007200:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007204:	f009 fdae 	bl	8010d64 <free>

			sector = readData(endSector, 0xFFF);
 8007208:	f640 71ff 	movw	r1, #4095	; 0xfff
 800720c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800720e:	f7fe fbaf 	bl	8005970 <readData>
 8007212:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			// Clear from start point to end pointer
			for (int j = 0; j <= (endPointer & 0xFFF); j++) {
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800721c:	e00c      	b.n	8007238 <deleteINode+0x27c>
				sector[j+4] = 0xFF;
 800721e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007222:	3304      	adds	r3, #4
 8007224:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007228:	4413      	add	r3, r2
 800722a:	22ff      	movs	r2, #255	; 0xff
 800722c:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j <= (endPointer & 0xFFF); j++) {
 800722e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007232:	3301      	adds	r3, #1
 8007234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800723e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007242:	429a      	cmp	r2, r3
 8007244:	d2eb      	bcs.n	800721e <deleteINode+0x262>
			}

			sectorErase(endSector);
 8007246:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007248:	f7fe fcc2 	bl	8005bd0 <sectorErase>
			writeData(sector+4, endSector, (endPointer & 0xFFF) + 1);
 800724c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007250:	1d18      	adds	r0, r3, #4
 8007252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007258:	3301      	adds	r3, #1
 800725a:	461a      	mov	r2, r3
 800725c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800725e:	f7fe f989 	bl	8005574 <writeData>
		}

		free(sector);
 8007262:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007266:	f009 fd7d 	bl	8010d64 <free>
	for (i = 0; i < 5; i++) {
 800726a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800726e:	3301      	adds	r3, #1
 8007270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007278:	2b04      	cmp	r3, #4
 800727a:	f77f af35 	ble.w	80070e8 <deleteINode+0x12c>


	}
	sector = readData(RESERVED_ADDR, 526);
 800727e:	f240 210e 	movw	r1, #526	; 0x20e
 8007282:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8007286:	f7fe fb73 	bl	8005970 <readData>
 800728a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	free(sector);
 800728e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007292:	f009 fd67 	bl	8010d64 <free>



	/* 4.) Delete file INode */
	struct INode node;
	node.fileSize = 0xFFFFFFFF;
 8007296:	f04f 33ff 	mov.w	r3, #4294967295
 800729a:	613b      	str	r3, [r7, #16]
	node.fileType = 0xFF;
 800729c:	23ff      	movs	r3, #255	; 0xff
 800729e:	733b      	strb	r3, [r7, #12]
	memset(node.addr, 0xFF, sizeof(uint32_t) * 10);
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	3308      	adds	r3, #8
 80072a6:	2228      	movs	r2, #40	; 0x28
 80072a8:	21ff      	movs	r1, #255	; 0xff
 80072aa:	4618      	mov	r0, r3
 80072ac:	f00a fc61 	bl	8011b72 <memset>

	// Write the INode as all 0xFF to delete it
	writeINode(INodes, INodeNumbers, numINodes, INodeNumber, node);
 80072b0:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 80072b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	f897 e007 	ldrb.w	lr, [r7, #7]
 80072ba:	f897 c07d 	ldrb.w	ip, [r7, #125]	; 0x7d
 80072be:	466d      	mov	r5, sp
 80072c0:	f107 040c 	add.w	r4, r7, #12
 80072c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80072d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80072d4:	4673      	mov	r3, lr
 80072d6:	4662      	mov	r2, ip
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 fbb2 	bl	8007a44 <writeINode>


	/* 5.) Remove directory file from memory */
	for (i = 0; i < 5; i++) {
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072e6:	e0b7      	b.n	8007458 <deleteINode+0x49c>
		// TODO : Make this current directory
		startPointer = INodes[0].addr[i*2];
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80072ee:	0052      	lsls	r2, r2, #1
 80072f0:	3202      	adds	r2, #2
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	66fb      	str	r3, [r7, #108]	; 0x6c
		startSector = startPointer & 0x7F000;
 80072f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fa:	f403 23fe 	and.w	r3, r3, #520192	; 0x7f000
 80072fe:	66bb      	str	r3, [r7, #104]	; 0x68
		endPointer = INodes[0].addr[i*2+1];
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007306:	0052      	lsls	r2, r2, #1
 8007308:	3201      	adds	r2, #1
 800730a:	3202      	adds	r2, #2
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	667b      	str	r3, [r7, #100]	; 0x64
		endSector = endPointer & 0x7F000;
 8007312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007314:	f403 23fe 	and.w	r3, r3, #520192	; 0x7f000
 8007318:	663b      	str	r3, [r7, #96]	; 0x60

		if (startPointer == 0 || endPointer == 0)
 800731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80a0 	beq.w	8007462 <deleteINode+0x4a6>
 8007322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 809c 	beq.w	8007462 <deleteINode+0x4a6>
			break;

		// Simple case - Clear data in one sector
		if (startSector == endSector) {
 800732a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800732c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800732e:	429a      	cmp	r2, r3
 8007330:	d12d      	bne.n	800738e <deleteINode+0x3d2>
			sector = readData(startSector, 0xFFF);
 8007332:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007336:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007338:	f7fe fb1a 	bl	8005970 <readData>
 800733c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			for (int j = (startPointer & 0xFFF); j <= (endPointer & 0xFFF); j++) {
 8007340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800734a:	e00c      	b.n	8007366 <deleteINode+0x3aa>
				sector[j+4] = 0xFF;
 800734c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007350:	3304      	adds	r3, #4
 8007352:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007356:	4413      	add	r3, r2
 8007358:	22ff      	movs	r2, #255	; 0xff
 800735a:	701a      	strb	r2, [r3, #0]
			for (int j = (startPointer & 0xFFF); j <= (endPointer & 0xFFF); j++) {
 800735c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007360:	3301      	adds	r3, #1
 8007362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007368:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800736c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007370:	429a      	cmp	r2, r3
 8007372:	d2eb      	bcs.n	800734c <deleteINode+0x390>
			}

			sectorErase(startSector);
 8007374:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007376:	f7fe fc2b 	bl	8005bd0 <sectorErase>
			writeData(sector+4, startSector, 0xFFF);
 800737a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800737e:	3304      	adds	r3, #4
 8007380:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe f8f4 	bl	8005574 <writeData>
 800738c:	e05b      	b.n	8007446 <deleteINode+0x48a>
		}

		// Complex Case - Clear data that starts in one sector and ends in another
		else {
			sector = readData(startSector, 0xFFF);
 800738e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8007392:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007394:	f7fe faec 	bl	8005970 <readData>
 8007398:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			// Clear from start point to end pointer
			for (int j = (startPointer & 0xFFF); j <= 0xFFF; j++) {
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073a6:	e00c      	b.n	80073c2 <deleteINode+0x406>
				sector[j+4] = 0xFF;
 80073a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ac:	3304      	adds	r3, #4
 80073ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80073b2:	4413      	add	r3, r2
 80073b4:	22ff      	movs	r2, #255	; 0xff
 80073b6:	701a      	strb	r2, [r3, #0]
			for (int j = (startPointer & 0xFFF); j <= 0xFFF; j++) {
 80073b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073bc:	3301      	adds	r3, #1
 80073be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	dbed      	blt.n	80073a8 <deleteINode+0x3ec>
			}

			sectorErase(startSector);
 80073cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80073ce:	f7fe fbff 	bl	8005bd0 <sectorErase>
			writeData(sector+4, startSector, 0xFFF);
 80073d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073d6:	3304      	adds	r3, #4
 80073d8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80073dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe f8c8 	bl	8005574 <writeData>

			free(sector);
 80073e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80073e8:	f009 fcbc 	bl	8010d64 <free>

			sector = readData(endSector, 0xFFF);
 80073ec:	f640 71ff 	movw	r1, #4095	; 0xfff
 80073f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80073f2:	f7fe fabd 	bl	8005970 <readData>
 80073f6:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			// Clear from start point to end pointer
			for (int j = 0; j <= (endPointer & 0xFFF); j++) {
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007400:	e00c      	b.n	800741c <deleteINode+0x460>
				sector[j+4] = 0xFF;
 8007402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007406:	3304      	adds	r3, #4
 8007408:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800740c:	4413      	add	r3, r2
 800740e:	22ff      	movs	r2, #255	; 0xff
 8007410:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j <= (endPointer & 0xFFF); j++) {
 8007412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007416:	3301      	adds	r3, #1
 8007418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800741c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8007422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007426:	429a      	cmp	r2, r3
 8007428:	d2eb      	bcs.n	8007402 <deleteINode+0x446>
			}

			sectorErase(endSector);
 800742a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800742c:	f7fe fbd0 	bl	8005bd0 <sectorErase>
			writeData(sector+4, endSector, (endPointer & 0xFFF) + 1);
 8007430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007434:	1d18      	adds	r0, r3, #4
 8007436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800743c:	3301      	adds	r3, #1
 800743e:	461a      	mov	r2, r3
 8007440:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007442:	f7fe f897 	bl	8005574 <writeData>
		}

		free(sector);
 8007446:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800744a:	f009 fc8b 	bl	8010d64 <free>
	for (i = 0; i < 5; i++) {
 800744e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007452:	3301      	adds	r3, #1
 8007454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800745c:	2b04      	cmp	r3, #4
 800745e:	f77f af43 	ble.w	80072e8 <deleteINode+0x32c>
	}


	/* 6.) Write new base dir */
	node.fileSize = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	613b      	str	r3, [r7, #16]
	node.fileType = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	733b      	strb	r3, [r7, #12]
	memset(node.addr, 0, sizeof(uint32_t) * 10);
 800746a:	f107 030c 	add.w	r3, r7, #12
 800746e:	3308      	adds	r3, #8
 8007470:	2228      	movs	r2, #40	; 0x28
 8007472:	2100      	movs	r1, #0
 8007474:	4618      	mov	r0, r3
 8007476:	f00a fb7c 	bl	8011b72 <memset>

	numINodes = readINodes(&INodes, &INodeNumbers);
 800747a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800747e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fc63 	bl	8007d50 <readINodes>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d


	// set the base dir as all empty so we can find open memory
	INodes[0] = node;
 8007490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007492:	461d      	mov	r5, r3
 8007494:	f107 040c 	add.w	r4, r7, #12
 8007498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800749a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800749c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800749e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80074a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	// a.) Find open memory to write directory to
	node.fileSize = newLength;
 80074a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074aa:	613b      	str	r3, [r7, #16]

	uint8_t needNewPointer = 1;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	int j;
	uint16_t numPointers = numINodes*5;
 80074b2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	4413      	add	r3, r2
 80074be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t *startFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 80074c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f009 fc43 	bl	8010d54 <malloc>
 80074ce:	4603      	mov	r3, r0
 80074d0:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t *endFreeMemory = malloc(sizeof(uint32_t) * numPointers);
 80074d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4618      	mov	r0, r3
 80074da:	f009 fc3b 	bl	8010d54 <malloc>
 80074de:	4603      	mov	r3, r0
 80074e0:	657b      	str	r3, [r7, #84]	; 0x54
	memset(startFreeMemory, 0, numPointers * 4);
 80074e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	461a      	mov	r2, r3
 80074ea:	2100      	movs	r1, #0
 80074ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80074ee:	f00a fb40 	bl	8011b72 <memset>
	memset(endFreeMemory, 0, numPointers * 4);
 80074f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	461a      	mov	r2, r3
 80074fa:	2100      	movs	r1, #0
 80074fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80074fe:	f00a fb38 	bl	8011b72 <memset>


	uint32_t *startPointers = malloc(sizeof(uint32_t) * numPointers);
 8007502:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4618      	mov	r0, r3
 800750a:	f009 fc23 	bl	8010d54 <malloc>
 800750e:	4603      	mov	r3, r0
 8007510:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t *endPointers = malloc(sizeof(uint32_t) * numPointers);
 8007512:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4618      	mov	r0, r3
 800751a:	f009 fc1b 	bl	8010d54 <malloc>
 800751e:	4603      	mov	r3, r0
 8007520:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t index;

	// a.) Make lists of starting and ending pointers
	for (i = 0; i < numINodes; i++) {
 8007522:	2300      	movs	r3, #0
 8007524:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007528:	e046      	b.n	80075b8 <deleteINode+0x5fc>
		for (j = 0; j < 5; j++) {
 800752a:	2300      	movs	r3, #0
 800752c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007530:	e039      	b.n	80075a6 <deleteINode+0x5ea>
			startPointers[i*5 +j] = INodes[i].addr[j*2];
 8007532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007534:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007538:	4613      	mov	r3, r2
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	4413      	add	r3, r2
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	4419      	add	r1, r3
 8007542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007546:	0058      	lsls	r0, r3, #1
 8007548:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800755c:	4413      	add	r3, r2
 800755e:	1c82      	adds	r2, r0, #2
 8007560:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007564:	601a      	str	r2, [r3, #0]
			endPointers[i*5 + j] = INodes[i].addr[j*2 +1];
 8007566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007568:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800756c:	4613      	mov	r3, r2
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4413      	add	r3, r2
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4419      	add	r1, r3
 8007576:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	1c58      	adds	r0, r3, #1
 800757e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007592:	4413      	add	r3, r2
 8007594:	1c82      	adds	r2, r0, #2
 8007596:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800759a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 5; j++) {
 800759c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	ddc1      	ble.n	8007532 <deleteINode+0x576>
	for (i = 0; i < numINodes; i++) {
 80075ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075b2:	3301      	adds	r3, #1
 80075b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075b8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80075bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80075c0:	429a      	cmp	r2, r3
 80075c2:	dbb2      	blt.n	800752a <deleteINode+0x56e>
		}
	}

	// b.) Sort startPointers, make identical swaps to endPointers array
	sort(startPointers, endPointers, numPointers);
 80075c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80075c8:	461a      	mov	r2, r3
 80075ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80075cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80075ce:	f000 fde1 	bl	8008194 <sort>

	// c.) Find empty memory segments between used ones
	memset(startFreeMemory, 0, numPointers * 4);
 80075d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	461a      	mov	r2, r3
 80075da:	2100      	movs	r1, #0
 80075dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80075de:	f00a fac8 	bl	8011b72 <memset>
	memset(endFreeMemory, 0, numPointers * 4);
 80075e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	461a      	mov	r2, r3
 80075ea:	2100      	movs	r1, #0
 80075ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80075ee:	f00a fac0 	bl	8011b72 <memset>
	index = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	// Check if there is space open at start of mem
	if (startPointers[0] > RESERVED_ADDR) {
 80075f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007600:	d315      	bcc.n	800762e <deleteINode+0x672>
	    startFreeMemory[index] = RESERVED_ADDR;
 8007602:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800760a:	4413      	add	r3, r2
 800760c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007610:	601a      	str	r2, [r3, #0]
	    endFreeMemory[index] = startPointers[0] - 1;
 8007612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800761e:	440b      	add	r3, r1
 8007620:	3a01      	subs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
	    index++;
 8007624:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8007628:	3301      	adds	r3, #1
 800762a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	}

	// Check if there are open segments between data
	for (i = 0; i < numPointers; i++) {								// Iterate through pointer pairs
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007634:	e04a      	b.n	80076cc <deleteINode+0x710>
		if (startPointers[i] == 0) {								// If the start is 0 then its blank, skip
 8007636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800763e:	4413      	add	r3, r2
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03c      	beq.n	80076c0 <deleteINode+0x704>
			continue;
		}

		// Calculate the available memory segment between two used segments
		// If end is less than start it means there is no space between segments
		if ((endPointers[i] + 1) < (startPointers[i + 1] - 1) && (startPointers[i+1] - 1 < END_ADDR)) {
 8007646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800764e:	4413      	add	r3, r2
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007658:	3301      	adds	r3, #1
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800765e:	440b      	add	r3, r1
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	d22c      	bcs.n	80076c2 <deleteINode+0x706>
 8007668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800766c:	3301      	adds	r3, #1
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007672:	4413      	add	r3, r2
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800767c:	d221      	bcs.n	80076c2 <deleteINode+0x706>
			startFreeMemory[index] = endPointers[i] + 1;
 800767e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007686:	4413      	add	r3, r2
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007692:	440b      	add	r3, r1
 8007694:	3201      	adds	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
			endFreeMemory[index] = startPointers[i + 1] - 1;
 8007698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800769c:	3301      	adds	r3, #1
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076a2:	4413      	add	r3, r2
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076ae:	440b      	add	r3, r1
 80076b0:	3a01      	subs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
			index++;
 80076b4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80076be:	e000      	b.n	80076c2 <deleteINode+0x706>
			continue;
 80076c0:	bf00      	nop
	for (i = 0; i < numPointers; i++) {								// Iterate through pointer pairs
 80076c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076c6:	3301      	adds	r3, #1
 80076c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80076d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80076d4:	429a      	cmp	r2, r3
 80076d6:	dbae      	blt.n	8007636 <deleteINode+0x67a>
		}

	}

	// Check if there is space open at end of mem
	if (endPointers[numPointers - 1] < END_ADDR) {
 80076d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80076dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076e0:	3b01      	subs	r3, #1
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076e6:	4413      	add	r3, r2
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076ee:	d230      	bcs.n	8007752 <deleteINode+0x796>
		if (endPointers[numPointers - 1] == 0) {							// This shoudl indicate that nothing is in memory, so all of it is open
 80076f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80076f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076f8:	3b01      	subs	r3, #1
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076fe:	4413      	add	r3, r2
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d108      	bne.n	8007718 <deleteINode+0x75c>
			startFreeMemory[index] = RESERVED_ADDR+1;
 8007706:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800770e:	4413      	add	r3, r2
 8007710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e00f      	b.n	8007738 <deleteINode+0x77c>
		}
		else {
			startFreeMemory[index] = endPointers[numPointers - 1] + 1;
 8007718:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800771c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007720:	3b01      	subs	r3, #1
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007726:	4413      	add	r3, r2
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007732:	440b      	add	r3, r1
 8007734:	3201      	adds	r2, #1
 8007736:	601a      	str	r2, [r3, #0]
		}

	    endFreeMemory[index] = END_ADDR;
 8007738:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007740:	4413      	add	r3, r2
 8007742:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007746:	601a      	str	r2, [r3, #0]
	    index++;
 8007748:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800774c:	3301      	adds	r3, #1
 800774e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	}

	// Find end of data in pointers
	for (j = 9; j > 0; j -= 2) {
 8007752:	2309      	movs	r3, #9
 8007754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007758:	e00f      	b.n	800777a <deleteINode+0x7be>
		if (node.addr[j] == 0) {									// If the addr is empty go to next one
 800775a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800775e:	3302      	adds	r3, #2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	33a8      	adds	r3, #168	; 0xa8
 8007764:	443b      	add	r3, r7
 8007766:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <deleteINode+0x7c8>
			continue;
 800776e:	bf00      	nop
	for (j = 9; j > 0; j -= 2) {
 8007770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007774:	3b02      	subs	r3, #2
 8007776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800777a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800777e:	2b00      	cmp	r3, #0
 8007780:	dceb      	bgt.n	800775a <deleteINode+0x79e>
 8007782:	e000      	b.n	8007786 <deleteINode+0x7ca>
		}
		else
			break;													// If addr is not empty it is end of data
 8007784:	bf00      	nop
	}

	if (j == -1) {													// If there are no pointers
 8007786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778e:	d103      	bne.n	8007798 <deleteINode+0x7dc>
		// J needs to be set to 0, do that in needNewPointer if
		needNewPointer = 1;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007796:	e047      	b.n	8007828 <deleteINode+0x86c>
	}
	else {
		// If there is more room at end add on to the last pointer
		for (i = 0; i < index; i++) {
 8007798:	2300      	movs	r3, #0
 800779a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800779e:	e03d      	b.n	800781c <deleteINode+0x860>
			// If there is room at the end of the last pointer add on
			if (((node.addr[j] + NAME_LIM+1) > startFreeMemory[i]) &&
 80077a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077a4:	3302      	adds	r3, #2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	33a8      	adds	r3, #168	; 0xa8
 80077aa:	443b      	add	r3, r7
 80077ac:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80077b0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80077b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077bc:	440b      	add	r3, r1
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d926      	bls.n	8007812 <deleteINode+0x856>
				((node.addr[j] + NAME_LIM+1) < endFreeMemory[i])) {
 80077c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077c8:	3302      	adds	r3, #2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	33a8      	adds	r3, #168	; 0xa8
 80077ce:	443b      	add	r3, r7
 80077d0:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80077d4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80077d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077e0:	440b      	add	r3, r1
 80077e2:	681b      	ldr	r3, [r3, #0]
			if (((node.addr[j] + NAME_LIM+1) > startFreeMemory[i]) &&
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d214      	bcs.n	8007812 <deleteINode+0x856>
				node.addr[j] += NAME_LIM+1;										// Extend pointer
 80077e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077ec:	3302      	adds	r3, #2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	33a8      	adds	r3, #168	; 0xa8
 80077f2:	443b      	add	r3, r7
 80077f4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80077f8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80077fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007800:	3302      	adds	r3, #2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	33a8      	adds	r3, #168	; 0xa8
 8007806:	443b      	add	r3, r7
 8007808:	f843 2c9c 	str.w	r2, [r3, #-156]
				needNewPointer = 0;													// Set flag so new pointers arent added
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		for (i = 0; i < index; i++) {
 8007812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007816:	3301      	adds	r3, #1
 8007818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800781c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8007820:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007824:	429a      	cmp	r2, r3
 8007826:	dbbb      	blt.n	80077a0 <deleteINode+0x7e4>
			}
		}
	}

	//TODO : TEST THIS SHIT.. Pretty sure it works
	if (needNewPointer) {														// If the last pointer could not be extended
 8007828:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800782c:	2b00      	cmp	r3, #0
 800782e:	d062      	beq.n	80078f6 <deleteINode+0x93a>
		if (j == 9) {
 8007830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007834:	2b09      	cmp	r3, #9
 8007836:	d115      	bne.n	8007864 <deleteINode+0x8a8>
			free(INodes);
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	4618      	mov	r0, r3
 800783c:	f009 fa92 	bl	8010d64 <free>
			free(INodeNumbers);
 8007840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007842:	4618      	mov	r0, r3
 8007844:	f009 fa8e 	bl	8010d64 <free>
			free(startFreeMemory);
 8007848:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800784a:	f009 fa8b 	bl	8010d64 <free>
			free(endFreeMemory);
 800784e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007850:	f009 fa88 	bl	8010d64 <free>
			free(startPointers);
 8007854:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007856:	f009 fa85 	bl	8010d64 <free>
			free(endPointers);
 800785a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800785c:	f009 fa82 	bl	8010d64 <free>
			return -1;															// And we have used all 5 pointer pairs, we are too fragmented
 8007860:	23ff      	movs	r3, #255	; 0xff
 8007862:	e0eb      	b.n	8007a3c <deleteINode+0xa80>
		}
		j += 1;																	// Increment 1 to move from previous ending pointer to new starting pointer
 8007864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007868:	3301      	adds	r3, #1
 800786a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// TODO URG: If there is not one segment big enough use multiple
		for (i = 0; i < index; i++) {											// Iterate through open memory segments
 800786e:	2300      	movs	r3, #0
 8007870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007874:	e037      	b.n	80078e6 <deleteINode+0x92a>
			if (endFreeMemory[i] - startFreeMemory[i] > node.fileSize) {		// If the segment is big enough to hold the new data
 8007876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800787e:	4413      	add	r3, r2
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800788a:	440b      	add	r3, r1
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	429a      	cmp	r2, r3
 8007894:	d922      	bls.n	80078dc <deleteINode+0x920>
				if (node.fileSize > 0) {
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02b      	beq.n	80078f4 <deleteINode+0x938>
					node.addr[j]   = startFreeMemory[i];							// Store the data at the start of the open memory
 800789c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a4:	4413      	add	r3, r2
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ac:	3302      	adds	r3, #2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	33a8      	adds	r3, #168	; 0xa8
 80078b2:	443b      	add	r3, r7
 80078b4:	f843 2c9c 	str.w	r2, [r3, #-156]
					node.addr[j+1] = startFreeMemory[i] + node.fileSize;
 80078b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c0:	4413      	add	r3, r2
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ca:	3301      	adds	r3, #1
 80078cc:	440a      	add	r2, r1
 80078ce:	3302      	adds	r3, #2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	33a8      	adds	r3, #168	; 0xa8
 80078d4:	443b      	add	r3, r7
 80078d6:	f843 2c9c 	str.w	r2, [r3, #-156]
				}
				break;
 80078da:	e00b      	b.n	80078f4 <deleteINode+0x938>
		for (i = 0; i < index; i++) {											// Iterate through open memory segments
 80078dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078e0:	3301      	adds	r3, #1
 80078e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078e6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80078ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80078ee:	429a      	cmp	r2, r3
 80078f0:	dbc1      	blt.n	8007876 <deleteINode+0x8ba>
 80078f2:	e000      	b.n	80078f6 <deleteINode+0x93a>
				break;
 80078f4:	bf00      	nop
	}



	/* 7.) Write directory INode to memory */
	if (writeINode(INodes, INodeNumbers, numINodes, 0, node) == 0) {
 80078f6:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 80078f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	f897 c07d 	ldrb.w	ip, [r7, #125]	; 0x7d
 8007900:	466d      	mov	r5, sp
 8007902:	f107 040c 	add.w	r4, r7, #12
 8007906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800790a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800790c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800790e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007912:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007916:	2300      	movs	r3, #0
 8007918:	4662      	mov	r2, ip
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	4630      	mov	r0, r6
 800791e:	f000 f891 	bl	8007a44 <writeINode>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d115      	bne.n	8007954 <deleteINode+0x998>
		free(INodes);
 8007928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792a:	4618      	mov	r0, r3
 800792c:	f009 fa1a 	bl	8010d64 <free>
		free(INodeNumbers);
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	4618      	mov	r0, r3
 8007934:	f009 fa16 	bl	8010d64 <free>
		free(startPointers);
 8007938:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800793a:	f009 fa13 	bl	8010d64 <free>
		free(endPointers);
 800793e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007940:	f009 fa10 	bl	8010d64 <free>
		free(startFreeMemory);
 8007944:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007946:	f009 fa0d 	bl	8010d64 <free>
		free(endFreeMemory);
 800794a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800794c:	f009 fa0a 	bl	8010d64 <free>
		return -5;																	// Failed to write INodes
 8007950:	23fb      	movs	r3, #251	; 0xfb
 8007952:	e073      	b.n	8007a3c <deleteINode+0xa80>

	/* 8.) rewrite directory to memory */
	/* TODO: determine the current directory */

	// ----- TODOD: DELETE ME-----
	uint8_t * file__ = readFile(node);
 8007954:	466d      	mov	r5, sp
 8007956:	f107 041c 	add.w	r4, r7, #28
 800795a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800795c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800795e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007962:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800796c:	f7fe fcb0 	bl	80062d0 <readFile>
 8007970:	64b8      	str	r0, [r7, #72]	; 0x48
	free(file__);
 8007972:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007974:	f009 f9f6 	bl	8010d64 <free>



	// If we made new pointers start from the new start pointer.
	// If we extened an old pointer, start from the end pointer minus len
	uint32_t dirAddr = needNewPointer ? node.addr[j] : (node.addr[j] - 1 - NAME_LIM);
 8007978:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <deleteINode+0x9d6>
 8007980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007984:	3302      	adds	r3, #2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	33a8      	adds	r3, #168	; 0xa8
 800798a:	443b      	add	r3, r7
 800798c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8007990:	e008      	b.n	80079a4 <deleteINode+0x9e8>
 8007992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007996:	3302      	adds	r3, #2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	33a8      	adds	r3, #168	; 0xa8
 800799c:	443b      	add	r3, r7
 800799e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80079a2:	3b40      	subs	r3, #64	; 0x40
 80079a4:	647b      	str	r3, [r7, #68]	; 0x44

	if (newLength != 0) {
 80079a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01d      	beq.n	80079e8 <deleteINode+0xa2c>
		if(writeData(file, dirAddr, newLength) == 0) {
 80079ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80079b2:	f7fd fddf 	bl	8005574 <writeData>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d115      	bne.n	80079e8 <deleteINode+0xa2c>
			free(INodes);
 80079bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f009 f9d0 	bl	8010d64 <free>
			free(INodeNumbers);
 80079c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c6:	4618      	mov	r0, r3
 80079c8:	f009 f9cc 	bl	8010d64 <free>
			free(startFreeMemory);
 80079cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80079ce:	f009 f9c9 	bl	8010d64 <free>
			free(endFreeMemory);
 80079d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80079d4:	f009 f9c6 	bl	8010d64 <free>
			free(startPointers);
 80079d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80079da:	f009 f9c3 	bl	8010d64 <free>
			free(endPointers);
 80079de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80079e0:	f009 f9c0 	bl	8010d64 <free>
			return 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e029      	b.n	8007a3c <deleteINode+0xa80>
		}
	}


	free(INodes);
 80079e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ea:	4618      	mov	r0, r3
 80079ec:	f009 f9ba 	bl	8010d64 <free>
	free(INodeNumbers);
 80079f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f2:	4618      	mov	r0, r3
 80079f4:	f009 f9b6 	bl	8010d64 <free>

	free(startFreeMemory);
 80079f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80079fa:	f009 f9b3 	bl	8010d64 <free>
	free(endFreeMemory);
 80079fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a00:	f009 f9b0 	bl	8010d64 <free>
	free(startPointers);
 8007a04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007a06:	f009 f9ad 	bl	8010d64 <free>
	free(endPointers);
 8007a0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007a0c:	f009 f9aa 	bl	8010d64 <free>
	free(file);
 8007a10:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007a12:	f009 f9a7 	bl	8010d64 <free>


	// ----- TODOD: DELETE ME-----
	file__ = readFile(node);
 8007a16:	466d      	mov	r5, sp
 8007a18:	f107 041c 	add.w	r4, r7, #28
 8007a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007a24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007a28:	f107 030c 	add.w	r3, r7, #12
 8007a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a2e:	f7fe fc4f 	bl	80062d0 <readFile>
 8007a32:	64b8      	str	r0, [r7, #72]	; 0x48
	free(file__);
 8007a34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007a36:	f009 f995 	bl	8010d64 <free>
//	uint8_t *INodeNumbers__ = malloc(0);
//	uint8_t numINodes__;
//
//	numINodes__ = readINodes(&INodes__, &INodeNumbers__);

	return 1;
 8007a3a:	2301      	movs	r3, #1
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	37ac      	adds	r7, #172	; 0xac
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a44 <writeINode>:


uint8_t writeINode(struct INode *INodes, uint8_t *INodeNumbers, uint8_t numINodes, uint8_t INodeNumber, struct INode node) {
 8007a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a46:	b093      	sub	sp, #76	; 0x4c
 8007a48:	af0a      	add	r7, sp, #40	; 0x28
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	460b      	mov	r3, r1
 8007a54:	71fb      	strb	r3, [r7, #7]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71bb      	strb	r3, [r7, #6]
	uint8_t *INodeArray = malloc(INODE_SIZE+4);
 8007a5a:	2026      	movs	r0, #38	; 0x26
 8007a5c:	f009 f97a 	bl	8010d54 <malloc>
 8007a60:	4603      	mov	r3, r0
 8007a62:	61bb      	str	r3, [r7, #24]
	int i;
	uint32_t INodeAddr = INODE_SIZE * INodeNumber;										// The addr is an offset from 0. multiply number by struct size in bytes
 8007a64:	79ba      	ldrb	r2, [r7, #6]
 8007a66:	4613      	mov	r3, r2
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	4413      	add	r3, r2
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]


	// Check if the INode already exists
	for (i = 0; i < numINodes; i++) {
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e009      	b.n	8007a8a <writeINode+0x46>
		if (INodeNumber == INodeNumbers[i]) {
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	79ba      	ldrb	r2, [r7, #6]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d007      	beq.n	8007a94 <writeINode+0x50>
	for (i = 0; i < numINodes; i++) {
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	dbf1      	blt.n	8007a76 <writeINode+0x32>
 8007a92:	e000      	b.n	8007a96 <writeINode+0x52>
			break;
 8007a94:	bf00      	nop
		}
	}

	/* If this is a new node */
	if (i == numINodes) {
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d11c      	bne.n	8007ad8 <writeINode+0x94>
		structToArray(node, INodeArray);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	466d      	mov	r5, sp
 8007aa4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8007aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007aac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007ab0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007aba:	f000 fafa 	bl	80080b2 <structToArray>

		if (writeData(INodeArray, INodeAddr, INODE_SIZE) == 0) {
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	6979      	ldr	r1, [r7, #20]
 8007ac2:	69b8      	ldr	r0, [r7, #24]
 8007ac4:	f7fd fd56 	bl	8005574 <writeData>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d164      	bne.n	8007b98 <writeINode+0x154>
			free(INodeArray);
 8007ace:	69b8      	ldr	r0, [r7, #24]
 8007ad0:	f009 f948 	bl	8010d64 <free>
			return 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e063      	b.n	8007ba0 <writeINode+0x15c>
		}
	}

	/* If this is a modification of a current node */
	else {
		  if (sectorErase(0x000000) == 0)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f7fe f879 	bl	8005bd0 <sectorErase>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <writeINode+0xa4>
			  return 0;												// erase INODES sect 1
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e05b      	b.n	8007ba0 <writeINode+0x15c>
		  if (sectorErase(0x001000) == 0)
 8007ae8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007aec:	f7fe f870 	bl	8005bd0 <sectorErase>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <writeINode+0xb6>
			  return 0;	 											// erase INODES sect 2
 8007af6:	2300      	movs	r3, #0
 8007af8:	e052      	b.n	8007ba0 <writeINode+0x15c>

		  for (i = 0; i < numINodes; i++) {							// Re write INodes
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e047      	b.n	8007b90 <writeINode+0x14c>

			  if (INodeNumbers[i] == INodeNumber) {					// If INode is same being modified
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4413      	add	r3, r2
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	79ba      	ldrb	r2, [r7, #6]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d110      	bne.n	8007b30 <writeINode+0xec>
				  structToArray(node, INodeArray);					// Use new data not old data
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	466d      	mov	r5, sp
 8007b14:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8007b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007b20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b2a:	f000 fac2 	bl	80080b2 <structToArray>
 8007b2e:	e016      	b.n	8007b5e <writeINode+0x11a>
			  }
			  else {
				  structToArray(INodes[i], INodeArray);
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	4613      	mov	r3, r2
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	4413      	add	r3, r2
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	189e      	adds	r6, r3, r2
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	466d      	mov	r5, sp
 8007b46:	f106 0410 	add.w	r4, r6, #16
 8007b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007b52:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007b56:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007b5a:	f000 faaa 	bl	80080b2 <structToArray>
			  }

			  if (writeData(INodeArray, INODE_SIZE * INodeNumbers[i] , INODE_SIZE) == 0) {
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4413      	add	r3, r2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	4613      	mov	r3, r2
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	4413      	add	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	2222      	movs	r2, #34	; 0x22
 8007b72:	4619      	mov	r1, r3
 8007b74:	69b8      	ldr	r0, [r7, #24]
 8007b76:	f7fd fcfd 	bl	8005574 <writeData>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <writeINode+0x146>
				  free(INodeArray);	// If this happens you are fucked. Table of contents gone.
 8007b80:	69b8      	ldr	r0, [r7, #24]
 8007b82:	f009 f8ef 	bl	8010d64 <free>
				  return 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e00a      	b.n	8007ba0 <writeINode+0x15c>
		  for (i = 0; i < numINodes; i++) {							// Re write INodes
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	dbb3      	blt.n	8007b00 <writeINode+0xbc>
		  }


	}

	free(INodeArray);
 8007b98:	69b8      	ldr	r0, [r7, #24]
 8007b9a:	f009 f8e3 	bl	8010d64 <free>
	return 1;
 8007b9e:	2301      	movs	r3, #1
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3724      	adds	r7, #36	; 0x24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba8 <getINode>:

uint8_t getINode(uint8_t INodeNumber, struct INode *node) {
 8007ba8:	b5b0      	push	{r4, r5, r7, lr}
 8007baa:	b098      	sub	sp, #96	; 0x60
 8007bac:	af08      	add	r7, sp, #32
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
	struct INode temp;
	uint8_t *rawINodes = readData(INODE_SIZE * INodeNumber, INODE_SIZE);
 8007bb4:	79fa      	ldrb	r2, [r7, #7]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4413      	add	r3, r2
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	2122      	movs	r1, #34	; 0x22
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fed5 	bl	8005970 <readData>
 8007bc6:	63f8      	str	r0, [r7, #60]	; 0x3c


	temp.fileType = rawINodes[4+0];
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	791b      	ldrb	r3, [r3, #4]
 8007bcc:	733b      	strb	r3, [r7, #12]

	temp.fileSize = (rawINodes[4+1] << 16)  | (rawINodes[4+2] << 8)  | (rawINodes[4+3]);
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	3305      	adds	r3, #5
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	041a      	lsls	r2, r3, #16
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	3306      	adds	r3, #6
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	4313      	orrs	r3, r2
 8007be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007be2:	3207      	adds	r2, #7
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]

	temp.addr[0]  = (rawINodes[4+4] << 16)  | (rawINodes[4+5] << 8)  | (rawINodes[4+6]);
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	3308      	adds	r3, #8
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	041a      	lsls	r2, r3, #16
 8007bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf4:	3309      	adds	r3, #9
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bfe:	320a      	adds	r2, #10
 8007c00:	7812      	ldrb	r2, [r2, #0]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
	temp.addr[1]  = (rawINodes[4+7] << 16)  | (rawINodes[4+8] << 8)  | (rawINodes[4+9]);
 8007c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c08:	330b      	adds	r3, #11
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	041a      	lsls	r2, r3, #16
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	330c      	adds	r3, #12
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	4313      	orrs	r3, r2
 8007c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c1a:	320d      	adds	r2, #13
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]

	temp.addr[2]  = (rawINodes[4+10] << 16) | (rawINodes[4+11] << 8) | (rawINodes[4+12]);
 8007c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c24:	330e      	adds	r3, #14
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	041a      	lsls	r2, r3, #16
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2c:	330f      	adds	r3, #15
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	4313      	orrs	r3, r2
 8007c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c36:	3210      	adds	r2, #16
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	61fb      	str	r3, [r7, #28]
	temp.addr[3]  = (rawINodes[4+13] << 16) | (rawINodes[4+14] << 8) | (rawINodes[4+15]);
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	3311      	adds	r3, #17
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	041a      	lsls	r2, r3, #16
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	3312      	adds	r3, #18
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c52:	3213      	adds	r2, #19
 8007c54:	7812      	ldrb	r2, [r2, #0]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	623b      	str	r3, [r7, #32]

	temp.addr[4]  = (rawINodes[4+16] << 16) | (rawINodes[4+17] << 8) | (rawINodes[4+18]);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	041a      	lsls	r2, r3, #16
 8007c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c64:	3315      	adds	r3, #21
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c6e:	3216      	adds	r2, #22
 8007c70:	7812      	ldrb	r2, [r2, #0]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
	temp.addr[5]  = (rawINodes[4+19] << 16) | (rawINodes[4+20] << 8) | (rawINodes[4+21]);
 8007c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c78:	3317      	adds	r3, #23
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	041a      	lsls	r2, r3, #16
 8007c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c80:	3318      	adds	r3, #24
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	4313      	orrs	r3, r2
 8007c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c8a:	3219      	adds	r2, #25
 8007c8c:	7812      	ldrb	r2, [r2, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62bb      	str	r3, [r7, #40]	; 0x28

	temp.addr[6]  = (rawINodes[4+22] << 16) | (rawINodes[4+23] << 8) | (rawINodes[4+24]);
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	331a      	adds	r3, #26
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	041a      	lsls	r2, r3, #16
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9c:	331b      	adds	r3, #27
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ca6:	321c      	adds	r2, #28
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	temp.addr[7]  = (rawINodes[4+25] << 16) | (rawINodes[4+26] << 8) | (rawINodes[4+27]);
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	331d      	adds	r3, #29
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	041a      	lsls	r2, r3, #16
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb8:	331e      	adds	r3, #30
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cc2:	321f      	adds	r2, #31
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30

	temp.addr[8]  = (rawINodes[4+28] << 16) | (rawINodes[4+29] << 8) | (rawINodes[4+30]);
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	3320      	adds	r3, #32
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	041a      	lsls	r2, r3, #16
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd4:	3321      	adds	r3, #33	; 0x21
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cde:	3222      	adds	r2, #34	; 0x22
 8007ce0:	7812      	ldrb	r2, [r2, #0]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
	temp.addr[9]  = (rawINodes[4+31] << 16) | (rawINodes[4+32] << 8) | (rawINodes[4+33]);
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	3323      	adds	r3, #35	; 0x23
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	041a      	lsls	r2, r3, #16
 8007cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cfa:	3225      	adds	r2, #37	; 0x25
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38


	if (checkINodeValidity(temp)) {
 8007d02:	466d      	mov	r5, sp
 8007d04:	f107 041c 	add.w	r4, r7, #28
 8007d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d1a:	f000 f973 	bl	8008004 <checkINodeValidity>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <getINode+0x198>
		*node = temp;											// Store node in array
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	461d      	mov	r5, r3
 8007d28:	f107 040c 	add.w	r4, r7, #12
 8007d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007d38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		return 1;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e003      	b.n	8007d48 <getINode+0x1a0>
	}

	free(rawINodes);
 8007d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d42:	f009 f80f 	bl	8010d64 <free>
	return 0;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3740      	adds	r7, #64	; 0x40
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bdb0      	pop	{r4, r5, r7, pc}

08007d50 <readINodes>:



uint8_t readINodes(struct INode **INodes, uint8_t **INodeNumbers) {
 8007d50:	b5b0      	push	{r4, r5, r7, lr}
 8007d52:	b09a      	sub	sp, #104	; 0x68
 8007d54:	af08      	add	r7, sp, #32
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	// INodes are in sectors 1 and 2 - 0x0000 - 0x1FFF
	uint8_t *rawINodes = readData(0x0000, RESERVED_ADDR);
 8007d5a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f7fd fe06 	bl	8005970 <readData>
 8007d64:	63f8      	str	r0, [r7, #60]	; 0x3c

	struct INode temp;
	uint16_t numValid = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	for (int i = 4; i < RESERVED_ADDR+4; i += INODE_SIZE) {				// Start at 4 and add 4 to limit to ignore where instruction and addr were
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d70:	e136      	b.n	8007fe0 <readINodes+0x290>

		temp.fileType = rawINodes[i];
 8007d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d76:	4413      	add	r3, r2
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	733b      	strb	r3, [r7, #12]

		temp.fileSize = (rawINodes[i+1] << 16) | (rawINodes[i+2] << 8) | (rawINodes[i+3]);
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	3301      	adds	r3, #1
 8007d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d82:	4413      	add	r3, r2
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	041a      	lsls	r2, r3, #16
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d8e:	440b      	add	r3, r1
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	4313      	orrs	r3, r2
 8007d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d98:	3203      	adds	r2, #3
 8007d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d9c:	440a      	add	r2, r1
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

		temp.addr[0] = (rawINodes[i+4] << 16) | (rawINodes[i+5] << 8) | (rawINodes[i+6]);
 8007da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da6:	3304      	adds	r3, #4
 8007da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007daa:	4413      	add	r3, r2
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	041a      	lsls	r2, r3, #16
 8007db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db2:	3305      	adds	r3, #5
 8007db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007db6:	440b      	add	r3, r1
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc0:	3206      	adds	r2, #6
 8007dc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc4:	440a      	add	r2, r1
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
		temp.addr[1] = (rawINodes[i+7] << 16) | (rawINodes[i+8] << 8) | (rawINodes[i+9]);
 8007dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dce:	3307      	adds	r3, #7
 8007dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dd2:	4413      	add	r3, r2
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	041a      	lsls	r2, r3, #16
 8007dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dda:	3308      	adds	r3, #8
 8007ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dde:	440b      	add	r3, r1
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	4313      	orrs	r3, r2
 8007de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de8:	3209      	adds	r2, #9
 8007dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dec:	440a      	add	r2, r1
 8007dee:	7812      	ldrb	r2, [r2, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]

		temp.addr[2] = (rawINodes[i+10] << 16) | (rawINodes[i+11] << 8) | (rawINodes[i+12]);
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	330a      	adds	r3, #10
 8007df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dfa:	4413      	add	r3, r2
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	041a      	lsls	r2, r3, #16
 8007e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e02:	330b      	adds	r3, #11
 8007e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e06:	440b      	add	r3, r1
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e10:	320c      	adds	r2, #12
 8007e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e14:	440a      	add	r2, r1
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61fb      	str	r3, [r7, #28]
		temp.addr[3] = (rawINodes[i+13] << 16) | (rawINodes[i+14] << 8) | (rawINodes[i+15]);
 8007e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e1e:	330d      	adds	r3, #13
 8007e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e22:	4413      	add	r3, r2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	041a      	lsls	r2, r3, #16
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	330e      	adds	r3, #14
 8007e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e2e:	440b      	add	r3, r1
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	4313      	orrs	r3, r2
 8007e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e38:	320f      	adds	r2, #15
 8007e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e3c:	440a      	add	r2, r1
 8007e3e:	7812      	ldrb	r2, [r2, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	623b      	str	r3, [r7, #32]

		temp.addr[4] = (rawINodes[i+16] << 16) | (rawINodes[i+17] << 8) | (rawINodes[i+18]);
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	3310      	adds	r3, #16
 8007e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e4a:	4413      	add	r3, r2
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	041a      	lsls	r2, r3, #16
 8007e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e52:	3311      	adds	r3, #17
 8007e54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e56:	440b      	add	r3, r1
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e60:	3212      	adds	r2, #18
 8007e62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e64:	440a      	add	r2, r1
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
		temp.addr[5] = (rawINodes[i+19] << 16) | (rawINodes[i+20] << 8) | (rawINodes[i+21]);
 8007e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6e:	3313      	adds	r3, #19
 8007e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e72:	4413      	add	r3, r2
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	041a      	lsls	r2, r3, #16
 8007e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7a:	3314      	adds	r3, #20
 8007e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e7e:	440b      	add	r3, r1
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	4313      	orrs	r3, r2
 8007e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e88:	3215      	adds	r2, #21
 8007e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e8c:	440a      	add	r2, r1
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28

		temp.addr[6] = (rawINodes[i+22] << 16) | (rawINodes[i+23] << 8) | (rawINodes[i+24]);
 8007e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e96:	3316      	adds	r3, #22
 8007e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e9a:	4413      	add	r3, r2
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	041a      	lsls	r2, r3, #16
 8007ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea2:	3317      	adds	r3, #23
 8007ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea6:	440b      	add	r3, r1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	4313      	orrs	r3, r2
 8007eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eb0:	3218      	adds	r2, #24
 8007eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eb4:	440a      	add	r2, r1
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
		temp.addr[7] = (rawINodes[i+25] << 16) | (rawINodes[i+26] << 8) | (rawINodes[i+27]);
 8007ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebe:	3319      	adds	r3, #25
 8007ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ec2:	4413      	add	r3, r2
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	041a      	lsls	r2, r3, #16
 8007ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eca:	331a      	adds	r3, #26
 8007ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ece:	440b      	add	r3, r1
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ed8:	321b      	adds	r2, #27
 8007eda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007edc:	440a      	add	r2, r1
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30

		temp.addr[8] = (rawINodes[i+28] << 16) | (rawINodes[i+29] << 8) | (rawINodes[i+30]);
 8007ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee6:	331c      	adds	r3, #28
 8007ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eea:	4413      	add	r3, r2
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	041a      	lsls	r2, r3, #16
 8007ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef2:	331d      	adds	r3, #29
 8007ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ef6:	440b      	add	r3, r1
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	4313      	orrs	r3, r2
 8007efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f00:	321e      	adds	r2, #30
 8007f02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f04:	440a      	add	r2, r1
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
		temp.addr[9] = (rawINodes[i+31] << 16) | (rawINodes[i+32] << 8) | (rawINodes[i+33]);
 8007f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0e:	331f      	adds	r3, #31
 8007f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f12:	4413      	add	r3, r2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	041a      	lsls	r2, r3, #16
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	3320      	adds	r3, #32
 8007f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1e:	440b      	add	r3, r1
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	4313      	orrs	r3, r2
 8007f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f28:	3221      	adds	r2, #33	; 0x21
 8007f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2c:	440a      	add	r2, r1
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	63bb      	str	r3, [r7, #56]	; 0x38


		if (checkINodeValidity(temp)) {
 8007f34:	466d      	mov	r5, sp
 8007f36:	f107 041c 	add.w	r4, r7, #28
 8007f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007f42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007f46:	f107 030c 	add.w	r3, r7, #12
 8007f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f4c:	f000 f85a 	bl	8008004 <checkINodeValidity>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d041      	beq.n	8007fda <readINodes+0x28a>
			numValid++;
 8007f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			*INodes = realloc((*INodes), sizeof(struct INode) * numValid);					// Increase array size to hold valid node
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007f68:	4613      	mov	r3, r2
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	4413      	add	r3, r2
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	f008 ffab 	bl	8010ecc <realloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	601a      	str	r2, [r3, #0]
			*INodeNumbers = realloc(*INodeNumbers, numValid);									// Increase array size to hold valid node
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007f84:	4611      	mov	r1, r2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f008 ffa0 	bl	8010ecc <realloc>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	601a      	str	r2, [r3, #0]

			(*INodes)[numValid-1] = temp;											// Store node in array
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6819      	ldr	r1, [r3, #0]
 8007f96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4413      	add	r3, r2
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	3b30      	subs	r3, #48	; 0x30
 8007fa4:	440b      	add	r3, r1
 8007fa6:	461d      	mov	r5, r3
 8007fa8:	f107 040c 	add.w	r4, r7, #12
 8007fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007fb8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			(*INodeNumbers)[numValid-1] = i / INODE_SIZE;							// Store corresponding INode Number for valid INodes
 8007fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fbe:	4a10      	ldr	r2, [pc, #64]	; (8008000 <readINodes+0x2b0>)
 8007fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8007fc4:	1112      	asrs	r2, r2, #4
 8007fc6:	17db      	asrs	r3, r3, #31
 8007fc8:	1ad1      	subs	r1, r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b2ca      	uxtb	r2, r1
 8007fd8:	701a      	strb	r2, [r3, #0]
	for (int i = 4; i < RESERVED_ADDR+4; i += INODE_SIZE) {				// Start at 4 and add 4 to limit to ignore where instruction and addr were
 8007fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fdc:	3322      	adds	r3, #34	; 0x22
 8007fde:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe2:	f242 0202 	movw	r2, #8194	; 0x2002
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	f77f aec3 	ble.w	8007d72 <readINodes+0x22>
		}

	}

	free(rawINodes);
 8007fec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fee:	f008 feb9 	bl	8010d64 <free>
	return numValid;
 8007ff2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ff6:	b2db      	uxtb	r3, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3748      	adds	r7, #72	; 0x48
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8008000:	78787879 	.word	0x78787879

08008004 <checkINodeValidity>:

uint8_t checkINodeValidity(struct INode node) {
 8008004:	b084      	sub	sp, #16
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	f107 0c10 	add.w	ip, r7, #16
 8008010:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// INodes are deemed invalid if the data within them is not set
	// The file size is compared to 3 bytes of FF
	// addrs compared to 3 bytes of FF


	if (node.fileSize == 0x00FFFFFF)						// Check if the size was set at all
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <checkINodeValidity+0x1e>
		return 0;
 800801e:	2300      	movs	r3, #0
 8008020:	e040      	b.n	80080a4 <checkINodeValidity+0xa0>
	else if (node.fileSize > 504*1024)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f5b3 2ffc 	cmp.w	r3, #516096	; 0x7e000
 8008028:	d901      	bls.n	800802e <checkINodeValidity+0x2a>
		return 0;											// If size is greater than total storage
 800802a:	2300      	movs	r3, #0
 800802c:	e03a      	b.n	80080a4 <checkINodeValidity+0xa0>

	if (node.fileType != 0 && node.fileType != 1)			// If the file type is invalid
 800802e:	7c3b      	ldrb	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <checkINodeValidity+0x3a>
 8008034:	7c3b      	ldrb	r3, [r7, #16]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <checkINodeValidity+0x3a>
		return 0;
 800803a:	2300      	movs	r3, #0
 800803c:	e032      	b.n	80080a4 <checkINodeValidity+0xa0>

	for (int i = 0; i < 10; i++)
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	e02b      	b.n	800809c <checkINodeValidity+0x98>
		if (node.addr[i] == 0x00FFFFFF)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3302      	adds	r3, #2
 8008048:	f107 0210 	add.w	r2, r7, #16
 800804c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008050:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008054:	4293      	cmp	r3, r2
 8008056:	d101      	bne.n	800805c <checkINodeValidity+0x58>
			return 0;										// If any of the pointers are unset
 8008058:	2300      	movs	r3, #0
 800805a:	e023      	b.n	80080a4 <checkINodeValidity+0xa0>
		else if (node.addr[i] > 504*1024 || (node.addr[i] < RESERVED_ADDR && node.addr[i] != 0))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3302      	adds	r3, #2
 8008060:	f107 0210 	add.w	r2, r7, #16
 8008064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008068:	f5b3 2ffc 	cmp.w	r3, #516096	; 0x7e000
 800806c:	d811      	bhi.n	8008092 <checkINodeValidity+0x8e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3302      	adds	r3, #2
 8008072:	f107 0210 	add.w	r2, r7, #16
 8008076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807a:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800807e:	4293      	cmp	r3, r2
 8008080:	d809      	bhi.n	8008096 <checkINodeValidity+0x92>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3302      	adds	r3, #2
 8008086:	f107 0210 	add.w	r2, r7, #16
 800808a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <checkINodeValidity+0x92>
			return 0;
 8008092:	2300      	movs	r3, #0
 8008094:	e006      	b.n	80080a4 <checkINodeValidity+0xa0>
	for (int i = 0; i < 10; i++)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3301      	adds	r3, #1
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b09      	cmp	r3, #9
 80080a0:	ddd0      	ble.n	8008044 <checkINodeValidity+0x40>


	return 1;
 80080a2:	2301      	movs	r3, #1
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	b004      	add	sp, #16
 80080b0:	4770      	bx	lr

080080b2 <structToArray>:


void structToArray(struct INode node, uint8_t *arr) {
 80080b2:	b084      	sub	sp, #16
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	f107 0c10 	add.w	ip, r7, #16
 80080be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Make sure you pass an array that is 34 bytes long
	arr[0] = node.fileType;
 80080c2:	7c3a      	ldrb	r2, [r7, #16]
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	701a      	strb	r2, [r3, #0]
	arr[1] = (node.fileSize & 0x00FF0000) >> 16;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	0c1a      	lsrs	r2, r3, #16
 80080cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ce:	3301      	adds	r3, #1
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]
	arr[2] = (node.fileSize & 0x0000FF00) >> 8;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	0a1a      	lsrs	r2, r3, #8
 80080d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080da:	3302      	adds	r3, #2
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	701a      	strb	r2, [r3, #0]
	arr[3] = (node.fileSize & 0x000000FF);
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e4:	3303      	adds	r3, #3
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 10; i++) {
 80080ea:	2300      	movs	r3, #0
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	e032      	b.n	8008156 <structToArray+0xa4>
		arr[4+ 3*i]   = (node.addr[i] & 0x00FF0000) >> 16;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3302      	adds	r3, #2
 80080f4:	f107 0210 	add.w	r2, r7, #16
 80080f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fc:	0c19      	lsrs	r1, r3, #16
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	4413      	add	r3, r2
 8008106:	3304      	adds	r3, #4
 8008108:	461a      	mov	r2, r3
 800810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810c:	4413      	add	r3, r2
 800810e:	b2ca      	uxtb	r2, r1
 8008110:	701a      	strb	r2, [r3, #0]
		arr[4+ 3*i+1] = (node.addr[i] & 0x0000FF00) >> 8;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3302      	adds	r3, #2
 8008116:	f107 0210 	add.w	r2, r7, #16
 800811a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811e:	0a19      	lsrs	r1, r3, #8
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	4413      	add	r3, r2
 8008128:	3305      	adds	r3, #5
 800812a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800812c:	4413      	add	r3, r2
 800812e:	b2ca      	uxtb	r2, r1
 8008130:	701a      	strb	r2, [r3, #0]
		arr[4+ 3*i+2] =	 node.addr[i] & 0x000000FF;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3302      	adds	r3, #2
 8008136:	f107 0210 	add.w	r2, r7, #16
 800813a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	4413      	add	r3, r2
 8008146:	3306      	adds	r3, #6
 8008148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800814a:	4413      	add	r3, r2
 800814c:	b2ca      	uxtb	r2, r1
 800814e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3301      	adds	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b09      	cmp	r3, #9
 800815a:	ddc9      	ble.n	80080f0 <structToArray+0x3e>
	}
	return;
 800815c:	bf00      	nop
}
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	b004      	add	sp, #16
 8008168:	4770      	bx	lr

0800816a <swap>:


void swap(uint32_t* xp, uint32_t* yp) {
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
	uint32_t temp = *xp;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]
    *xp = *yp;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
    *yp = temp;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <sort>:

// Function to perform Selection Sort
void sort(uint32_t *arr, uint32_t *pairedArr, int n) {
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
    int i, j, min_idx;

    // One by one move boundary of
    // unsorted subarray
    for (i = 0; i < n - 1; i++) {
 80081a0:	2300      	movs	r3, #0
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e033      	b.n	800820e <sort+0x7a>
        // Find the minimum element in
        // unsorted array
        min_idx = i;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	617b      	str	r3, [r7, #20]
        for (j = i + 1; j < n; j++)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	3301      	adds	r3, #1
 80081ae:	61bb      	str	r3, [r7, #24]
 80081b0:	e010      	b.n	80081d4 <sort+0x40>
            if (arr[j] < arr[min_idx])
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	440b      	add	r3, r1
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d201      	bcs.n	80081ce <sort+0x3a>
                min_idx = j;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	617b      	str	r3, [r7, #20]
        for (j = i + 1; j < n; j++)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	429a      	cmp	r2, r3
 80081da:	dbea      	blt.n	80081b2 <sort+0x1e>

        // Swap the found minimum element
        // with the first element
        swap(&arr[min_idx], &arr[i]);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	18d0      	adds	r0, r2, r3
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7ff ffbc 	bl	800816a <swap>
        swap(&pairedArr[min_idx], &pairedArr[i]);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	18d0      	adds	r0, r2, r3
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	4619      	mov	r1, r3
 8008204:	f7ff ffb1 	bl	800816a <swap>
    for (i = 0; i < n - 1; i++) {
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	3301      	adds	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3b01      	subs	r3, #1
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	429a      	cmp	r2, r3
 8008216:	dbc6      	blt.n	80081a6 <sort+0x12>
    }
    return;
 8008218:	bf00      	nop
}
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  return 1;
 8008224:	2301      	movs	r3, #1
}
 8008226:	4618      	mov	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <_kill>:

int _kill(int pid, int sig)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800823a:	f00a f8fb 	bl	8012434 <__errno>
 800823e:	4603      	mov	r3, r0
 8008240:	2216      	movs	r2, #22
 8008242:	601a      	str	r2, [r3, #0]
  return -1;
 8008244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <_exit>:

void _exit (int status)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008258:	f04f 31ff 	mov.w	r1, #4294967295
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ffe7 	bl	8008230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008262:	e7fe      	b.n	8008262 <_exit+0x12>

08008264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e00a      	b.n	800828c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008276:	f3af 8000 	nop.w
 800827a:	4601      	mov	r1, r0
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	60ba      	str	r2, [r7, #8]
 8008282:	b2ca      	uxtb	r2, r1
 8008284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	3301      	adds	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	dbf0      	blt.n	8008276 <_read+0x12>
  }

  return len;
 8008294:	687b      	ldr	r3, [r7, #4]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	e009      	b.n	80082c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	60ba      	str	r2, [r7, #8]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	3301      	adds	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	dbf1      	blt.n	80082b0 <_write+0x12>
  }
  return len;
 80082cc:	687b      	ldr	r3, [r7, #4]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <_close>:

int _close(int file)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082fe:	605a      	str	r2, [r3, #4]
  return 0;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <_isatty>:

int _isatty(int file)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008316:	2301      	movs	r3, #1
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008348:	4a14      	ldr	r2, [pc, #80]	; (800839c <_sbrk+0x5c>)
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <_sbrk+0x60>)
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008354:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <_sbrk+0x64>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <_sbrk+0x64>)
 800835e:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <_sbrk+0x68>)
 8008360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <_sbrk+0x64>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4413      	add	r3, r2
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	d207      	bcs.n	8008380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008370:	f00a f860 	bl	8012434 <__errno>
 8008374:	4603      	mov	r3, r0
 8008376:	220c      	movs	r2, #12
 8008378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	e009      	b.n	8008394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <_sbrk+0x64>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008386:	4b07      	ldr	r3, [pc, #28]	; (80083a4 <_sbrk+0x64>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	4a05      	ldr	r2, [pc, #20]	; (80083a4 <_sbrk+0x64>)
 8008390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008392:	68fb      	ldr	r3, [r7, #12]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20018000 	.word	0x20018000
 80083a0:	00000400 	.word	0x00000400
 80083a4:	20001efc 	.word	0x20001efc
 80083a8:	20002078 	.word	0x20002078

080083ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <SystemInit+0x20>)
 80083b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b6:	4a05      	ldr	r2, [pc, #20]	; (80083cc <SystemInit+0x20>)
 80083b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	e000ed00 	.word	0xe000ed00

080083d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80083d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008408 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80083d4:	f7ff ffea 	bl	80083ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083d8:	480c      	ldr	r0, [pc, #48]	; (800840c <LoopForever+0x6>)
  ldr r1, =_edata
 80083da:	490d      	ldr	r1, [pc, #52]	; (8008410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80083dc:	4a0d      	ldr	r2, [pc, #52]	; (8008414 <LoopForever+0xe>)
  movs r3, #0
 80083de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083e0:	e002      	b.n	80083e8 <LoopCopyDataInit>

080083e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083e6:	3304      	adds	r3, #4

080083e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083ec:	d3f9      	bcc.n	80083e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80083f0:	4c0a      	ldr	r4, [pc, #40]	; (800841c <LoopForever+0x16>)
  movs r3, #0
 80083f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083f4:	e001      	b.n	80083fa <LoopFillZerobss>

080083f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083f8:	3204      	adds	r2, #4

080083fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083fc:	d3fb      	bcc.n	80083f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80083fe:	f00a f81f 	bl	8012440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008402:	f7fa fe41 	bl	8003088 <main>

08008406 <LoopForever>:

LoopForever:
    b LoopForever
 8008406:	e7fe      	b.n	8008406 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008408:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800840c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008410:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8008414:	080156b4 	.word	0x080156b4
  ldr r2, =_sbss
 8008418:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800841c:	20002074 	.word	0x20002074

08008420 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008420:	e7fe      	b.n	8008420 <ADC3_IRQHandler>
	...

08008424 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800842e:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <HAL_Init+0x3c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a0b      	ldr	r2, [pc, #44]	; (8008460 <HAL_Init+0x3c>)
 8008434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008438:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800843a:	2003      	movs	r0, #3
 800843c:	f001 fecc 	bl	800a1d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008440:	2000      	movs	r0, #0
 8008442:	f000 f80f 	bl	8008464 <HAL_InitTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	71fb      	strb	r3, [r7, #7]
 8008450:	e001      	b.n	8008456 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008452:	f7fc fba5 	bl	8004ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008456:	79fb      	ldrb	r3, [r7, #7]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40022000 	.word	0x40022000

08008464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008470:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <HAL_InitTick+0x6c>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d023      	beq.n	80084c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008478:	4b16      	ldr	r3, [pc, #88]	; (80084d4 <HAL_InitTick+0x70>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_InitTick+0x6c>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008486:	fbb3 f3f1 	udiv	r3, r3, r1
 800848a:	fbb2 f3f3 	udiv	r3, r2, r3
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fed7 	bl	800a242 <HAL_SYSTICK_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b0f      	cmp	r3, #15
 800849e:	d809      	bhi.n	80084b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084a0:	2200      	movs	r2, #0
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	f001 fea1 	bl	800a1ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80084ac:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <HAL_InitTick+0x74>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e007      	b.n	80084c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e004      	b.n	80084c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	73fb      	strb	r3, [r7, #15]
 80084be:	e001      	b.n	80084c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000018 	.word	0x20000018
 80084d4:	20000010 	.word	0x20000010
 80084d8:	20000014 	.word	0x20000014

080084dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <HAL_IncTick+0x20>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <HAL_IncTick+0x24>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4413      	add	r3, r2
 80084ec:	4a04      	ldr	r2, [pc, #16]	; (8008500 <HAL_IncTick+0x24>)
 80084ee:	6013      	str	r3, [r2, #0]
}
 80084f0:	bf00      	nop
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000018 	.word	0x20000018
 8008500:	20001f00 	.word	0x20001f00

08008504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
  return uwTick;
 8008508:	4b03      	ldr	r3, [pc, #12]	; (8008518 <HAL_GetTick+0x14>)
 800850a:	681b      	ldr	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20001f00 	.word	0x20001f00

0800851c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008524:	f7ff ffee 	bl	8008504 <HAL_GetTick>
 8008528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d005      	beq.n	8008542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <HAL_Delay+0x44>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008542:	bf00      	nop
 8008544:	f7ff ffde 	bl	8008504 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	429a      	cmp	r2, r3
 8008552:	d8f7      	bhi.n	8008544 <HAL_Delay+0x28>
  {
  }
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000018 	.word	0x20000018

08008564 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3360      	adds	r3, #96	; 0x60
 80085de:	461a      	mov	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <LL_ADC_SetOffset+0x44>)
 80085ee:	4013      	ands	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	4313      	orrs	r3, r2
 80085fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	03fff000 	.word	0x03fff000

08008614 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3360      	adds	r3, #96	; 0x60
 8008622:	461a      	mov	r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3360      	adds	r3, #96	; 0x60
 8008650:	461a      	mov	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	431a      	orrs	r2, r3
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3330      	adds	r3, #48	; 0x30
 80086ac:	461a      	mov	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	0a1b      	lsrs	r3, r3, #8
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	f003 030c 	and.w	r3, r3, #12
 80086b8:	4413      	add	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 031f 	and.w	r3, r3, #31
 80086c6:	211f      	movs	r1, #31
 80086c8:	fa01 f303 	lsl.w	r3, r1, r3
 80086cc:	43db      	mvns	r3, r3
 80086ce:	401a      	ands	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	0e9b      	lsrs	r3, r3, #26
 80086d4:	f003 011f 	and.w	r1, r3, #31
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f003 031f 	and.w	r3, r3, #31
 80086de:	fa01 f303 	lsl.w	r3, r1, r3
 80086e2:	431a      	orrs	r2, r3
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80086e8:	bf00      	nop
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008700:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008708:	2301      	movs	r3, #1
 800870a:	e000      	b.n	800870e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800871a:	b480      	push	{r7}
 800871c:	b087      	sub	sp, #28
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3314      	adds	r3, #20
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	0e5b      	lsrs	r3, r3, #25
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	4413      	add	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	0d1b      	lsrs	r3, r3, #20
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2107      	movs	r1, #7
 8008748:	fa01 f303 	lsl.w	r3, r1, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	401a      	ands	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	0d1b      	lsrs	r3, r3, #20
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	fa01 f303 	lsl.w	r3, r1, r3
 800875e:	431a      	orrs	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008788:	43db      	mvns	r3, r3
 800878a:	401a      	ands	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f003 0318 	and.w	r3, r3, #24
 8008792:	4908      	ldr	r1, [pc, #32]	; (80087b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008794:	40d9      	lsrs	r1, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	400b      	ands	r3, r1
 800879a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800879e:	431a      	orrs	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	0007ffff 	.word	0x0007ffff

080087b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f003 031f 	and.w	r3, r3, #31
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6093      	str	r3, [r2, #8]
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008828:	d101      	bne.n	800882e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800884c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008878:	d101      	bne.n	800887e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800889c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088a0:	f043 0201 	orr.w	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088c8:	f043 0202 	orr.w	r2, r3, #2
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <LL_ADC_IsEnabled+0x18>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <LL_ADC_IsEnabled+0x1a>
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b02      	cmp	r3, #2
 8008914:	d101      	bne.n	800891a <LL_ADC_IsDisableOngoing+0x18>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <LL_ADC_IsDisableOngoing+0x1a>
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800893c:	f043 0204 	orr.w	r2, r3, #4
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b04      	cmp	r3, #4
 8008962:	d101      	bne.n	8008968 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b08      	cmp	r3, #8
 8008988:	d101      	bne.n	800898e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800899c:	b590      	push	{r4, r7, lr}
 800899e:	b089      	sub	sp, #36	; 0x24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e130      	b.n	8008c18 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fc f90f 	bl	8004be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff ff19 	bl	8008814 <LL_ADC_IsDeepPowerDownEnabled>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff feff 	bl	80087f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff ff34 	bl	8008864 <LL_ADC_IsInternalRegulatorEnabled>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d115      	bne.n	8008a2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff ff18 	bl	800883c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a0c:	4b84      	ldr	r3, [pc, #528]	; (8008c20 <HAL_ADC_Init+0x284>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	099b      	lsrs	r3, r3, #6
 8008a12:	4a84      	ldr	r2, [pc, #528]	; (8008c24 <HAL_ADC_Init+0x288>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	099b      	lsrs	r3, r3, #6
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008a20:	e002      	b.n	8008a28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f9      	bne.n	8008a22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff ff16 	bl	8008864 <LL_ADC_IsInternalRegulatorEnabled>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	f043 0210 	orr.w	r2, r3, #16
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4e:	f043 0201 	orr.w	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff ff76 	bl	8008950 <LL_ADC_REG_IsConversionOngoing>
 8008a64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	f003 0310 	and.w	r3, r3, #16
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 80c9 	bne.w	8008c06 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f040 80c5 	bne.w	8008c06 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008a84:	f043 0202 	orr.w	r2, r3, #2
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff ff23 	bl	80088dc <LL_ADC_IsEnabled>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d115      	bne.n	8008ac8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a9c:	4862      	ldr	r0, [pc, #392]	; (8008c28 <HAL_ADC_Init+0x28c>)
 8008a9e:	f7ff ff1d 	bl	80088dc <LL_ADC_IsEnabled>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4861      	ldr	r0, [pc, #388]	; (8008c2c <HAL_ADC_Init+0x290>)
 8008aa6:	f7ff ff19 	bl	80088dc <LL_ADC_IsEnabled>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	431c      	orrs	r4, r3
 8008aae:	4860      	ldr	r0, [pc, #384]	; (8008c30 <HAL_ADC_Init+0x294>)
 8008ab0:	f7ff ff14 	bl	80088dc <LL_ADC_IsEnabled>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4323      	orrs	r3, r4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	485c      	ldr	r0, [pc, #368]	; (8008c34 <HAL_ADC_Init+0x298>)
 8008ac4:	f7ff fd4e 	bl	8008564 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7e5b      	ldrb	r3, [r3, #25]
 8008acc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ad2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8008ad8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8008ade:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ae6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d106      	bne.n	8008b04 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	3b01      	subs	r3, #1
 8008afc:	045b      	lsls	r3, r3, #17
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	4b44      	ldr	r3, [pc, #272]	; (8008c38 <HAL_ADC_Init+0x29c>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	69b9      	ldr	r1, [r7, #24]
 8008b30:	430b      	orrs	r3, r1
 8008b32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff1c 	bl	8008976 <LL_ADC_INJ_IsConversionOngoing>
 8008b3e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d13d      	bne.n	8008bc2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d13a      	bne.n	8008bc2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b50:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b58:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b68:	f023 0302 	bic.w	r3, r3, #2
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	430b      	orrs	r3, r1
 8008b74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d118      	bne.n	8008bb2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b8a:	f023 0304 	bic.w	r3, r3, #4
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008b96:	4311      	orrs	r1, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b9c:	4311      	orrs	r1, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	611a      	str	r2, [r3, #16]
 8008bb0:	e007      	b.n	8008bc2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	691a      	ldr	r2, [r3, #16]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0201 	bic.w	r2, r2, #1
 8008bc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d10c      	bne.n	8008be4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	f023 010f 	bic.w	r1, r3, #15
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	1e5a      	subs	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30
 8008be2:	e007      	b.n	8008bf4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 020f 	bic.w	r2, r2, #15
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	f043 0201 	orr.w	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	655a      	str	r2, [r3, #84]	; 0x54
 8008c04:	e007      	b.n	8008c16 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0a:	f043 0210 	orr.w	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3724      	adds	r7, #36	; 0x24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd90      	pop	{r4, r7, pc}
 8008c20:	20000010 	.word	0x20000010
 8008c24:	053e2d63 	.word	0x053e2d63
 8008c28:	50040000 	.word	0x50040000
 8008c2c:	50040100 	.word	0x50040100
 8008c30:	50040200 	.word	0x50040200
 8008c34:	50040300 	.word	0x50040300
 8008c38:	fff0c007 	.word	0xfff0c007

08008c3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008c48:	4853      	ldr	r0, [pc, #332]	; (8008d98 <HAL_ADC_Start_DMA+0x15c>)
 8008c4a:	f7ff fdb5 	bl	80087b8 <LL_ADC_GetMultimode>
 8008c4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fe7b 	bl	8008950 <LL_ADC_REG_IsConversionOngoing>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8093 	bne.w	8008d88 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_ADC_Start_DMA+0x34>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e08e      	b.n	8008d8e <HAL_ADC_Start_DMA+0x152>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a47      	ldr	r2, [pc, #284]	; (8008d9c <HAL_ADC_Start_DMA+0x160>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d008      	beq.n	8008c94 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d002      	beq.n	8008c94 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d172      	bne.n	8008d7a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fec1 	bl	8009a1c <ADC_Enable>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d165      	bne.n	8008d70 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a38      	ldr	r2, [pc, #224]	; (8008da0 <HAL_ADC_Start_DMA+0x164>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d002      	beq.n	8008cc8 <HAL_ADC_Start_DMA+0x8c>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	e000      	b.n	8008cca <HAL_ADC_Start_DMA+0x8e>
 8008cc8:	4b36      	ldr	r3, [pc, #216]	; (8008da4 <HAL_ADC_Start_DMA+0x168>)
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	6812      	ldr	r2, [r2, #0]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d002      	beq.n	8008cd8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d105      	bne.n	8008ce4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf4:	f023 0206 	bic.w	r2, r3, #6
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8008cfc:	e002      	b.n	8008d04 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d08:	4a27      	ldr	r2, [pc, #156]	; (8008da8 <HAL_ADC_Start_DMA+0x16c>)
 8008d0a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d10:	4a26      	ldr	r2, [pc, #152]	; (8008dac <HAL_ADC_Start_DMA+0x170>)
 8008d12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d18:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <HAL_ADC_Start_DMA+0x174>)
 8008d1a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	221c      	movs	r2, #28
 8008d22:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0210 	orr.w	r2, r2, #16
 8008d3a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3340      	adds	r3, #64	; 0x40
 8008d56:	4619      	mov	r1, r3
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f001 fb36 	bl	800a3cc <HAL_DMA_Start_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fddd 	bl	8008928 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008d6e:	e00d      	b.n	8008d8c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8008d78:	e008      	b.n	8008d8c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008d86:	e001      	b.n	8008d8c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	50040300 	.word	0x50040300
 8008d9c:	50040200 	.word	0x50040200
 8008da0:	50040100 	.word	0x50040100
 8008da4:	50040000 	.word	0x50040000
 8008da8:	08009be7 	.word	0x08009be7
 8008dac:	08009cbf 	.word	0x08009cbf
 8008db0:	08009cdb 	.word	0x08009cdb

08008db4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008dd0:	4882      	ldr	r0, [pc, #520]	; (8008fdc <HAL_ADC_IRQHandler+0x228>)
 8008dd2:	f7ff fcf1 	bl	80087b8 <LL_ADC_GetMultimode>
 8008dd6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d017      	beq.n	8008e12 <HAL_ADC_IRQHandler+0x5e>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f85d 	bl	8009ec4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <HAL_ADC_IRQHandler+0x72>
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8083 	beq.w	8008f38 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d07d      	beq.n	8008f38 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fc0c 	bl	8008676 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d062      	beq.n	8008f2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a5d      	ldr	r2, [pc, #372]	; (8008fe0 <HAL_ADC_IRQHandler+0x22c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d002      	beq.n	8008e74 <HAL_ADC_IRQHandler+0xc0>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	e000      	b.n	8008e76 <HAL_ADC_IRQHandler+0xc2>
 8008e74:	4b5b      	ldr	r3, [pc, #364]	; (8008fe4 <HAL_ADC_IRQHandler+0x230>)
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d008      	beq.n	8008e90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d002      	beq.n	8008e90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d104      	bne.n	8008e9a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	623b      	str	r3, [r7, #32]
 8008e98:	e00c      	b.n	8008eb4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a50      	ldr	r2, [pc, #320]	; (8008fe0 <HAL_ADC_IRQHandler+0x22c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d002      	beq.n	8008eaa <HAL_ADC_IRQHandler+0xf6>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	e000      	b.n	8008eac <HAL_ADC_IRQHandler+0xf8>
 8008eaa:	4b4e      	ldr	r3, [pc, #312]	; (8008fe4 <HAL_ADC_IRQHandler+0x230>)
 8008eac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d135      	bne.n	8008f2a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0308 	and.w	r3, r3, #8
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d12e      	bne.n	8008f2a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fd3d 	bl	8008950 <LL_ADC_REG_IsConversionOngoing>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d11a      	bne.n	8008f12 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 020c 	bic.w	r2, r2, #12
 8008eea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d112      	bne.n	8008f2a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f08:	f043 0201 	orr.w	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8008f10:	e00b      	b.n	8008f2a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	f043 0210 	orr.w	r2, r3, #16
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f043 0201 	orr.w	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f95c 	bl	80091e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	220c      	movs	r2, #12
 8008f36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <HAL_ADC_IRQHandler+0x198>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 809f 	beq.w	8009096 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8099 	beq.w	8009096 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff fbb7 	bl	80086f4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008f86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fb72 	bl	8008676 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a11      	ldr	r2, [pc, #68]	; (8008fe0 <HAL_ADC_IRQHandler+0x22c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d002      	beq.n	8008fa4 <HAL_ADC_IRQHandler+0x1f0>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	e000      	b.n	8008fa6 <HAL_ADC_IRQHandler+0x1f2>
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <HAL_ADC_IRQHandler+0x230>)
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d008      	beq.n	8008fc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b06      	cmp	r3, #6
 8008fb8:	d002      	beq.n	8008fc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	d104      	bne.n	8008fca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	623b      	str	r3, [r7, #32]
 8008fc8:	e013      	b.n	8008ff2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a04      	ldr	r2, [pc, #16]	; (8008fe0 <HAL_ADC_IRQHandler+0x22c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d009      	beq.n	8008fe8 <HAL_ADC_IRQHandler+0x234>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	e007      	b.n	8008fea <HAL_ADC_IRQHandler+0x236>
 8008fda:	bf00      	nop
 8008fdc:	50040300 	.word	0x50040300
 8008fe0:	50040100 	.word	0x50040100
 8008fe4:	50040000 	.word	0x50040000
 8008fe8:	4b7d      	ldr	r3, [pc, #500]	; (80091e0 <HAL_ADC_IRQHandler+0x42c>)
 8008fea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d047      	beq.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <HAL_ADC_IRQHandler+0x25e>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d03f      	beq.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800900e:	2b00      	cmp	r3, #0
 8009010:	d13a      	bne.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d133      	bne.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d12e      	bne.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fca1 	bl	8008976 <LL_ADC_INJ_IsConversionOngoing>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d11a      	bne.n	8009070 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009048:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905e:	2b00      	cmp	r3, #0
 8009060:	d112      	bne.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009066:	f043 0201 	orr.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	655a      	str	r2, [r3, #84]	; 0x54
 800906e:	e00b      	b.n	8009088 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009074:	f043 0210 	orr.w	r2, r3, #16
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009080:	f043 0201 	orr.w	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fef3 	bl	8009e74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2260      	movs	r2, #96	; 0x60
 8009094:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909c:	2b00      	cmp	r3, #0
 800909e:	d011      	beq.n	80090c4 <HAL_ADC_IRQHandler+0x310>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f8aa 	bl	8009210 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2280      	movs	r2, #128	; 0x80
 80090c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d012      	beq.n	80090f4 <HAL_ADC_IRQHandler+0x340>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00d      	beq.n	80090f4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fed9 	bl	8009e9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d012      	beq.n	8009124 <HAL_ADC_IRQHandler+0x370>
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00d      	beq.n	8009124 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fecb 	bl	8009eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009122:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d036      	beq.n	800919c <HAL_ADC_IRQHandler+0x3e8>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	d031      	beq.n	800919c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8009140:	2301      	movs	r3, #1
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
 8009144:	e014      	b.n	8009170 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d008      	beq.n	800915e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800914c:	4825      	ldr	r0, [pc, #148]	; (80091e4 <HAL_ADC_IRQHandler+0x430>)
 800914e:	f7ff fb41 	bl	80087d4 <LL_ADC_GetMultiDMATransfer>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8009158:	2301      	movs	r3, #1
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
 800915c:	e008      	b.n	8009170 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800916c:	2301      	movs	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	2b01      	cmp	r3, #1
 8009174:	d10e      	bne.n	8009194 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f043 0202 	orr.w	r2, r3, #2
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f848 	bl	8009224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2210      	movs	r2, #16
 800919a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d018      	beq.n	80091d8 <HAL_ADC_IRQHandler+0x424>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d013      	beq.n	80091d8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c0:	f043 0208 	orr.w	r2, r3, #8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091d0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fe58 	bl	8009e88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80091d8:	bf00      	nop
 80091da:	3728      	adds	r7, #40	; 0x28
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	50040000 	.word	0x50040000
 80091e4:	50040300 	.word	0x50040300

080091e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b0b6      	sub	sp, #216	; 0xd8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009248:	2300      	movs	r3, #0
 800924a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_ADC_ConfigChannel+0x22>
 8009256:	2302      	movs	r3, #2
 8009258:	e3c9      	b.n	80099ee <HAL_ADC_ConfigChannel+0x7b6>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff fb72 	bl	8008950 <LL_ADC_REG_IsConversionOngoing>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 83aa 	bne.w	80099c8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b05      	cmp	r3, #5
 8009282:	d824      	bhi.n	80092ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	3b02      	subs	r3, #2
 800928a:	2b03      	cmp	r3, #3
 800928c:	d81b      	bhi.n	80092c6 <HAL_ADC_ConfigChannel+0x8e>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <HAL_ADC_ConfigChannel+0x5c>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092a5 	.word	0x080092a5
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092b5 	.word	0x080092b5
 80092a0:	080092bd 	.word	0x080092bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80092a4:	230c      	movs	r3, #12
 80092a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80092aa:	e010      	b.n	80092ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80092ac:	2312      	movs	r3, #18
 80092ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80092b2:	e00c      	b.n	80092ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80092b4:	2318      	movs	r3, #24
 80092b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80092ba:	e008      	b.n	80092ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80092bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80092c4:	e003      	b.n	80092ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80092c6:	2306      	movs	r3, #6
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80092cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80092dc:	f7ff f9de 	bl	800869c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff fb33 	bl	8008950 <LL_ADC_REG_IsConversionOngoing>
 80092ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fb3f 	bl	8008976 <LL_ADC_INJ_IsConversionOngoing>
 80092f8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80092fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 81a4 	bne.w	800964e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 819f 	bne.w	800964e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6819      	ldr	r1, [r3, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	461a      	mov	r2, r3
 800931e:	f7ff f9fc 	bl	800871a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695a      	ldr	r2, [r3, #20]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	08db      	lsrs	r3, r3, #3
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b04      	cmp	r3, #4
 8009342:	d00a      	beq.n	800935a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6919      	ldr	r1, [r3, #16]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009354:	f7ff f93a 	bl	80085cc <LL_ADC_SetOffset>
 8009358:	e179      	b.n	800964e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f957 	bl	8008614 <LL_ADC_GetOffsetChannel>
 8009366:	4603      	mov	r3, r0
 8009368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x14e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff f94c 	bl	8008614 <LL_ADC_GetOffsetChannel>
 800937c:	4603      	mov	r3, r0
 800937e:	0e9b      	lsrs	r3, r3, #26
 8009380:	f003 021f 	and.w	r2, r3, #31
 8009384:	e01e      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x18c>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2100      	movs	r1, #0
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff f941 	bl	8008614 <LL_ADC_GetOffsetChannel>
 8009392:	4603      	mov	r3, r0
 8009394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800939c:	fa93 f3a3 	rbit	r3, r3
 80093a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80093a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80093a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80093ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80093b4:	2320      	movs	r3, #32
 80093b6:	e004      	b.n	80093c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80093b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093bc:	fab3 f383 	clz	r3, r3
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d105      	bne.n	80093dc <HAL_ADC_ConfigChannel+0x1a4>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	0e9b      	lsrs	r3, r3, #26
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	e018      	b.n	800940e <HAL_ADC_ConfigChannel+0x1d6>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e8:	fa93 f3a3 	rbit	r3, r3
 80093ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80093f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80093f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009400:	2320      	movs	r3, #32
 8009402:	e004      	b.n	800940e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009408:	fab3 f383 	clz	r3, r3
 800940c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800940e:	429a      	cmp	r2, r3
 8009410:	d106      	bne.n	8009420 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff f910 	bl	8008640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2101      	movs	r1, #1
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff f8f4 	bl	8008614 <LL_ADC_GetOffsetChannel>
 800942c:	4603      	mov	r3, r0
 800942e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <HAL_ADC_ConfigChannel+0x214>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff f8e9 	bl	8008614 <LL_ADC_GetOffsetChannel>
 8009442:	4603      	mov	r3, r0
 8009444:	0e9b      	lsrs	r3, r3, #26
 8009446:	f003 021f 	and.w	r2, r3, #31
 800944a:	e01e      	b.n	800948a <HAL_ADC_ConfigChannel+0x252>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2101      	movs	r1, #1
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff f8de 	bl	8008614 <LL_ADC_GetOffsetChannel>
 8009458:	4603      	mov	r3, r0
 800945a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009462:	fa93 f3a3 	rbit	r3, r3
 8009466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800946a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800946e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8009472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800947a:	2320      	movs	r3, #32
 800947c:	e004      	b.n	8009488 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800947e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009482:	fab3 f383 	clz	r3, r3
 8009486:	b2db      	uxtb	r3, r3
 8009488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009492:	2b00      	cmp	r3, #0
 8009494:	d105      	bne.n	80094a2 <HAL_ADC_ConfigChannel+0x26a>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	0e9b      	lsrs	r3, r3, #26
 800949c:	f003 031f 	and.w	r3, r3, #31
 80094a0:	e018      	b.n	80094d4 <HAL_ADC_ConfigChannel+0x29c>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ae:	fa93 f3a3 	rbit	r3, r3
 80094b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80094b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80094be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80094c6:	2320      	movs	r3, #32
 80094c8:	e004      	b.n	80094d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80094ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094ce:	fab3 f383 	clz	r3, r3
 80094d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d106      	bne.n	80094e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2200      	movs	r2, #0
 80094de:	2101      	movs	r1, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff f8ad 	bl	8008640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2102      	movs	r1, #2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f891 	bl	8008614 <LL_ADC_GetOffsetChannel>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <HAL_ADC_ConfigChannel+0x2da>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2102      	movs	r1, #2
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff f886 	bl	8008614 <LL_ADC_GetOffsetChannel>
 8009508:	4603      	mov	r3, r0
 800950a:	0e9b      	lsrs	r3, r3, #26
 800950c:	f003 021f 	and.w	r2, r3, #31
 8009510:	e01e      	b.n	8009550 <HAL_ADC_ConfigChannel+0x318>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2102      	movs	r1, #2
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff f87b 	bl	8008614 <LL_ADC_GetOffsetChannel>
 800951e:	4603      	mov	r3, r0
 8009520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009528:	fa93 f3a3 	rbit	r3, r3
 800952c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8009530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8009538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009540:	2320      	movs	r3, #32
 8009542:	e004      	b.n	800954e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009548:	fab3 f383 	clz	r3, r3
 800954c:	b2db      	uxtb	r3, r3
 800954e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009558:	2b00      	cmp	r3, #0
 800955a:	d105      	bne.n	8009568 <HAL_ADC_ConfigChannel+0x330>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	0e9b      	lsrs	r3, r3, #26
 8009562:	f003 031f 	and.w	r3, r3, #31
 8009566:	e014      	b.n	8009592 <HAL_ADC_ConfigChannel+0x35a>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800956e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009570:	fa93 f3a3 	rbit	r3, r3
 8009574:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8009576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800957c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009584:	2320      	movs	r3, #32
 8009586:	e004      	b.n	8009592 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800958c:	fab3 f383 	clz	r3, r3
 8009590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009592:	429a      	cmp	r2, r3
 8009594:	d106      	bne.n	80095a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	2102      	movs	r1, #2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff f84e 	bl	8008640 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2103      	movs	r1, #3
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff f832 	bl	8008614 <LL_ADC_GetOffsetChannel>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_ADC_ConfigChannel+0x398>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2103      	movs	r1, #3
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff f827 	bl	8008614 <LL_ADC_GetOffsetChannel>
 80095c6:	4603      	mov	r3, r0
 80095c8:	0e9b      	lsrs	r3, r3, #26
 80095ca:	f003 021f 	and.w	r2, r3, #31
 80095ce:	e017      	b.n	8009600 <HAL_ADC_ConfigChannel+0x3c8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2103      	movs	r1, #3
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff f81c 	bl	8008614 <LL_ADC_GetOffsetChannel>
 80095dc:	4603      	mov	r3, r0
 80095de:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e2:	fa93 f3a3 	rbit	r3, r3
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80095e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80095ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80095f2:	2320      	movs	r3, #32
 80095f4:	e003      	b.n	80095fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80095f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f8:	fab3 f383 	clz	r3, r3
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <HAL_ADC_ConfigChannel+0x3e0>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	0e9b      	lsrs	r3, r3, #26
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	e011      	b.n	800963c <HAL_ADC_ConfigChannel+0x404>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009620:	fa93 f3a3 	rbit	r3, r3
 8009624:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8009626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009628:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800962a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009630:	2320      	movs	r3, #32
 8009632:	e003      	b.n	800963c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009636:	fab3 f383 	clz	r3, r3
 800963a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800963c:	429a      	cmp	r2, r3
 800963e:	d106      	bne.n	800964e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	2103      	movs	r1, #3
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fff9 	bl	8008640 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f942 	bl	80088dc <LL_ADC_IsEnabled>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	f040 8140 	bne.w	80098e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6819      	ldr	r1, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	461a      	mov	r2, r3
 800966e:	f7ff f87f 	bl	8008770 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	4a8f      	ldr	r2, [pc, #572]	; (80098b4 <HAL_ADC_ConfigChannel+0x67c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	f040 8131 	bne.w	80098e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10b      	bne.n	80096a6 <HAL_ADC_ConfigChannel+0x46e>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	0e9b      	lsrs	r3, r3, #26
 8009694:	3301      	adds	r3, #1
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	2b09      	cmp	r3, #9
 800969c:	bf94      	ite	ls
 800969e:	2301      	movls	r3, #1
 80096a0:	2300      	movhi	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	e019      	b.n	80096da <HAL_ADC_ConfigChannel+0x4a2>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ae:	fa93 f3a3 	rbit	r3, r3
 80096b2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80096b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80096b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80096be:	2320      	movs	r3, #32
 80096c0:	e003      	b.n	80096ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80096c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c4:	fab3 f383 	clz	r3, r3
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	3301      	adds	r3, #1
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	2b09      	cmp	r3, #9
 80096d2:	bf94      	ite	ls
 80096d4:	2301      	movls	r3, #1
 80096d6:	2300      	movhi	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d079      	beq.n	80097d2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d107      	bne.n	80096fa <HAL_ADC_ConfigChannel+0x4c2>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	0e9b      	lsrs	r3, r3, #26
 80096f0:	3301      	adds	r3, #1
 80096f2:	069b      	lsls	r3, r3, #26
 80096f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80096f8:	e015      	b.n	8009726 <HAL_ADC_ConfigChannel+0x4ee>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009702:	fa93 f3a3 	rbit	r3, r3
 8009706:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8009708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800970a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800970c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8009712:	2320      	movs	r3, #32
 8009714:	e003      	b.n	800971e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8009716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009718:	fab3 f383 	clz	r3, r3
 800971c:	b2db      	uxtb	r3, r3
 800971e:	3301      	adds	r3, #1
 8009720:	069b      	lsls	r3, r3, #26
 8009722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <HAL_ADC_ConfigChannel+0x50e>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	0e9b      	lsrs	r3, r3, #26
 8009738:	3301      	adds	r3, #1
 800973a:	f003 031f 	and.w	r3, r3, #31
 800973e:	2101      	movs	r1, #1
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	e017      	b.n	8009776 <HAL_ADC_ConfigChannel+0x53e>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800974c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974e:	fa93 f3a3 	rbit	r3, r3
 8009752:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8009758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800975e:	2320      	movs	r3, #32
 8009760:	e003      	b.n	800976a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	fab3 f383 	clz	r3, r3
 8009768:	b2db      	uxtb	r3, r3
 800976a:	3301      	adds	r3, #1
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	2101      	movs	r1, #1
 8009772:	fa01 f303 	lsl.w	r3, r1, r3
 8009776:	ea42 0103 	orr.w	r1, r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <HAL_ADC_ConfigChannel+0x564>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	0e9b      	lsrs	r3, r3, #26
 800978c:	3301      	adds	r3, #1
 800978e:	f003 021f 	and.w	r2, r3, #31
 8009792:	4613      	mov	r3, r2
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	4413      	add	r3, r2
 8009798:	051b      	lsls	r3, r3, #20
 800979a:	e018      	b.n	80097ce <HAL_ADC_ConfigChannel+0x596>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a4:	fa93 f3a3 	rbit	r3, r3
 80097a8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80097b4:	2320      	movs	r3, #32
 80097b6:	e003      	b.n	80097c0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	fab3 f383 	clz	r3, r3
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	3301      	adds	r3, #1
 80097c2:	f003 021f 	and.w	r2, r3, #31
 80097c6:	4613      	mov	r3, r2
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	4413      	add	r3, r2
 80097cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80097ce:	430b      	orrs	r3, r1
 80097d0:	e081      	b.n	80098d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d107      	bne.n	80097ee <HAL_ADC_ConfigChannel+0x5b6>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	0e9b      	lsrs	r3, r3, #26
 80097e4:	3301      	adds	r3, #1
 80097e6:	069b      	lsls	r3, r3, #26
 80097e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80097ec:	e015      	b.n	800981a <HAL_ADC_ConfigChannel+0x5e2>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	fa93 f3a3 	rbit	r3, r3
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8009806:	2320      	movs	r3, #32
 8009808:	e003      	b.n	8009812 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	fab3 f383 	clz	r3, r3
 8009810:	b2db      	uxtb	r3, r3
 8009812:	3301      	adds	r3, #1
 8009814:	069b      	lsls	r3, r3, #26
 8009816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <HAL_ADC_ConfigChannel+0x602>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	0e9b      	lsrs	r3, r3, #26
 800982c:	3301      	adds	r3, #1
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	2101      	movs	r1, #1
 8009834:	fa01 f303 	lsl.w	r3, r1, r3
 8009838:	e017      	b.n	800986a <HAL_ADC_ConfigChannel+0x632>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	fa93 f3a3 	rbit	r3, r3
 8009846:	61bb      	str	r3, [r7, #24]
  return result;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8009852:	2320      	movs	r3, #32
 8009854:	e003      	b.n	800985e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	fab3 f383 	clz	r3, r3
 800985c:	b2db      	uxtb	r3, r3
 800985e:	3301      	adds	r3, #1
 8009860:	f003 031f 	and.w	r3, r3, #31
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	ea42 0103 	orr.w	r1, r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10d      	bne.n	8009896 <HAL_ADC_ConfigChannel+0x65e>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	0e9b      	lsrs	r3, r3, #26
 8009880:	3301      	adds	r3, #1
 8009882:	f003 021f 	and.w	r2, r3, #31
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	3b1e      	subs	r3, #30
 800988e:	051b      	lsls	r3, r3, #20
 8009890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009894:	e01e      	b.n	80098d4 <HAL_ADC_ConfigChannel+0x69c>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	fa93 f3a3 	rbit	r3, r3
 80098a2:	60fb      	str	r3, [r7, #12]
  return result;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d104      	bne.n	80098b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80098ae:	2320      	movs	r3, #32
 80098b0:	e006      	b.n	80098c0 <HAL_ADC_ConfigChannel+0x688>
 80098b2:	bf00      	nop
 80098b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	fab3 f383 	clz	r3, r3
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	3301      	adds	r3, #1
 80098c2:	f003 021f 	and.w	r2, r3, #31
 80098c6:	4613      	mov	r3, r2
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	4413      	add	r3, r2
 80098cc:	3b1e      	subs	r3, #30
 80098ce:	051b      	lsls	r3, r3, #20
 80098d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80098da:	4619      	mov	r1, r3
 80098dc:	f7fe ff1d 	bl	800871a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b44      	ldr	r3, [pc, #272]	; (80099f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d07a      	beq.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80098ec:	4843      	ldr	r0, [pc, #268]	; (80099fc <HAL_ADC_ConfigChannel+0x7c4>)
 80098ee:	f7fe fe5f 	bl	80085b0 <LL_ADC_GetCommonPathInternalCh>
 80098f2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a41      	ldr	r2, [pc, #260]	; (8009a00 <HAL_ADC_ConfigChannel+0x7c8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d12c      	bne.n	800995a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d126      	bne.n	800995a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a3c      	ldr	r2, [pc, #240]	; (8009a04 <HAL_ADC_ConfigChannel+0x7cc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d004      	beq.n	8009920 <HAL_ADC_ConfigChannel+0x6e8>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a3b      	ldr	r2, [pc, #236]	; (8009a08 <HAL_ADC_ConfigChannel+0x7d0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d15d      	bne.n	80099dc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009928:	4619      	mov	r1, r3
 800992a:	4834      	ldr	r0, [pc, #208]	; (80099fc <HAL_ADC_ConfigChannel+0x7c4>)
 800992c:	f7fe fe2d 	bl	800858a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009930:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <HAL_ADC_ConfigChannel+0x7d4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	099b      	lsrs	r3, r3, #6
 8009936:	4a36      	ldr	r2, [pc, #216]	; (8009a10 <HAL_ADC_ConfigChannel+0x7d8>)
 8009938:	fba2 2303 	umull	r2, r3, r2, r3
 800993c:	099b      	lsrs	r3, r3, #6
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	4613      	mov	r3, r2
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800994a:	e002      	b.n	8009952 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	3b01      	subs	r3, #1
 8009950:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1f9      	bne.n	800994c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009958:	e040      	b.n	80099dc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a2d      	ldr	r2, [pc, #180]	; (8009a14 <HAL_ADC_ConfigChannel+0x7dc>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d118      	bne.n	8009996 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d112      	bne.n	8009996 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a23      	ldr	r2, [pc, #140]	; (8009a04 <HAL_ADC_ConfigChannel+0x7cc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d004      	beq.n	8009984 <HAL_ADC_ConfigChannel+0x74c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a22      	ldr	r2, [pc, #136]	; (8009a08 <HAL_ADC_ConfigChannel+0x7d0>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d12d      	bne.n	80099e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800998c:	4619      	mov	r1, r3
 800998e:	481b      	ldr	r0, [pc, #108]	; (80099fc <HAL_ADC_ConfigChannel+0x7c4>)
 8009990:	f7fe fdfb 	bl	800858a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009994:	e024      	b.n	80099e0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <HAL_ADC_ConfigChannel+0x7e0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d120      	bne.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80099a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11a      	bne.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a14      	ldr	r2, [pc, #80]	; (8009a04 <HAL_ADC_ConfigChannel+0x7cc>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d115      	bne.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80099b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099be:	4619      	mov	r1, r3
 80099c0:	480e      	ldr	r0, [pc, #56]	; (80099fc <HAL_ADC_ConfigChannel+0x7c4>)
 80099c2:	f7fe fde2 	bl	800858a <LL_ADC_SetCommonPathInternalCh>
 80099c6:	e00c      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099cc:	f043 0220 	orr.w	r2, r3, #32
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80099da:	e002      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80099dc:	bf00      	nop
 80099de:	e000      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80099e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80099ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	37d8      	adds	r7, #216	; 0xd8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	80080000 	.word	0x80080000
 80099fc:	50040300 	.word	0x50040300
 8009a00:	c7520000 	.word	0xc7520000
 8009a04:	50040000 	.word	0x50040000
 8009a08:	50040200 	.word	0x50040200
 8009a0c:	20000010 	.word	0x20000010
 8009a10:	053e2d63 	.word	0x053e2d63
 8009a14:	cb840000 	.word	0xcb840000
 8009a18:	80000001 	.word	0x80000001

08009a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe ff55 	bl	80088dc <LL_ADC_IsEnabled>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d169      	bne.n	8009b0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	4b36      	ldr	r3, [pc, #216]	; (8009b18 <ADC_Enable+0xfc>)
 8009a40:	4013      	ands	r3, r2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00d      	beq.n	8009a62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	f043 0210 	orr.w	r2, r3, #16
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a56:	f043 0201 	orr.w	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e055      	b.n	8009b0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe ff10 	bl	800888c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009a6c:	482b      	ldr	r0, [pc, #172]	; (8009b1c <ADC_Enable+0x100>)
 8009a6e:	f7fe fd9f 	bl	80085b0 <LL_ADC_GetCommonPathInternalCh>
 8009a72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d013      	beq.n	8009aa4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009a7c:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <ADC_Enable+0x104>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	099b      	lsrs	r3, r3, #6
 8009a82:	4a28      	ldr	r2, [pc, #160]	; (8009b24 <ADC_Enable+0x108>)
 8009a84:	fba2 2303 	umull	r2, r3, r2, r3
 8009a88:	099b      	lsrs	r3, r3, #6
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009a96:	e002      	b.n	8009a9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f9      	bne.n	8009a98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009aa4:	f7fe fd2e 	bl	8008504 <HAL_GetTick>
 8009aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009aaa:	e028      	b.n	8009afe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe ff13 	bl	80088dc <LL_ADC_IsEnabled>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe fee3 	bl	800888c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009ac6:	f7fe fd1d 	bl	8008504 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d914      	bls.n	8009afe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d00d      	beq.n	8009afe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae6:	f043 0210 	orr.w	r2, r3, #16
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f043 0201 	orr.w	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e007      	b.n	8009b0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d1cf      	bne.n	8009aac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	8000003f 	.word	0x8000003f
 8009b1c:	50040300 	.word	0x50040300
 8009b20:	20000010 	.word	0x20000010
 8009b24:	053e2d63 	.word	0x053e2d63

08009b28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fee4 	bl	8008902 <LL_ADC_IsDisableOngoing>
 8009b3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fecb 	bl	80088dc <LL_ADC_IsEnabled>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d047      	beq.n	8009bdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d144      	bne.n	8009bdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f003 030d 	and.w	r3, r3, #13
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10c      	bne.n	8009b7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe fea5 	bl	80088b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2203      	movs	r2, #3
 8009b70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009b72:	f7fe fcc7 	bl	8008504 <HAL_GetTick>
 8009b76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009b78:	e029      	b.n	8009bce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f043 0210 	orr.w	r2, r3, #16
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8a:	f043 0201 	orr.w	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e023      	b.n	8009bde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009b96:	f7fe fcb5 	bl	8008504 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d914      	bls.n	8009bce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb6:	f043 0210 	orr.w	r2, r3, #16
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc2:	f043 0201 	orr.w	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e007      	b.n	8009bde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1dc      	bne.n	8009b96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d14b      	bne.n	8009c98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0308 	and.w	r3, r3, #8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d021      	beq.n	8009c5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fd29 	bl	8008676 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d032      	beq.n	8009c90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d12b      	bne.n	8009c90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d11f      	bne.n	8009c90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c54:	f043 0201 	orr.w	r2, r3, #1
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	655a      	str	r2, [r3, #84]	; 0x54
 8009c5c:	e018      	b.n	8009c90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d111      	bne.n	8009c90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	f043 0201 	orr.w	r2, r3, #1
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff faa9 	bl	80091e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009c96:	e00e      	b.n	8009cb6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff fabd 	bl	8009224 <HAL_ADC_ErrorCallback>
}
 8009caa:	e004      	b.n	8009cb6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7ff fa95 	bl	80091fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf8:	f043 0204 	orr.w	r2, r3, #4
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7ff fa8f 	bl	8009224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <LL_ADC_IsEnabled>:
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <LL_ADC_IsEnabled+0x18>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <LL_ADC_IsEnabled+0x1a>
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <LL_ADC_StartCalibration>:
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	609a      	str	r2, [r3, #8]
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <LL_ADC_IsCalibrationOnGoing>:
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d7a:	d101      	bne.n	8009d80 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <LL_ADC_REG_IsConversionOngoing>:
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 0304 	and.w	r3, r3, #4
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d101      	bne.n	8009da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_ADCEx_Calibration_Start+0x1c>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e04d      	b.n	8009e6c <HAL_ADCEx_Calibration_Start+0xb8>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff fea5 	bl	8009b28 <ADC_Disable>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d136      	bne.n	8009e56 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009df0:	f023 0302 	bic.w	r3, r3, #2
 8009df4:	f043 0202 	orr.w	r2, r3, #2
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff ff96 	bl	8009d34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009e08:	e014      	b.n	8009e34 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8009e16:	d30d      	bcc.n	8009e34 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	f023 0312 	bic.w	r3, r3, #18
 8009e20:	f043 0210 	orr.w	r2, r3, #16
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e01b      	b.n	8009e6c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff94 	bl	8009d66 <LL_ADC_IsCalibrationOnGoing>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e2      	bne.n	8009e0a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e48:	f023 0303 	bic.w	r3, r3, #3
 8009e4c:	f043 0201 	orr.w	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54
 8009e54:	e005      	b.n	8009e62 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f043 0210 	orr.w	r2, r3, #16
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b09f      	sub	sp, #124	; 0x7c
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d101      	bne.n	8009ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e093      	b.n	800a01e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8009efe:	2300      	movs	r3, #0
 8009f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8009f02:	2300      	movs	r3, #0
 8009f04:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a47      	ldr	r2, [pc, #284]	; (800a028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d102      	bne.n	8009f16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009f10:	4b46      	ldr	r3, [pc, #280]	; (800a02c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009f12:	60bb      	str	r3, [r7, #8]
 8009f14:	e001      	b.n	8009f1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009f16:	2300      	movs	r3, #0
 8009f18:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10b      	bne.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f24:	f043 0220 	orr.w	r2, r3, #32
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e072      	b.n	800a01e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff ff27 	bl	8009d8e <LL_ADC_REG_IsConversionOngoing>
 8009f40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ff21 	bl	8009d8e <LL_ADC_REG_IsConversionOngoing>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d154      	bne.n	8009ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8009f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d151      	bne.n	8009ffc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009f58:	4b35      	ldr	r3, [pc, #212]	; (800a030 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009f5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d02c      	beq.n	8009fbe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	6859      	ldr	r1, [r3, #4]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f76:	035b      	lsls	r3, r3, #13
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009f80:	4829      	ldr	r0, [pc, #164]	; (800a028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009f82:	f7ff fec4 	bl	8009d0e <LL_ADC_IsEnabled>
 8009f86:	4604      	mov	r4, r0
 8009f88:	4828      	ldr	r0, [pc, #160]	; (800a02c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009f8a:	f7ff fec0 	bl	8009d0e <LL_ADC_IsEnabled>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	431c      	orrs	r4, r3
 8009f92:	4828      	ldr	r0, [pc, #160]	; (800a034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009f94:	f7ff febb 	bl	8009d0e <LL_ADC_IsEnabled>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4323      	orrs	r3, r4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d137      	bne.n	800a010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009fa8:	f023 030f 	bic.w	r3, r3, #15
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	6811      	ldr	r1, [r2, #0]
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	6892      	ldr	r2, [r2, #8]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009fbc:	e028      	b.n	800a010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009fca:	4817      	ldr	r0, [pc, #92]	; (800a028 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009fcc:	f7ff fe9f 	bl	8009d0e <LL_ADC_IsEnabled>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	4816      	ldr	r0, [pc, #88]	; (800a02c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009fd4:	f7ff fe9b 	bl	8009d0e <LL_ADC_IsEnabled>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	431c      	orrs	r4, r3
 8009fdc:	4815      	ldr	r0, [pc, #84]	; (800a034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009fde:	f7ff fe96 	bl	8009d0e <LL_ADC_IsEnabled>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4323      	orrs	r3, r4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d112      	bne.n	800a010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009ff2:	f023 030f 	bic.w	r3, r3, #15
 8009ff6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ff8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009ffa:	e009      	b.n	800a010 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a000:	f043 0220 	orr.w	r2, r3, #32
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800a00e:	e000      	b.n	800a012 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800a01a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a01e:	4618      	mov	r0, r3
 800a020:	377c      	adds	r7, #124	; 0x7c
 800a022:	46bd      	mov	sp, r7
 800a024:	bd90      	pop	{r4, r7, pc}
 800a026:	bf00      	nop
 800a028:	50040000 	.word	0x50040000
 800a02c:	50040100 	.word	0x50040100
 800a030:	50040300 	.word	0x50040300
 800a034:	50040200 	.word	0x50040200

0800a038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a048:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <__NVIC_SetPriorityGrouping+0x44>)
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a054:	4013      	ands	r3, r2
 800a056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a06a:	4a04      	ldr	r2, [pc, #16]	; (800a07c <__NVIC_SetPriorityGrouping+0x44>)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	60d3      	str	r3, [r2, #12]
}
 800a070:	bf00      	nop
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	e000ed00 	.word	0xe000ed00

0800a080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a084:	4b04      	ldr	r3, [pc, #16]	; (800a098 <__NVIC_GetPriorityGrouping+0x18>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	f003 0307 	and.w	r3, r3, #7
}
 800a08e:	4618      	mov	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	e000ed00 	.word	0xe000ed00

0800a09c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db0b      	blt.n	800a0c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	f003 021f 	and.w	r2, r3, #31
 800a0b4:	4907      	ldr	r1, [pc, #28]	; (800a0d4 <__NVIC_EnableIRQ+0x38>)
 800a0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	2001      	movs	r0, #1
 800a0be:	fa00 f202 	lsl.w	r2, r0, r2
 800a0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	e000e100 	.word	0xe000e100

0800a0d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	db0a      	blt.n	800a102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	490c      	ldr	r1, [pc, #48]	; (800a124 <__NVIC_SetPriority+0x4c>)
 800a0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0f6:	0112      	lsls	r2, r2, #4
 800a0f8:	b2d2      	uxtb	r2, r2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a100:	e00a      	b.n	800a118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	b2da      	uxtb	r2, r3
 800a106:	4908      	ldr	r1, [pc, #32]	; (800a128 <__NVIC_SetPriority+0x50>)
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	3b04      	subs	r3, #4
 800a110:	0112      	lsls	r2, r2, #4
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	440b      	add	r3, r1
 800a116:	761a      	strb	r2, [r3, #24]
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	e000e100 	.word	0xe000e100
 800a128:	e000ed00 	.word	0xe000ed00

0800a12c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b089      	sub	sp, #36	; 0x24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	f1c3 0307 	rsb	r3, r3, #7
 800a146:	2b04      	cmp	r3, #4
 800a148:	bf28      	it	cs
 800a14a:	2304      	movcs	r3, #4
 800a14c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	3304      	adds	r3, #4
 800a152:	2b06      	cmp	r3, #6
 800a154:	d902      	bls.n	800a15c <NVIC_EncodePriority+0x30>
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	3b03      	subs	r3, #3
 800a15a:	e000      	b.n	800a15e <NVIC_EncodePriority+0x32>
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a160:	f04f 32ff 	mov.w	r2, #4294967295
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43da      	mvns	r2, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	401a      	ands	r2, r3
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a174:	f04f 31ff 	mov.w	r1, #4294967295
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	fa01 f303 	lsl.w	r3, r1, r3
 800a17e:	43d9      	mvns	r1, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a184:	4313      	orrs	r3, r2
         );
}
 800a186:	4618      	mov	r0, r3
 800a188:	3724      	adds	r7, #36	; 0x24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
	...

0800a194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1a4:	d301      	bcc.n	800a1aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e00f      	b.n	800a1ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1aa:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <SysTick_Config+0x40>)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a1b2:	210f      	movs	r1, #15
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	f7ff ff8e 	bl	800a0d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <SysTick_Config+0x40>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a1c2:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <SysTick_Config+0x40>)
 800a1c4:	2207      	movs	r2, #7
 800a1c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	e000e010 	.word	0xe000e010

0800a1d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff29 	bl	800a038 <__NVIC_SetPriorityGrouping>
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b086      	sub	sp, #24
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
 800a1fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a200:	f7ff ff3e 	bl	800a080 <__NVIC_GetPriorityGrouping>
 800a204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	f7ff ff8e 	bl	800a12c <NVIC_EncodePriority>
 800a210:	4602      	mov	r2, r0
 800a212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff ff5d 	bl	800a0d8 <__NVIC_SetPriority>
}
 800a21e:	bf00      	nop
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	4603      	mov	r3, r0
 800a22e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ff31 	bl	800a09c <__NVIC_EnableIRQ>
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff ffa2 	bl	800a194 <SysTick_Config>
 800a250:	4603      	mov	r3, r0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e098      	b.n	800a3a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	4b4d      	ldr	r3, [pc, #308]	; (800a3ac <HAL_DMA_Init+0x150>)
 800a276:	429a      	cmp	r2, r3
 800a278:	d80f      	bhi.n	800a29a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <HAL_DMA_Init+0x154>)
 800a282:	4413      	add	r3, r2
 800a284:	4a4b      	ldr	r2, [pc, #300]	; (800a3b4 <HAL_DMA_Init+0x158>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	009a      	lsls	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a48      	ldr	r2, [pc, #288]	; (800a3b8 <HAL_DMA_Init+0x15c>)
 800a296:	641a      	str	r2, [r3, #64]	; 0x40
 800a298:	e00e      	b.n	800a2b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4b46      	ldr	r3, [pc, #280]	; (800a3bc <HAL_DMA_Init+0x160>)
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4a43      	ldr	r2, [pc, #268]	; (800a3b4 <HAL_DMA_Init+0x158>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	091b      	lsrs	r3, r3, #4
 800a2ac:	009a      	lsls	r2, r3, #2
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a42      	ldr	r2, [pc, #264]	; (800a3c0 <HAL_DMA_Init+0x164>)
 800a2b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a2dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a312:	d039      	beq.n	800a388 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	4a27      	ldr	r2, [pc, #156]	; (800a3b8 <HAL_DMA_Init+0x15c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d11a      	bne.n	800a354 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a31e:	4b29      	ldr	r3, [pc, #164]	; (800a3c4 <HAL_DMA_Init+0x168>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a326:	f003 031c 	and.w	r3, r3, #28
 800a32a:	210f      	movs	r1, #15
 800a32c:	fa01 f303 	lsl.w	r3, r1, r3
 800a330:	43db      	mvns	r3, r3
 800a332:	4924      	ldr	r1, [pc, #144]	; (800a3c4 <HAL_DMA_Init+0x168>)
 800a334:	4013      	ands	r3, r2
 800a336:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a338:	4b22      	ldr	r3, [pc, #136]	; (800a3c4 <HAL_DMA_Init+0x168>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6859      	ldr	r1, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a344:	f003 031c 	and.w	r3, r3, #28
 800a348:	fa01 f303 	lsl.w	r3, r1, r3
 800a34c:	491d      	ldr	r1, [pc, #116]	; (800a3c4 <HAL_DMA_Init+0x168>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	600b      	str	r3, [r1, #0]
 800a352:	e019      	b.n	800a388 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a354:	4b1c      	ldr	r3, [pc, #112]	; (800a3c8 <HAL_DMA_Init+0x16c>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a35c:	f003 031c 	and.w	r3, r3, #28
 800a360:	210f      	movs	r1, #15
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	43db      	mvns	r3, r3
 800a368:	4917      	ldr	r1, [pc, #92]	; (800a3c8 <HAL_DMA_Init+0x16c>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a36e:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <HAL_DMA_Init+0x16c>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6859      	ldr	r1, [r3, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37a:	f003 031c 	and.w	r3, r3, #28
 800a37e:	fa01 f303 	lsl.w	r3, r1, r3
 800a382:	4911      	ldr	r1, [pc, #68]	; (800a3c8 <HAL_DMA_Init+0x16c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	40020407 	.word	0x40020407
 800a3b0:	bffdfff8 	.word	0xbffdfff8
 800a3b4:	cccccccd 	.word	0xcccccccd
 800a3b8:	40020000 	.word	0x40020000
 800a3bc:	bffdfbf8 	.word	0xbffdfbf8
 800a3c0:	40020400 	.word	0x40020400
 800a3c4:	400200a8 	.word	0x400200a8
 800a3c8:	400204a8 	.word	0x400204a8

0800a3cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_DMA_Start_IT+0x20>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e04b      	b.n	800a484 <HAL_DMA_Start_IT+0xb8>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d13a      	bne.n	800a476 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0201 	bic.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f96d 	bl	800a704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 020e 	orr.w	r2, r2, #14
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	e00f      	b.n	800a464 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0204 	bic.w	r2, r2, #4
 800a452:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 020a 	orr.w	r2, r2, #10
 800a462:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	e005      	b.n	800a482 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a47e:	2302      	movs	r3, #2
 800a480:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d008      	beq.n	800a4b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e022      	b.n	800a4fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 020e 	bic.w	r2, r2, #14
 800a4c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0201 	bic.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	f003 021c 	and.w	r2, r3, #28
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a4e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d005      	beq.n	800a52c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2204      	movs	r2, #4
 800a524:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	e029      	b.n	800a580 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 020e 	bic.w	r2, r2, #14
 800a53a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0201 	bic.w	r2, r2, #1
 800a54a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a550:	f003 021c 	and.w	r2, r3, #28
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	2101      	movs	r1, #1
 800a55a:	fa01 f202 	lsl.w	r2, r1, r2
 800a55e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
    }
  }
  return status;
 800a580:	7bfb      	ldrb	r3, [r7, #15]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	f003 031c 	and.w	r3, r3, #28
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	409a      	lsls	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d026      	beq.n	800a604 <HAL_DMA_IRQHandler+0x7a>
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d021      	beq.n	800a604 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d107      	bne.n	800a5de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0204 	bic.w	r2, r2, #4
 800a5dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e2:	f003 021c 	and.w	r2, r3, #28
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	2104      	movs	r1, #4
 800a5ec:	fa01 f202 	lsl.w	r2, r1, r2
 800a5f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d071      	beq.n	800a6de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a602:	e06c      	b.n	800a6de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a608:	f003 031c 	and.w	r3, r3, #28
 800a60c:	2202      	movs	r2, #2
 800a60e:	409a      	lsls	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4013      	ands	r3, r2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02e      	beq.n	800a676 <HAL_DMA_IRQHandler+0xec>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d029      	beq.n	800a676 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0320 	and.w	r3, r3, #32
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10b      	bne.n	800a648 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 020a 	bic.w	r2, r2, #10
 800a63e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	f003 021c 	and.w	r2, r3, #28
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	2102      	movs	r1, #2
 800a656:	fa01 f202 	lsl.w	r2, r1, r2
 800a65a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d038      	beq.n	800a6de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a674:	e033      	b.n	800a6de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67a:	f003 031c 	and.w	r3, r3, #28
 800a67e:	2208      	movs	r2, #8
 800a680:	409a      	lsls	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4013      	ands	r3, r2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d02a      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x156>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	f003 0308 	and.w	r3, r3, #8
 800a690:	2b00      	cmp	r3, #0
 800a692:	d025      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 020e 	bic.w	r2, r2, #14
 800a6a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a8:	f003 021c 	and.w	r2, r3, #28
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	fa01 f202 	lsl.w	r2, r1, r2
 800a6b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
}
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a6f6:	b2db      	uxtb	r3, r3
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	f003 021c 	and.w	r2, r3, #28
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	2101      	movs	r1, #1
 800a720:	fa01 f202 	lsl.w	r2, r1, r2
 800a724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	2b10      	cmp	r3, #16
 800a734:	d108      	bne.n	800a748 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a746:	e007      	b.n	800a758 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]
}
 800a758:	bf00      	nop
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a76e:	2300      	movs	r3, #0
 800a770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a772:	e17f      	b.n	800aa74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	2101      	movs	r1, #1
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	fa01 f303 	lsl.w	r3, r1, r3
 800a780:	4013      	ands	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8171 	beq.w	800aa6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d005      	beq.n	800a7a4 <HAL_GPIO_Init+0x40>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d130      	bne.n	800a806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b4:	43db      	mvns	r3, r3
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7da:	2201      	movs	r2, #1
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e2:	43db      	mvns	r3, r3
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	091b      	lsrs	r3, r3, #4
 800a7f0:	f003 0201 	and.w	r2, r3, #1
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d118      	bne.n	800a844 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800a818:	2201      	movs	r2, #1
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	fa02 f303 	lsl.w	r3, r2, r3
 800a820:	43db      	mvns	r3, r3
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4013      	ands	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	08db      	lsrs	r3, r3, #3
 800a82e:	f003 0201 	and.w	r2, r3, #1
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f003 0303 	and.w	r3, r3, #3
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d017      	beq.n	800a880 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	2203      	movs	r2, #3
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	43db      	mvns	r3, r3
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4013      	ands	r3, r2
 800a866:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	fa02 f303 	lsl.w	r3, r2, r3
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	4313      	orrs	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d123      	bne.n	800a8d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	08da      	lsrs	r2, r3, #3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3208      	adds	r2, #8
 800a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a898:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	220f      	movs	r2, #15
 800a8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	08da      	lsrs	r2, r3, #3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3208      	adds	r2, #8
 800a8ce:	6939      	ldr	r1, [r7, #16]
 800a8d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	2203      	movs	r2, #3
 800a8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e4:	43db      	mvns	r3, r3
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f003 0203 	and.w	r2, r3, #3
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 80ac 	beq.w	800aa6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a916:	4b5f      	ldr	r3, [pc, #380]	; (800aa94 <HAL_GPIO_Init+0x330>)
 800a918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a91a:	4a5e      	ldr	r2, [pc, #376]	; (800aa94 <HAL_GPIO_Init+0x330>)
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	6613      	str	r3, [r2, #96]	; 0x60
 800a922:	4b5c      	ldr	r3, [pc, #368]	; (800aa94 <HAL_GPIO_Init+0x330>)
 800a924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	60bb      	str	r3, [r7, #8]
 800a92c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a92e:	4a5a      	ldr	r2, [pc, #360]	; (800aa98 <HAL_GPIO_Init+0x334>)
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	3302      	adds	r3, #2
 800a936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	220f      	movs	r2, #15
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	43db      	mvns	r3, r3
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	4013      	ands	r3, r2
 800a950:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a958:	d025      	beq.n	800a9a6 <HAL_GPIO_Init+0x242>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a4f      	ldr	r2, [pc, #316]	; (800aa9c <HAL_GPIO_Init+0x338>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d01f      	beq.n	800a9a2 <HAL_GPIO_Init+0x23e>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a4e      	ldr	r2, [pc, #312]	; (800aaa0 <HAL_GPIO_Init+0x33c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d019      	beq.n	800a99e <HAL_GPIO_Init+0x23a>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a4d      	ldr	r2, [pc, #308]	; (800aaa4 <HAL_GPIO_Init+0x340>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d013      	beq.n	800a99a <HAL_GPIO_Init+0x236>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a4c      	ldr	r2, [pc, #304]	; (800aaa8 <HAL_GPIO_Init+0x344>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00d      	beq.n	800a996 <HAL_GPIO_Init+0x232>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a4b      	ldr	r2, [pc, #300]	; (800aaac <HAL_GPIO_Init+0x348>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <HAL_GPIO_Init+0x22e>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a4a      	ldr	r2, [pc, #296]	; (800aab0 <HAL_GPIO_Init+0x34c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d101      	bne.n	800a98e <HAL_GPIO_Init+0x22a>
 800a98a:	2306      	movs	r3, #6
 800a98c:	e00c      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a98e:	2307      	movs	r3, #7
 800a990:	e00a      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a992:	2305      	movs	r3, #5
 800a994:	e008      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a996:	2304      	movs	r3, #4
 800a998:	e006      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a99a:	2303      	movs	r3, #3
 800a99c:	e004      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e002      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <HAL_GPIO_Init+0x244>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	f002 0203 	and.w	r2, r2, #3
 800a9ae:	0092      	lsls	r2, r2, #2
 800a9b0:	4093      	lsls	r3, r2
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a9b8:	4937      	ldr	r1, [pc, #220]	; (800aa98 <HAL_GPIO_Init+0x334>)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	089b      	lsrs	r3, r3, #2
 800a9be:	3302      	adds	r3, #2
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a9c6:	4b3b      	ldr	r3, [pc, #236]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	43db      	mvns	r3, r3
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a9ea:	4a32      	ldr	r2, [pc, #200]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a9f0:	4b30      	ldr	r3, [pc, #192]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	43db      	mvns	r3, r3
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aa14:	4a27      	ldr	r2, [pc, #156]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800aa1a:	4b26      	ldr	r3, [pc, #152]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	43db      	mvns	r3, r3
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	4013      	ands	r3, r2
 800aa28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aa3e:	4a1d      	ldr	r2, [pc, #116]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800aa44:	4b1b      	ldr	r3, [pc, #108]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4013      	ands	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aa68:	4a12      	ldr	r2, [pc, #72]	; (800aab4 <HAL_GPIO_Init+0x350>)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3301      	adds	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f47f ae78 	bne.w	800a774 <HAL_GPIO_Init+0x10>
  }
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	40021000 	.word	0x40021000
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	48000400 	.word	0x48000400
 800aaa0:	48000800 	.word	0x48000800
 800aaa4:	48000c00 	.word	0x48000c00
 800aaa8:	48001000 	.word	0x48001000
 800aaac:	48001400 	.word	0x48001400
 800aab0:	48001800 	.word	0x48001800
 800aab4:	40010400 	.word	0x40010400

0800aab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	807b      	strh	r3, [r7, #2]
 800aac4:	4613      	mov	r3, r2
 800aac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aac8:	787b      	ldrb	r3, [r7, #1]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aace:	887a      	ldrh	r2, [r7, #2]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aad4:	e002      	b.n	800aadc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aad6:	887a      	ldrh	r2, [r7, #2]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e08d      	b.n	800ac16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fa f958 	bl	8004dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2224      	movs	r2, #36	; 0x24
 800ab18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0201 	bic.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ab38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689a      	ldr	r2, [r3, #8]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d107      	bne.n	800ab62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab5e:	609a      	str	r2, [r3, #8]
 800ab60:	e006      	b.n	800ab70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ab6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d108      	bne.n	800ab8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab86:	605a      	str	r2, [r3, #4]
 800ab88:	e007      	b.n	800ab9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	430a      	orrs	r2, r1
 800abd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	69d9      	ldr	r1, [r3, #28]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a1a      	ldr	r2, [r3, #32]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f042 0201 	orr.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	817b      	strh	r3, [r7, #10]
 800ac30:	4613      	mov	r3, r2
 800ac32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b20      	cmp	r3, #32
 800ac3e:	f040 80fd 	bne.w	800ae3c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_I2C_Master_Transmit+0x30>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e0f6      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac58:	f7fd fc54 	bl	8008504 <HAL_GetTick>
 800ac5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	2319      	movs	r3, #25
 800ac64:	2201      	movs	r2, #1
 800ac66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 ff33 	bl	800bad6 <I2C_WaitOnFlagUntilTimeout>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e0e1      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2221      	movs	r2, #33	; 0x21
 800ac7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2210      	movs	r2, #16
 800ac86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	893a      	ldrh	r2, [r7, #8]
 800ac9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	2bff      	cmp	r3, #255	; 0xff
 800acaa:	d906      	bls.n	800acba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	22ff      	movs	r2, #255	; 0xff
 800acb0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800acb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	e007      	b.n	800acca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800acc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800acc8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d024      	beq.n	800ad1c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	3301      	adds	r3, #1
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	8979      	ldrh	r1, [r7, #10]
 800ad0e:	4b4e      	ldr	r3, [pc, #312]	; (800ae48 <HAL_I2C_Master_Transmit+0x228>)
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f001 f919 	bl	800bf4c <I2C_TransferConfig>
 800ad1a:	e066      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	8979      	ldrh	r1, [r7, #10]
 800ad24:	4b48      	ldr	r3, [pc, #288]	; (800ae48 <HAL_I2C_Master_Transmit+0x228>)
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f001 f90e 	bl	800bf4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ad30:	e05b      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	6a39      	ldr	r1, [r7, #32]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 ff1c 	bl	800bb74 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e07b      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d034      	beq.n	800adea <HAL_I2C_Master_Transmit+0x1ca>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d130      	bne.n	800adea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2180      	movs	r1, #128	; 0x80
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 fe9f 	bl	800bad6 <I2C_WaitOnFlagUntilTimeout>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e04d      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2bff      	cmp	r3, #255	; 0xff
 800adaa:	d90e      	bls.n	800adca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	22ff      	movs	r2, #255	; 0xff
 800adb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	8979      	ldrh	r1, [r7, #10]
 800adba:	2300      	movs	r3, #0
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f001 f8c2 	bl	800bf4c <I2C_TransferConfig>
 800adc8:	e00f      	b.n	800adea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add8:	b2da      	uxtb	r2, r3
 800adda:	8979      	ldrh	r1, [r7, #10]
 800addc:	2300      	movs	r3, #0
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f001 f8b1 	bl	800bf4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d19e      	bne.n	800ad32 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	6a39      	ldr	r1, [r7, #32]
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 ff02 	bl	800bc02 <I2C_WaitOnSTOPFlagUntilTimeout>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e01a      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6859      	ldr	r1, [r3, #4]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <HAL_I2C_Master_Transmit+0x22c>)
 800ae1c:	400b      	ands	r3, r1
 800ae1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800ae3c:	2302      	movs	r3, #2
  }
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	80002000 	.word	0x80002000
 800ae4c:	fe00e800 	.word	0xfe00e800

0800ae50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	817b      	strh	r3, [r7, #10]
 800ae60:	4613      	mov	r3, r2
 800ae62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b20      	cmp	r3, #32
 800ae6e:	f040 80db 	bne.w	800b028 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d101      	bne.n	800ae80 <HAL_I2C_Master_Receive+0x30>
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	e0d4      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ae88:	f7fd fb3c 	bl	8008504 <HAL_GetTick>
 800ae8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	2319      	movs	r3, #25
 800ae94:	2201      	movs	r2, #1
 800ae96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 fe1b 	bl	800bad6 <I2C_WaitOnFlagUntilTimeout>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e0bf      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2222      	movs	r2, #34	; 0x22
 800aeae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2210      	movs	r2, #16
 800aeb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	893a      	ldrh	r2, [r7, #8]
 800aeca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	2bff      	cmp	r3, #255	; 0xff
 800aeda:	d90e      	bls.n	800aefa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	22ff      	movs	r2, #255	; 0xff
 800aee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	8979      	ldrh	r1, [r7, #10]
 800aeea:	4b52      	ldr	r3, [pc, #328]	; (800b034 <HAL_I2C_Master_Receive+0x1e4>)
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f001 f82a 	bl	800bf4c <I2C_TransferConfig>
 800aef8:	e06d      	b.n	800afd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aefe:	b29a      	uxth	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	8979      	ldrh	r1, [r7, #10]
 800af0c:	4b49      	ldr	r3, [pc, #292]	; (800b034 <HAL_I2C_Master_Receive+0x1e4>)
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f001 f819 	bl	800bf4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800af1a:	e05c      	b.n	800afd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	6a39      	ldr	r1, [r7, #32]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 feb1 	bl	800bc88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e07c      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af4c:	3b01      	subs	r3, #1
 800af4e:	b29a      	uxth	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af66:	b29b      	uxth	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d034      	beq.n	800afd6 <HAL_I2C_Master_Receive+0x186>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d130      	bne.n	800afd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	2200      	movs	r2, #0
 800af7c:	2180      	movs	r1, #128	; 0x80
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 fda9 	bl	800bad6 <I2C_WaitOnFlagUntilTimeout>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e04d      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af92:	b29b      	uxth	r3, r3
 800af94:	2bff      	cmp	r3, #255	; 0xff
 800af96:	d90e      	bls.n	800afb6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	22ff      	movs	r2, #255	; 0xff
 800af9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	8979      	ldrh	r1, [r7, #10]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 ffcc 	bl	800bf4c <I2C_TransferConfig>
 800afb4:	e00f      	b.n	800afd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afba:	b29a      	uxth	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	8979      	ldrh	r1, [r7, #10]
 800afc8:	2300      	movs	r3, #0
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 ffbb 	bl	800bf4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afda:	b29b      	uxth	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d19d      	bne.n	800af1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	6a39      	ldr	r1, [r7, #32]
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f000 fe0c 	bl	800bc02 <I2C_WaitOnSTOPFlagUntilTimeout>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e01a      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2220      	movs	r2, #32
 800affa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6859      	ldr	r1, [r3, #4]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <HAL_I2C_Master_Receive+0x1e8>)
 800b008:	400b      	ands	r3, r1
 800b00a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	e000      	b.n	800b02a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b028:	2302      	movs	r3, #2
  }
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	80002400 	.word	0x80002400
 800b038:	fe00e800 	.word	0xfe00e800

0800b03c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
  }
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00f      	beq.n	800b0b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00a      	beq.n	800b0b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a0:	f043 0201 	orr.w	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00f      	beq.n	800b0dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	f043 0208 	orr.w	r2, r3, #8
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00f      	beq.n	800b106 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f4:	f043 0202 	orr.w	r2, r3, #2
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b104:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f003 030b 	and.w	r3, r3, #11
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800b116:	68f9      	ldr	r1, [r7, #12]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fb83 	bl	800b824 <I2C_ITError>
  }
}
 800b11e:	bf00      	nop
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
 800b15a:	4613      	mov	r3, r2
 800b15c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b172:	bf00      	nop
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b086      	sub	sp, #24
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d101      	bne.n	800b1ca <I2C_Slave_ISR_IT+0x24>
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	e0e1      	b.n	800b38e <I2C_Slave_ISR_IT+0x1e8>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f003 0320 	and.w	r3, r3, #32
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d008      	beq.n	800b1ee <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d003      	beq.n	800b1ee <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b1e6:	6939      	ldr	r1, [r7, #16]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 f9b5 	bl	800b558 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f003 0310 	and.w	r3, r3, #16
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d04b      	beq.n	800b290 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d046      	beq.n	800b290 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b206:	b29b      	uxth	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d128      	bne.n	800b25e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b28      	cmp	r3, #40	; 0x28
 800b216:	d108      	bne.n	800b22a <I2C_Slave_ISR_IT+0x84>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b21e:	d104      	bne.n	800b22a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b220:	6939      	ldr	r1, [r7, #16]
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 faaa 	bl	800b77c <I2C_ITListenCplt>
 800b228:	e031      	b.n	800b28e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b29      	cmp	r3, #41	; 0x29
 800b234:	d10e      	bne.n	800b254 <I2C_Slave_ISR_IT+0xae>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b23c:	d00a      	beq.n	800b254 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2210      	movs	r2, #16
 800b244:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 fc03 	bl	800ba52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 f926 	bl	800b49e <I2C_ITSlaveSeqCplt>
 800b252:	e01c      	b.n	800b28e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2210      	movs	r2, #16
 800b25a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b25c:	e08f      	b.n	800b37e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2210      	movs	r2, #16
 800b264:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26a:	f043 0204 	orr.w	r2, r3, #4
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d003      	beq.n	800b280 <I2C_Slave_ISR_IT+0xda>
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b27e:	d17e      	bne.n	800b37e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b284:	4619      	mov	r1, r3
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 facc 	bl	800b824 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b28c:	e077      	b.n	800b37e <I2C_Slave_ISR_IT+0x1d8>
 800b28e:	e076      	b.n	800b37e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f003 0304 	and.w	r3, r3, #4
 800b296:	2b00      	cmp	r3, #0
 800b298:	d02f      	beq.n	800b2fa <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d02a      	beq.n	800b2fa <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d018      	beq.n	800b2e0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d14b      	bne.n	800b382 <I2C_Slave_ISR_IT+0x1dc>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b2f0:	d047      	beq.n	800b382 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 f8d3 	bl	800b49e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b2f8:	e043      	b.n	800b382 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f003 0308 	and.w	r3, r3, #8
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b30e:	6939      	ldr	r1, [r7, #16]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f840 	bl	800b396 <I2C_ITAddrCplt>
 800b316:	e035      	b.n	800b384 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d030      	beq.n	800b384 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d02b      	beq.n	800b384 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b330:	b29b      	uxth	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d018      	beq.n	800b368 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	781a      	ldrb	r2, [r3, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b350:	b29b      	uxth	r3, r3
 800b352:	3b01      	subs	r3, #1
 800b354:	b29a      	uxth	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	851a      	strh	r2, [r3, #40]	; 0x28
 800b366:	e00d      	b.n	800b384 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b36e:	d002      	beq.n	800b376 <I2C_Slave_ISR_IT+0x1d0>
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 f891 	bl	800b49e <I2C_ITSlaveSeqCplt>
 800b37c:	e002      	b.n	800b384 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800b37e:	bf00      	nop
 800b380:	e000      	b.n	800b384 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800b382:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b3ac:	2b28      	cmp	r3, #40	; 0x28
 800b3ae:	d16a      	bne.n	800b486 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	0c1b      	lsrs	r3, r3, #16
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	0c1b      	lsrs	r3, r3, #16
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b3ce:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3dc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b3ea:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d138      	bne.n	800b466 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b3f4:	897b      	ldrh	r3, [r7, #10]
 800b3f6:	09db      	lsrs	r3, r3, #7
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	89bb      	ldrh	r3, [r7, #12]
 800b3fc:	4053      	eors	r3, r2
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	f003 0306 	and.w	r3, r3, #6
 800b404:	2b00      	cmp	r3, #0
 800b406:	d11c      	bne.n	800b442 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b408:	897b      	ldrh	r3, [r7, #10]
 800b40a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d13b      	bne.n	800b496 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2208      	movs	r2, #8
 800b42a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b434:	89ba      	ldrh	r2, [r7, #12]
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fe87 	bl	800b14e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b440:	e029      	b.n	800b496 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b442:	893b      	ldrh	r3, [r7, #8]
 800b444:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fdb0 	bl	800bfb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b458:	89ba      	ldrh	r2, [r7, #12]
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff fe75 	bl	800b14e <HAL_I2C_AddrCallback>
}
 800b464:	e017      	b.n	800b496 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fda0 	bl	800bfb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b478:	89ba      	ldrh	r2, [r7, #12]
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff fe65 	bl	800b14e <HAL_I2C_AddrCallback>
}
 800b484:	e007      	b.n	800b496 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2208      	movs	r2, #8
 800b48c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d008      	beq.n	800b4d2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e00c      	b.n	800b4ec <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4ea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b29      	cmp	r3, #41	; 0x29
 800b4f6:	d112      	bne.n	800b51e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2228      	movs	r2, #40	; 0x28
 800b4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2221      	movs	r2, #33	; 0x21
 800b504:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b506:	2101      	movs	r1, #1
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fd51 	bl	800bfb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff fe05 	bl	800b126 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b51c:	e017      	b.n	800b54e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b2a      	cmp	r3, #42	; 0x2a
 800b528:	d111      	bne.n	800b54e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2228      	movs	r2, #40	; 0x28
 800b52e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2222      	movs	r2, #34	; 0x22
 800b536:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b538:	2102      	movs	r1, #2
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fd38 	bl	800bfb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff fdf6 	bl	800b13a <HAL_I2C_SlaveRxCpltCallback>
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b574:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2220      	movs	r2, #32
 800b57c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	2b21      	cmp	r3, #33	; 0x21
 800b582:	d002      	beq.n	800b58a <I2C_ITSlaveCplt+0x32>
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b29      	cmp	r3, #41	; 0x29
 800b588:	d108      	bne.n	800b59c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b58a:	f248 0101 	movw	r1, #32769	; 0x8001
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fd0e 	bl	800bfb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2221      	movs	r2, #33	; 0x21
 800b598:	631a      	str	r2, [r3, #48]	; 0x30
 800b59a:	e019      	b.n	800b5d0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	2b22      	cmp	r3, #34	; 0x22
 800b5a0:	d002      	beq.n	800b5a8 <I2C_ITSlaveCplt+0x50>
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5a6:	d108      	bne.n	800b5ba <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b5a8:	f248 0102 	movw	r1, #32770	; 0x8002
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fcff 	bl	800bfb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2222      	movs	r2, #34	; 0x22
 800b5b6:	631a      	str	r2, [r3, #48]	; 0x30
 800b5b8:	e00a      	b.n	800b5d0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2b28      	cmp	r3, #40	; 0x28
 800b5be:	d107      	bne.n	800b5d0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b5c0:	f248 0103 	movw	r1, #32771	; 0x8003
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fcf3 	bl	800bfb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6859      	ldr	r1, [r3, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4b62      	ldr	r3, [pc, #392]	; (800b774 <I2C_ITSlaveCplt+0x21c>)
 800b5ec:	400b      	ands	r3, r1
 800b5ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fa2e 	bl	800ba52 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d013      	beq.n	800b628 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b60e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	d01f      	beq.n	800b658 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b626:	e017      	b.n	800b658 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d012      	beq.n	800b658 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b640:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	2b00      	cmp	r3, #0
 800b648:	d006      	beq.n	800b658 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f003 0304 	and.w	r3, r3, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d020      	beq.n	800b6a4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f023 0304 	bic.w	r3, r3, #4
 800b668:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b68e:	3b01      	subs	r3, #1
 800b690:	b29a      	uxth	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	3b01      	subs	r3, #1
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d005      	beq.n	800b6ba <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6b2:	f043 0204 	orr.w	r2, r3, #4
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d010      	beq.n	800b6f2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f8a4 	bl	800b824 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b28      	cmp	r3, #40	; 0x28
 800b6e6:	d141      	bne.n	800b76c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b6e8:	6979      	ldr	r1, [r7, #20]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f846 	bl	800b77c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b6f0:	e03c      	b.n	800b76c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6fa:	d014      	beq.n	800b726 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fece 	bl	800b49e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <I2C_ITSlaveCplt+0x220>)
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2220      	movs	r2, #32
 800b70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fd23 	bl	800b16a <HAL_I2C_ListenCpltCallback>
}
 800b724:	e022      	b.n	800b76c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b22      	cmp	r3, #34	; 0x22
 800b730:	d10e      	bne.n	800b750 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fcf6 	bl	800b13a <HAL_I2C_SlaveRxCpltCallback>
}
 800b74e:	e00d      	b.n	800b76c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2220      	movs	r2, #32
 800b754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fcdd 	bl	800b126 <HAL_I2C_SlaveTxCpltCallback>
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	fe00e800 	.word	0xfe00e800
 800b778:	ffff0000 	.word	0xffff0000

0800b77c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a25      	ldr	r2, [pc, #148]	; (800b820 <I2C_ITListenCplt+0xa4>)
 800b78a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d022      	beq.n	800b7f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	b2d2      	uxtb	r2, r2
 800b7be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d012      	beq.n	800b7f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f0:	f043 0204 	orr.w	r2, r3, #4
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b7f8:	f248 0103 	movw	r1, #32771	; 0x8003
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fbd7 	bl	800bfb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2210      	movs	r2, #16
 800b808:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fca9 	bl	800b16a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	ffff0000 	.word	0xffff0000

0800b824 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b834:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a6d      	ldr	r2, [pc, #436]	; (800b9f8 <I2C_ITError+0x1d4>)
 800b842:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	431a      	orrs	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	2b28      	cmp	r3, #40	; 0x28
 800b85a:	d005      	beq.n	800b868 <I2C_ITError+0x44>
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	2b29      	cmp	r3, #41	; 0x29
 800b860:	d002      	beq.n	800b868 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	2b2a      	cmp	r3, #42	; 0x2a
 800b866:	d10b      	bne.n	800b880 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b868:	2103      	movs	r1, #3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fba0 	bl	800bfb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2228      	movs	r2, #40	; 0x28
 800b874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a60      	ldr	r2, [pc, #384]	; (800b9fc <I2C_ITError+0x1d8>)
 800b87c:	635a      	str	r2, [r3, #52]	; 0x34
 800b87e:	e030      	b.n	800b8e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b880:	f248 0103 	movw	r1, #32771	; 0x8003
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fb93 	bl	800bfb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f8e1 	bl	800ba52 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b60      	cmp	r3, #96	; 0x60
 800b89a:	d01f      	beq.n	800b8dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	f003 0320 	and.w	r3, r3, #32
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	d114      	bne.n	800b8dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	f003 0310 	and.w	r3, r3, #16
 800b8bc:	2b10      	cmp	r3, #16
 800b8be:	d109      	bne.n	800b8d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2210      	movs	r2, #16
 800b8c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8cc:	f043 0204 	orr.w	r2, r3, #4
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d039      	beq.n	800b964 <I2C_ITError+0x140>
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2b11      	cmp	r3, #17
 800b8f4:	d002      	beq.n	800b8fc <I2C_ITError+0xd8>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b21      	cmp	r3, #33	; 0x21
 800b8fa:	d133      	bne.n	800b964 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b90a:	d107      	bne.n	800b91c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b91a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fee1 	bl	800a6e8 <HAL_DMA_GetState>
 800b926:	4603      	mov	r3, r0
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d017      	beq.n	800b95c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	4a33      	ldr	r2, [pc, #204]	; (800ba00 <I2C_ITError+0x1dc>)
 800b932:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fde1 	bl	800a508 <HAL_DMA_Abort_IT>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d04d      	beq.n	800b9e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b956:	4610      	mov	r0, r2
 800b958:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b95a:	e045      	b.n	800b9e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f851 	bl	800ba04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b962:	e041      	b.n	800b9e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d039      	beq.n	800b9e0 <I2C_ITError+0x1bc>
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b12      	cmp	r3, #18
 800b970:	d002      	beq.n	800b978 <I2C_ITError+0x154>
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b22      	cmp	r3, #34	; 0x22
 800b976:	d133      	bne.n	800b9e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b986:	d107      	bne.n	800b998 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b996:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fea3 	bl	800a6e8 <HAL_DMA_GetState>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d017      	beq.n	800b9d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ac:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <I2C_ITError+0x1dc>)
 800b9ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fda3 	bl	800a508 <HAL_DMA_Abort_IT>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d011      	beq.n	800b9ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9d6:	e009      	b.n	800b9ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f813 	bl	800ba04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9de:	e005      	b.n	800b9ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f80f 	bl	800ba04 <I2C_TreatErrorCallback>
  }
}
 800b9e6:	e002      	b.n	800b9ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b9e8:	bf00      	nop
 800b9ea:	e000      	b.n	800b9ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9ec:	bf00      	nop
}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	ffff0000 	.word	0xffff0000
 800b9fc:	0800b1a7 	.word	0x0800b1a7
 800ba00:	0800ba9b 	.word	0x0800ba9b

0800ba04 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b60      	cmp	r3, #96	; 0x60
 800ba16:	d10e      	bne.n	800ba36 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fbaf 	bl	800b192 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba34:	e009      	b.n	800ba4a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fb9a 	bl	800b17e <HAL_I2C_ErrorCallback>
}
 800ba4a:	bf00      	nop
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	f003 0302 	and.w	r3, r3, #2
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d103      	bne.n	800ba70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d007      	beq.n	800ba8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699a      	ldr	r2, [r3, #24]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0201 	orr.w	r2, r2, #1
 800ba8c:	619a      	str	r2, [r3, #24]
  }
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	2200      	movs	r2, #0
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac4:	2200      	movs	r2, #0
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff ff9b 	bl	800ba04 <I2C_TreatErrorCallback>
}
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	60f8      	str	r0, [r7, #12]
 800bade:	60b9      	str	r1, [r7, #8]
 800bae0:	603b      	str	r3, [r7, #0]
 800bae2:	4613      	mov	r3, r2
 800bae4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bae6:	e031      	b.n	800bb4c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d02d      	beq.n	800bb4c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baf0:	f7fc fd08 	bl	8008504 <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d302      	bcc.n	800bb06 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d122      	bne.n	800bb4c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	699a      	ldr	r2, [r3, #24]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	bf0c      	ite	eq
 800bb16:	2301      	moveq	r3, #1
 800bb18:	2300      	movne	r3, #0
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d113      	bne.n	800bb4c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb28:	f043 0220 	orr.w	r2, r3, #32
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e00f      	b.n	800bb6c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	4013      	ands	r3, r2
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	bf0c      	ite	eq
 800bb5c:	2301      	moveq	r3, #1
 800bb5e:	2300      	movne	r3, #0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d0be      	beq.n	800bae8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb80:	e033      	b.n	800bbea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	68b9      	ldr	r1, [r7, #8]
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 f900 	bl	800bd8c <I2C_IsErrorOccurred>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e031      	b.n	800bbfa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9c:	d025      	beq.n	800bbea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb9e:	f7fc fcb1 	bl	8008504 <HAL_GetTick>
 800bba2:	4602      	mov	r2, r0
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d302      	bcc.n	800bbb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11a      	bne.n	800bbea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d013      	beq.n	800bbea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc6:	f043 0220 	orr.w	r2, r3, #32
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e007      	b.n	800bbfa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d1c4      	bne.n	800bb82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc0e:	e02f      	b.n	800bc70 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f8b9 	bl	800bd8c <I2C_IsErrorOccurred>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e02d      	b.n	800bc80 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc24:	f7fc fc6e 	bl	8008504 <HAL_GetTick>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d302      	bcc.n	800bc3a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d11a      	bne.n	800bc70 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	f003 0320 	and.w	r3, r3, #32
 800bc44:	2b20      	cmp	r3, #32
 800bc46:	d013      	beq.n	800bc70 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4c:	f043 0220 	orr.w	r2, r3, #32
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e007      	b.n	800bc80 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d1c8      	bne.n	800bc10 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc94:	e06b      	b.n	800bd6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	68b9      	ldr	r1, [r7, #8]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 f876 	bl	800bd8c <I2C_IsErrorOccurred>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e069      	b.n	800bd7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	f003 0320 	and.w	r3, r3, #32
 800bcb4:	2b20      	cmp	r3, #32
 800bcb6:	d138      	bne.n	800bd2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d105      	bne.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e055      	b.n	800bd7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d107      	bne.n	800bcf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2210      	movs	r2, #16
 800bce6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2204      	movs	r2, #4
 800bcec:	645a      	str	r2, [r3, #68]	; 0x44
 800bcee:	e002      	b.n	800bcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6859      	ldr	r1, [r3, #4]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	4b1f      	ldr	r3, [pc, #124]	; (800bd88 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800bd0a:	400b      	ands	r3, r1
 800bd0c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e029      	b.n	800bd7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2a:	f7fc fbeb 	bl	8008504 <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d302      	bcc.n	800bd40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d116      	bne.n	800bd6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d00f      	beq.n	800bd6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd52:	f043 0220 	orr.w	r2, r3, #32
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e007      	b.n	800bd7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	d18c      	bne.n	800bc96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	fe00e800 	.word	0xfe00e800

0800bd8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08a      	sub	sp, #40	; 0x28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	f003 0310 	and.w	r3, r3, #16
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d068      	beq.n	800be8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2210      	movs	r2, #16
 800bdbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bdc0:	e049      	b.n	800be56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc8:	d045      	beq.n	800be56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bdca:	f7fc fb9b 	bl	8008504 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d302      	bcc.n	800bde0 <I2C_IsErrorOccurred+0x54>
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d13a      	bne.n	800be56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be02:	d121      	bne.n	800be48 <I2C_IsErrorOccurred+0xbc>
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be0a:	d01d      	beq.n	800be48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800be0c:	7cfb      	ldrb	r3, [r7, #19]
 800be0e:	2b20      	cmp	r3, #32
 800be10:	d01a      	beq.n	800be48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800be22:	f7fc fb6f 	bl	8008504 <HAL_GetTick>
 800be26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800be28:	e00e      	b.n	800be48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800be2a:	f7fc fb6b 	bl	8008504 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	2b19      	cmp	r3, #25
 800be36:	d907      	bls.n	800be48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	f043 0320 	orr.w	r3, r3, #32
 800be3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800be46:	e006      	b.n	800be56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	f003 0320 	and.w	r3, r3, #32
 800be52:	2b20      	cmp	r3, #32
 800be54:	d1e9      	bne.n	800be2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	f003 0320 	and.w	r3, r3, #32
 800be60:	2b20      	cmp	r3, #32
 800be62:	d003      	beq.n	800be6c <I2C_IsErrorOccurred+0xe0>
 800be64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0aa      	beq.n	800bdc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800be6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be70:	2b00      	cmp	r3, #0
 800be72:	d103      	bne.n	800be7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2220      	movs	r2, #32
 800be7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	f043 0304 	orr.w	r3, r3, #4
 800be82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800beac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00b      	beq.n	800bed6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	f043 0308 	orr.w	r3, r3, #8
 800bec4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bece:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	f043 0302 	orr.w	r3, r3, #2
 800bee6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01c      	beq.n	800bf3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7ff fda6 	bl	800ba52 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6859      	ldr	r1, [r3, #4]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <I2C_IsErrorOccurred+0x1bc>)
 800bf12:	400b      	ands	r3, r1
 800bf14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	431a      	orrs	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bf3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3728      	adds	r7, #40	; 0x28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	fe00e800 	.word	0xfe00e800

0800bf4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	607b      	str	r3, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	817b      	strh	r3, [r7, #10]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf5e:	897b      	ldrh	r3, [r7, #10]
 800bf60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bf64:	7a7b      	ldrb	r3, [r7, #9]
 800bf66:	041b      	lsls	r3, r3, #16
 800bf68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	0d5b      	lsrs	r3, r3, #21
 800bf86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bf8a:	4b08      	ldr	r3, [pc, #32]	; (800bfac <I2C_TransferConfig+0x60>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	43db      	mvns	r3, r3
 800bf90:	ea02 0103 	and.w	r1, r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	03ff63ff 	.word	0x03ff63ff

0800bfb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bfc0:	887b      	ldrh	r3, [r7, #2]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00f      	beq.n	800bfea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bfd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bfde:	2b28      	cmp	r3, #40	; 0x28
 800bfe0:	d003      	beq.n	800bfea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bfe8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bfea:	887b      	ldrh	r3, [r7, #2]
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00f      	beq.n	800c014 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bffa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c008:	2b28      	cmp	r3, #40	; 0x28
 800c00a:	d003      	beq.n	800c014 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c012:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	da03      	bge.n	800c024 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c022:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c024:	887b      	ldrh	r3, [r7, #2]
 800c026:	2b10      	cmp	r3, #16
 800c028:	d103      	bne.n	800c032 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c030:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c032:	887b      	ldrh	r3, [r7, #2]
 800c034:	2b20      	cmp	r3, #32
 800c036:	d103      	bne.n	800c040 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f043 0320 	orr.w	r3, r3, #32
 800c03e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c040:	887b      	ldrh	r3, [r7, #2]
 800c042:	2b40      	cmp	r3, #64	; 0x40
 800c044:	d103      	bne.n	800c04e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6819      	ldr	r1, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	43da      	mvns	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	400a      	ands	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]
}
 800c060:	bf00      	nop
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b20      	cmp	r3, #32
 800c080:	d138      	bne.n	800c0f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e032      	b.n	800c0f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2224      	movs	r2, #36	; 0x24
 800c09c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0201 	bic.w	r2, r2, #1
 800c0ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c0be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0201 	orr.w	r2, r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e000      	b.n	800c0f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c0f4:	2302      	movs	r3, #2
  }
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b20      	cmp	r3, #32
 800c116:	d139      	bne.n	800c18c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d101      	bne.n	800c126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c122:	2302      	movs	r3, #2
 800c124:	e033      	b.n	800c18e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2224      	movs	r2, #36	; 0x24
 800c132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f022 0201 	bic.w	r2, r2, #1
 800c144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f042 0201 	orr.w	r2, r2, #1
 800c176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	e000      	b.n	800c18e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c18c:	2302      	movs	r3, #2
  }
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
	...

0800c19c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c1a0:	4b04      	ldr	r3, [pc, #16]	; (800c1b4 <HAL_PWREx_GetVoltageRange+0x18>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	40007000 	.word	0x40007000

0800c1b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1c6:	d130      	bne.n	800c22a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1c8:	4b23      	ldr	r3, [pc, #140]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d4:	d038      	beq.n	800c248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1d6:	4b20      	ldr	r3, [pc, #128]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1de:	4a1e      	ldr	r2, [pc, #120]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c1e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1e6:	4b1d      	ldr	r3, [pc, #116]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2232      	movs	r2, #50	; 0x32
 800c1ec:	fb02 f303 	mul.w	r3, r2, r3
 800c1f0:	4a1b      	ldr	r2, [pc, #108]	; (800c260 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	0c9b      	lsrs	r3, r3, #18
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1fc:	e002      	b.n	800c204 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3b01      	subs	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c204:	4b14      	ldr	r3, [pc, #80]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c210:	d102      	bne.n	800c218 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1f2      	bne.n	800c1fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c218:	4b0f      	ldr	r3, [pc, #60]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c224:	d110      	bne.n	800c248 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e00f      	b.n	800c24a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c22a:	4b0b      	ldr	r3, [pc, #44]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c236:	d007      	beq.n	800c248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c238:	4b07      	ldr	r3, [pc, #28]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c240:	4a05      	ldr	r2, [pc, #20]	; (800c258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c246:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	40007000 	.word	0x40007000
 800c25c:	20000010 	.word	0x20000010
 800c260:	431bde83 	.word	0x431bde83

0800c264 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e3ca      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c276:	4b97      	ldr	r3, [pc, #604]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f003 030c 	and.w	r3, r3, #12
 800c27e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c280:	4b94      	ldr	r3, [pc, #592]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0310 	and.w	r3, r3, #16
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80e4 	beq.w	800c460 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <HAL_RCC_OscConfig+0x4a>
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b0c      	cmp	r3, #12
 800c2a2:	f040 808b 	bne.w	800c3bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	f040 8087 	bne.w	800c3bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c2ae:	4b89      	ldr	r3, [pc, #548]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0302 	and.w	r3, r3, #2
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x62>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e3a2      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1a      	ldr	r2, [r3, #32]
 800c2ca:	4b82      	ldr	r3, [pc, #520]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <HAL_RCC_OscConfig+0x7c>
 800c2d6:	4b7f      	ldr	r3, [pc, #508]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2de:	e005      	b.n	800c2ec <HAL_RCC_OscConfig+0x88>
 800c2e0:	4b7c      	ldr	r3, [pc, #496]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c2e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2e6:	091b      	lsrs	r3, r3, #4
 800c2e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d223      	bcs.n	800c338 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 fd55 	bl	800cda4 <RCC_SetFlashLatencyFromMSIRange>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e383      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c304:	4b73      	ldr	r3, [pc, #460]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a72      	ldr	r2, [pc, #456]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c30a:	f043 0308 	orr.w	r3, r3, #8
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	4b70      	ldr	r3, [pc, #448]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	496d      	ldr	r1, [pc, #436]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c322:	4b6c      	ldr	r3, [pc, #432]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	4968      	ldr	r1, [pc, #416]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c332:	4313      	orrs	r3, r2
 800c334:	604b      	str	r3, [r1, #4]
 800c336:	e025      	b.n	800c384 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c338:	4b66      	ldr	r3, [pc, #408]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a65      	ldr	r2, [pc, #404]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c33e:	f043 0308 	orr.w	r3, r3, #8
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	4b63      	ldr	r3, [pc, #396]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	4960      	ldr	r1, [pc, #384]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c352:	4313      	orrs	r3, r2
 800c354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c356:	4b5f      	ldr	r3, [pc, #380]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	495b      	ldr	r1, [pc, #364]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c366:	4313      	orrs	r3, r2
 800c368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d109      	bne.n	800c384 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a1b      	ldr	r3, [r3, #32]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fd15 	bl	800cda4 <RCC_SetFlashLatencyFromMSIRange>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e343      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c384:	f000 fc4a 	bl	800cc1c <HAL_RCC_GetSysClockFreq>
 800c388:	4602      	mov	r2, r0
 800c38a:	4b52      	ldr	r3, [pc, #328]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	091b      	lsrs	r3, r3, #4
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	4950      	ldr	r1, [pc, #320]	; (800c4d8 <HAL_RCC_OscConfig+0x274>)
 800c396:	5ccb      	ldrb	r3, [r1, r3]
 800c398:	f003 031f 	and.w	r3, r3, #31
 800c39c:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a0:	4a4e      	ldr	r2, [pc, #312]	; (800c4dc <HAL_RCC_OscConfig+0x278>)
 800c3a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c3a4:	4b4e      	ldr	r3, [pc, #312]	; (800c4e0 <HAL_RCC_OscConfig+0x27c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fc f85b 	bl	8008464 <HAL_InitTick>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d052      	beq.n	800c45e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	e327      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d032      	beq.n	800c42a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c3c4:	4b43      	ldr	r3, [pc, #268]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a42      	ldr	r2, [pc, #264]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c3ca:	f043 0301 	orr.w	r3, r3, #1
 800c3ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c3d0:	f7fc f898 	bl	8008504 <HAL_GetTick>
 800c3d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c3d6:	e008      	b.n	800c3ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3d8:	f7fc f894 	bl	8008504 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d901      	bls.n	800c3ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e310      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c3ea:	4b3a      	ldr	r3, [pc, #232]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0302 	and.w	r3, r3, #2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0f0      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c3f6:	4b37      	ldr	r3, [pc, #220]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a36      	ldr	r2, [pc, #216]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c3fc:	f043 0308 	orr.w	r3, r3, #8
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	4b34      	ldr	r3, [pc, #208]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	4931      	ldr	r1, [pc, #196]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c410:	4313      	orrs	r3, r2
 800c412:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c414:	4b2f      	ldr	r3, [pc, #188]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	492c      	ldr	r1, [pc, #176]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c424:	4313      	orrs	r3, r2
 800c426:	604b      	str	r3, [r1, #4]
 800c428:	e01a      	b.n	800c460 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c42a:	4b2a      	ldr	r3, [pc, #168]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a29      	ldr	r2, [pc, #164]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c430:	f023 0301 	bic.w	r3, r3, #1
 800c434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c436:	f7fc f865 	bl	8008504 <HAL_GetTick>
 800c43a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c43c:	e008      	b.n	800c450 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c43e:	f7fc f861 	bl	8008504 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d901      	bls.n	800c450 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e2dd      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c450:	4b20      	ldr	r3, [pc, #128]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1f0      	bne.n	800c43e <HAL_RCC_OscConfig+0x1da>
 800c45c:	e000      	b.n	800c460 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c45e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d074      	beq.n	800c556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d005      	beq.n	800c47e <HAL_RCC_OscConfig+0x21a>
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	2b0c      	cmp	r3, #12
 800c476:	d10e      	bne.n	800c496 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d10b      	bne.n	800c496 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c47e:	4b15      	ldr	r3, [pc, #84]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d064      	beq.n	800c554 <HAL_RCC_OscConfig+0x2f0>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d160      	bne.n	800c554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e2ba      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c49e:	d106      	bne.n	800c4ae <HAL_RCC_OscConfig+0x24a>
 800c4a0:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a0b      	ldr	r2, [pc, #44]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	e026      	b.n	800c4fc <HAL_RCC_OscConfig+0x298>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4b6:	d115      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x280>
 800c4b8:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a02      	ldr	r2, [pc, #8]	; (800c4d4 <HAL_RCC_OscConfig+0x270>)
 800c4ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4ce:	6013      	str	r3, [r2, #0]
 800c4d0:	e014      	b.n	800c4fc <HAL_RCC_OscConfig+0x298>
 800c4d2:	bf00      	nop
 800c4d4:	40021000 	.word	0x40021000
 800c4d8:	080151c4 	.word	0x080151c4
 800c4dc:	20000010 	.word	0x20000010
 800c4e0:	20000014 	.word	0x20000014
 800c4e4:	4ba0      	ldr	r3, [pc, #640]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a9f      	ldr	r2, [pc, #636]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	4b9d      	ldr	r3, [pc, #628]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a9c      	ldr	r2, [pc, #624]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c4f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d013      	beq.n	800c52c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c504:	f7fb fffe 	bl	8008504 <HAL_GetTick>
 800c508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c50a:	e008      	b.n	800c51e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c50c:	f7fb fffa 	bl	8008504 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b64      	cmp	r3, #100	; 0x64
 800c518:	d901      	bls.n	800c51e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e276      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c51e:	4b92      	ldr	r3, [pc, #584]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0f0      	beq.n	800c50c <HAL_RCC_OscConfig+0x2a8>
 800c52a:	e014      	b.n	800c556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c52c:	f7fb ffea 	bl	8008504 <HAL_GetTick>
 800c530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c532:	e008      	b.n	800c546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c534:	f7fb ffe6 	bl	8008504 <HAL_GetTick>
 800c538:	4602      	mov	r2, r0
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	2b64      	cmp	r3, #100	; 0x64
 800c540:	d901      	bls.n	800c546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e262      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c546:	4b88      	ldr	r3, [pc, #544]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1f0      	bne.n	800c534 <HAL_RCC_OscConfig+0x2d0>
 800c552:	e000      	b.n	800c556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d060      	beq.n	800c624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	2b04      	cmp	r3, #4
 800c566:	d005      	beq.n	800c574 <HAL_RCC_OscConfig+0x310>
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	2b0c      	cmp	r3, #12
 800c56c:	d119      	bne.n	800c5a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2b02      	cmp	r3, #2
 800c572:	d116      	bne.n	800c5a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c574:	4b7c      	ldr	r3, [pc, #496]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d005      	beq.n	800c58c <HAL_RCC_OscConfig+0x328>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e23f      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c58c:	4b76      	ldr	r3, [pc, #472]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	061b      	lsls	r3, r3, #24
 800c59a:	4973      	ldr	r1, [pc, #460]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c5a0:	e040      	b.n	800c624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d023      	beq.n	800c5f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5aa:	4b6f      	ldr	r3, [pc, #444]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a6e      	ldr	r2, [pc, #440]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b6:	f7fb ffa5 	bl	8008504 <HAL_GetTick>
 800c5ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5bc:	e008      	b.n	800c5d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5be:	f7fb ffa1 	bl	8008504 <HAL_GetTick>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d901      	bls.n	800c5d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e21d      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c5d0:	4b65      	ldr	r3, [pc, #404]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0f0      	beq.n	800c5be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5dc:	4b62      	ldr	r3, [pc, #392]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	061b      	lsls	r3, r3, #24
 800c5ea:	495f      	ldr	r1, [pc, #380]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	604b      	str	r3, [r1, #4]
 800c5f0:	e018      	b.n	800c624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5f2:	4b5d      	ldr	r3, [pc, #372]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a5c      	ldr	r2, [pc, #368]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5fe:	f7fb ff81 	bl	8008504 <HAL_GetTick>
 800c602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c604:	e008      	b.n	800c618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c606:	f7fb ff7d 	bl	8008504 <HAL_GetTick>
 800c60a:	4602      	mov	r2, r0
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	2b02      	cmp	r3, #2
 800c612:	d901      	bls.n	800c618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e1f9      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c618:	4b53      	ldr	r3, [pc, #332]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f0      	bne.n	800c606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d03c      	beq.n	800c6aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d01c      	beq.n	800c672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c638:	4b4b      	ldr	r3, [pc, #300]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c63a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c63e:	4a4a      	ldr	r2, [pc, #296]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c648:	f7fb ff5c 	bl	8008504 <HAL_GetTick>
 800c64c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c64e:	e008      	b.n	800c662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c650:	f7fb ff58 	bl	8008504 <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d901      	bls.n	800c662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c65e:	2303      	movs	r3, #3
 800c660:	e1d4      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c662:	4b41      	ldr	r3, [pc, #260]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0ef      	beq.n	800c650 <HAL_RCC_OscConfig+0x3ec>
 800c670:	e01b      	b.n	800c6aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c672:	4b3d      	ldr	r3, [pc, #244]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c678:	4a3b      	ldr	r2, [pc, #236]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c67a:	f023 0301 	bic.w	r3, r3, #1
 800c67e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c682:	f7fb ff3f 	bl	8008504 <HAL_GetTick>
 800c686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c688:	e008      	b.n	800c69c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c68a:	f7fb ff3b 	bl	8008504 <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	2b02      	cmp	r3, #2
 800c696:	d901      	bls.n	800c69c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e1b7      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c69c:	4b32      	ldr	r3, [pc, #200]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6a2:	f003 0302 	and.w	r3, r3, #2
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1ef      	bne.n	800c68a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80a6 	beq.w	800c804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c6bc:	4b2a      	ldr	r3, [pc, #168]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10d      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6c8:	4b27      	ldr	r3, [pc, #156]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6cc:	4a26      	ldr	r2, [pc, #152]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800c6d4:	4b24      	ldr	r3, [pc, #144]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6dc:	60bb      	str	r3, [r7, #8]
 800c6de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6e4:	4b21      	ldr	r3, [pc, #132]	; (800c76c <HAL_RCC_OscConfig+0x508>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d118      	bne.n	800c722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c6f0:	4b1e      	ldr	r3, [pc, #120]	; (800c76c <HAL_RCC_OscConfig+0x508>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1d      	ldr	r2, [pc, #116]	; (800c76c <HAL_RCC_OscConfig+0x508>)
 800c6f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6fc:	f7fb ff02 	bl	8008504 <HAL_GetTick>
 800c700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c704:	f7fb fefe 	bl	8008504 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e17a      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c716:	4b15      	ldr	r3, [pc, #84]	; (800c76c <HAL_RCC_OscConfig+0x508>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d108      	bne.n	800c73c <HAL_RCC_OscConfig+0x4d8>
 800c72a:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c730:	4a0d      	ldr	r2, [pc, #52]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c732:	f043 0301 	orr.w	r3, r3, #1
 800c736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c73a:	e029      	b.n	800c790 <HAL_RCC_OscConfig+0x52c>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	2b05      	cmp	r3, #5
 800c742:	d115      	bne.n	800c770 <HAL_RCC_OscConfig+0x50c>
 800c744:	4b08      	ldr	r3, [pc, #32]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c74a:	4a07      	ldr	r2, [pc, #28]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c74c:	f043 0304 	orr.w	r3, r3, #4
 800c750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c754:	4b04      	ldr	r3, [pc, #16]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c75a:	4a03      	ldr	r2, [pc, #12]	; (800c768 <HAL_RCC_OscConfig+0x504>)
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c764:	e014      	b.n	800c790 <HAL_RCC_OscConfig+0x52c>
 800c766:	bf00      	nop
 800c768:	40021000 	.word	0x40021000
 800c76c:	40007000 	.word	0x40007000
 800c770:	4b9c      	ldr	r3, [pc, #624]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c776:	4a9b      	ldr	r2, [pc, #620]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c778:	f023 0301 	bic.w	r3, r3, #1
 800c77c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c780:	4b98      	ldr	r3, [pc, #608]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c786:	4a97      	ldr	r2, [pc, #604]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c788:	f023 0304 	bic.w	r3, r3, #4
 800c78c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d016      	beq.n	800c7c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c798:	f7fb feb4 	bl	8008504 <HAL_GetTick>
 800c79c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c79e:	e00a      	b.n	800c7b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7a0:	f7fb feb0 	bl	8008504 <HAL_GetTick>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d901      	bls.n	800c7b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e12a      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c7b6:	4b8b      	ldr	r3, [pc, #556]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7bc:	f003 0302 	and.w	r3, r3, #2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0ed      	beq.n	800c7a0 <HAL_RCC_OscConfig+0x53c>
 800c7c4:	e015      	b.n	800c7f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7c6:	f7fb fe9d 	bl	8008504 <HAL_GetTick>
 800c7ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c7cc:	e00a      	b.n	800c7e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ce:	f7fb fe99 	bl	8008504 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d901      	bls.n	800c7e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e113      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c7e4:	4b7f      	ldr	r3, [pc, #508]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1ed      	bne.n	800c7ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c7f2:	7ffb      	ldrb	r3, [r7, #31]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d105      	bne.n	800c804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7f8:	4b7a      	ldr	r3, [pc, #488]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7fc:	4a79      	ldr	r2, [pc, #484]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c802:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 80fe 	beq.w	800ca0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c812:	2b02      	cmp	r3, #2
 800c814:	f040 80d0 	bne.w	800c9b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c818:	4b72      	ldr	r3, [pc, #456]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f003 0203 	and.w	r2, r3, #3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c828:	429a      	cmp	r2, r3
 800c82a:	d130      	bne.n	800c88e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	3b01      	subs	r3, #1
 800c838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d127      	bne.n	800c88e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c848:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d11f      	bne.n	800c88e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c858:	2a07      	cmp	r2, #7
 800c85a:	bf14      	ite	ne
 800c85c:	2201      	movne	r2, #1
 800c85e:	2200      	moveq	r2, #0
 800c860:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c862:	4293      	cmp	r3, r2
 800c864:	d113      	bne.n	800c88e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c870:	085b      	lsrs	r3, r3, #1
 800c872:	3b01      	subs	r3, #1
 800c874:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c876:	429a      	cmp	r2, r3
 800c878:	d109      	bne.n	800c88e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	085b      	lsrs	r3, r3, #1
 800c886:	3b01      	subs	r3, #1
 800c888:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d06e      	beq.n	800c96c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	2b0c      	cmp	r3, #12
 800c892:	d069      	beq.n	800c968 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c894:	4b53      	ldr	r3, [pc, #332]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d105      	bne.n	800c8ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c8a0:	4b50      	ldr	r3, [pc, #320]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e0ad      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c8b0:	4b4c      	ldr	r3, [pc, #304]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a4b      	ldr	r2, [pc, #300]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c8b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c8bc:	f7fb fe22 	bl	8008504 <HAL_GetTick>
 800c8c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8c2:	e008      	b.n	800c8d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8c4:	f7fb fe1e 	bl	8008504 <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d901      	bls.n	800c8d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e09a      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8d6:	4b43      	ldr	r3, [pc, #268]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f0      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8e2:	4b40      	ldr	r3, [pc, #256]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	4b40      	ldr	r3, [pc, #256]	; (800c9e8 <HAL_RCC_OscConfig+0x784>)
 800c8e8:	4013      	ands	r3, r2
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c8f2:	3a01      	subs	r2, #1
 800c8f4:	0112      	lsls	r2, r2, #4
 800c8f6:	4311      	orrs	r1, r2
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c8fc:	0212      	lsls	r2, r2, #8
 800c8fe:	4311      	orrs	r1, r2
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c904:	0852      	lsrs	r2, r2, #1
 800c906:	3a01      	subs	r2, #1
 800c908:	0552      	lsls	r2, r2, #21
 800c90a:	4311      	orrs	r1, r2
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c910:	0852      	lsrs	r2, r2, #1
 800c912:	3a01      	subs	r2, #1
 800c914:	0652      	lsls	r2, r2, #25
 800c916:	4311      	orrs	r1, r2
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c91c:	0912      	lsrs	r2, r2, #4
 800c91e:	0452      	lsls	r2, r2, #17
 800c920:	430a      	orrs	r2, r1
 800c922:	4930      	ldr	r1, [pc, #192]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c924:	4313      	orrs	r3, r2
 800c926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c928:	4b2e      	ldr	r3, [pc, #184]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a2d      	ldr	r2, [pc, #180]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c92e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c934:	4b2b      	ldr	r3, [pc, #172]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	4a2a      	ldr	r2, [pc, #168]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c93a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c93e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c940:	f7fb fde0 	bl	8008504 <HAL_GetTick>
 800c944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c946:	e008      	b.n	800c95a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c948:	f7fb fddc 	bl	8008504 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	2b02      	cmp	r3, #2
 800c954:	d901      	bls.n	800c95a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	e058      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c95a:	4b22      	ldr	r3, [pc, #136]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0f0      	beq.n	800c948 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c966:	e050      	b.n	800ca0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e04f      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c96c:	4b1d      	ldr	r3, [pc, #116]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d148      	bne.n	800ca0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c978:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a19      	ldr	r2, [pc, #100]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c97e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c984:	4b17      	ldr	r3, [pc, #92]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	4a16      	ldr	r2, [pc, #88]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c98a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c98e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c990:	f7fb fdb8 	bl	8008504 <HAL_GetTick>
 800c994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c996:	e008      	b.n	800c9aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c998:	f7fb fdb4 	bl	8008504 <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d901      	bls.n	800c9aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e030      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9aa:	4b0e      	ldr	r3, [pc, #56]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0f0      	beq.n	800c998 <HAL_RCC_OscConfig+0x734>
 800c9b6:	e028      	b.n	800ca0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	2b0c      	cmp	r3, #12
 800c9bc:	d023      	beq.n	800ca06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9be:	4b09      	ldr	r3, [pc, #36]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a08      	ldr	r2, [pc, #32]	; (800c9e4 <HAL_RCC_OscConfig+0x780>)
 800c9c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ca:	f7fb fd9b 	bl	8008504 <HAL_GetTick>
 800c9ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9d0:	e00c      	b.n	800c9ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9d2:	f7fb fd97 	bl	8008504 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d905      	bls.n	800c9ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e013      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
 800c9e4:	40021000 	.word	0x40021000
 800c9e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <HAL_RCC_OscConfig+0x7b0>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1ec      	bne.n	800c9d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c9f8:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <HAL_RCC_OscConfig+0x7b0>)
 800c9fa:	68da      	ldr	r2, [r3, #12]
 800c9fc:	4905      	ldr	r1, [pc, #20]	; (800ca14 <HAL_RCC_OscConfig+0x7b0>)
 800c9fe:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <HAL_RCC_OscConfig+0x7b4>)
 800ca00:	4013      	ands	r3, r2
 800ca02:	60cb      	str	r3, [r1, #12]
 800ca04:	e001      	b.n	800ca0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3720      	adds	r7, #32
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	40021000 	.word	0x40021000
 800ca18:	feeefffc 	.word	0xfeeefffc

0800ca1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e0e7      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ca30:	4b75      	ldr	r3, [pc, #468]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d910      	bls.n	800ca60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca3e:	4b72      	ldr	r3, [pc, #456]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f023 0207 	bic.w	r2, r3, #7
 800ca46:	4970      	ldr	r1, [pc, #448]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca4e:	4b6e      	ldr	r3, [pc, #440]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d001      	beq.n	800ca60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e0cf      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d010      	beq.n	800ca8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	4b66      	ldr	r3, [pc, #408]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d908      	bls.n	800ca8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca7c:	4b63      	ldr	r3, [pc, #396]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	4960      	ldr	r1, [pc, #384]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d04c      	beq.n	800cb34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d107      	bne.n	800cab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800caa2:	4b5a      	ldr	r3, [pc, #360]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d121      	bne.n	800caf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e0a6      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d107      	bne.n	800caca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800caba:	4b54      	ldr	r3, [pc, #336]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d115      	bne.n	800caf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	e09a      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d107      	bne.n	800cae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cad2:	4b4e      	ldr	r3, [pc, #312]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0302 	and.w	r3, r3, #2
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d109      	bne.n	800caf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e08e      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cae2:	4b4a      	ldr	r3, [pc, #296]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	e086      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800caf2:	4b46      	ldr	r3, [pc, #280]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	f023 0203 	bic.w	r2, r3, #3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	4943      	ldr	r1, [pc, #268]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cb00:	4313      	orrs	r3, r2
 800cb02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb04:	f7fb fcfe 	bl	8008504 <HAL_GetTick>
 800cb08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb0a:	e00a      	b.n	800cb22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb0c:	f7fb fcfa 	bl	8008504 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d901      	bls.n	800cb22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	e06e      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb22:	4b3a      	ldr	r3, [pc, #232]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	f003 020c 	and.w	r2, r3, #12
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d1eb      	bne.n	800cb0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0302 	and.w	r3, r3, #2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d010      	beq.n	800cb62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	4b31      	ldr	r3, [pc, #196]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d208      	bcs.n	800cb62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb50:	4b2e      	ldr	r3, [pc, #184]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	492b      	ldr	r1, [pc, #172]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cb62:	4b29      	ldr	r3, [pc, #164]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d210      	bcs.n	800cb92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb70:	4b25      	ldr	r3, [pc, #148]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f023 0207 	bic.w	r2, r3, #7
 800cb78:	4923      	ldr	r1, [pc, #140]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb80:	4b21      	ldr	r3, [pc, #132]	; (800cc08 <HAL_RCC_ClockConfig+0x1ec>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 0307 	and.w	r3, r3, #7
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d001      	beq.n	800cb92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e036      	b.n	800cc00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0304 	and.w	r3, r3, #4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d008      	beq.n	800cbb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb9e:	4b1b      	ldr	r3, [pc, #108]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	4918      	ldr	r1, [pc, #96]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cbac:	4313      	orrs	r3, r2
 800cbae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0308 	and.w	r3, r3, #8
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d009      	beq.n	800cbd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cbbc:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	4910      	ldr	r1, [pc, #64]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cbd0:	f000 f824 	bl	800cc1c <HAL_RCC_GetSysClockFreq>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <HAL_RCC_ClockConfig+0x1f0>)
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	091b      	lsrs	r3, r3, #4
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	490b      	ldr	r1, [pc, #44]	; (800cc10 <HAL_RCC_ClockConfig+0x1f4>)
 800cbe2:	5ccb      	ldrb	r3, [r1, r3]
 800cbe4:	f003 031f 	and.w	r3, r3, #31
 800cbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbec:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <HAL_RCC_ClockConfig+0x1f8>)
 800cbee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cbf0:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <HAL_RCC_ClockConfig+0x1fc>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fb fc35 	bl	8008464 <HAL_InitTick>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	72fb      	strb	r3, [r7, #11]

  return status;
 800cbfe:	7afb      	ldrb	r3, [r7, #11]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	40022000 	.word	0x40022000
 800cc0c:	40021000 	.word	0x40021000
 800cc10:	080151c4 	.word	0x080151c4
 800cc14:	20000010 	.word	0x20000010
 800cc18:	20000014 	.word	0x20000014

0800cc1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b089      	sub	sp, #36	; 0x24
 800cc20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	61fb      	str	r3, [r7, #28]
 800cc26:	2300      	movs	r3, #0
 800cc28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc2a:	4b3e      	ldr	r3, [pc, #248]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f003 030c 	and.w	r3, r3, #12
 800cc32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc34:	4b3b      	ldr	r3, [pc, #236]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0303 	and.w	r3, r3, #3
 800cc3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d005      	beq.n	800cc50 <HAL_RCC_GetSysClockFreq+0x34>
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2b0c      	cmp	r3, #12
 800cc48:	d121      	bne.n	800cc8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d11e      	bne.n	800cc8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cc50:	4b34      	ldr	r3, [pc, #208]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0308 	and.w	r3, r3, #8
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d107      	bne.n	800cc6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800cc5c:	4b31      	ldr	r3, [pc, #196]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cc5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc62:	0a1b      	lsrs	r3, r3, #8
 800cc64:	f003 030f 	and.w	r3, r3, #15
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	e005      	b.n	800cc78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800cc6c:	4b2d      	ldr	r3, [pc, #180]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	091b      	lsrs	r3, r3, #4
 800cc72:	f003 030f 	and.w	r3, r3, #15
 800cc76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cc78:	4a2b      	ldr	r2, [pc, #172]	; (800cd28 <HAL_RCC_GetSysClockFreq+0x10c>)
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10d      	bne.n	800cca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cc8c:	e00a      	b.n	800cca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d102      	bne.n	800cc9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc94:	4b25      	ldr	r3, [pc, #148]	; (800cd2c <HAL_RCC_GetSysClockFreq+0x110>)
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	e004      	b.n	800cca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d101      	bne.n	800cca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cca0:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <HAL_RCC_GetSysClockFreq+0x114>)
 800cca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b0c      	cmp	r3, #12
 800cca8:	d134      	bne.n	800cd14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ccaa:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	f003 0303 	and.w	r3, r3, #3
 800ccb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d003      	beq.n	800ccc2 <HAL_RCC_GetSysClockFreq+0xa6>
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d003      	beq.n	800ccc8 <HAL_RCC_GetSysClockFreq+0xac>
 800ccc0:	e005      	b.n	800ccce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ccc2:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <HAL_RCC_GetSysClockFreq+0x110>)
 800ccc4:	617b      	str	r3, [r7, #20]
      break;
 800ccc6:	e005      	b.n	800ccd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ccc8:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <HAL_RCC_GetSysClockFreq+0x114>)
 800ccca:	617b      	str	r3, [r7, #20]
      break;
 800cccc:	e002      	b.n	800ccd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	617b      	str	r3, [r7, #20]
      break;
 800ccd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ccd4:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	091b      	lsrs	r3, r3, #4
 800ccda:	f003 0307 	and.w	r3, r3, #7
 800ccde:	3301      	adds	r3, #1
 800cce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800cce2:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	0a1b      	lsrs	r3, r3, #8
 800cce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	fb03 f202 	mul.w	r2, r3, r2
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <HAL_RCC_GetSysClockFreq+0x108>)
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	0e5b      	lsrs	r3, r3, #25
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	3301      	adds	r3, #1
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cd14:	69bb      	ldr	r3, [r7, #24]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3724      	adds	r7, #36	; 0x24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	40021000 	.word	0x40021000
 800cd28:	080151dc 	.word	0x080151dc
 800cd2c:	00f42400 	.word	0x00f42400
 800cd30:	007a1200 	.word	0x007a1200

0800cd34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd38:	4b03      	ldr	r3, [pc, #12]	; (800cd48 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop
 800cd48:	20000010 	.word	0x20000010

0800cd4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cd50:	f7ff fff0 	bl	800cd34 <HAL_RCC_GetHCLKFreq>
 800cd54:	4602      	mov	r2, r0
 800cd56:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	0a1b      	lsrs	r3, r3, #8
 800cd5c:	f003 0307 	and.w	r3, r3, #7
 800cd60:	4904      	ldr	r1, [pc, #16]	; (800cd74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cd62:	5ccb      	ldrb	r3, [r1, r3]
 800cd64:	f003 031f 	and.w	r3, r3, #31
 800cd68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	40021000 	.word	0x40021000
 800cd74:	080151d4 	.word	0x080151d4

0800cd78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cd7c:	f7ff ffda 	bl	800cd34 <HAL_RCC_GetHCLKFreq>
 800cd80:	4602      	mov	r2, r0
 800cd82:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	0adb      	lsrs	r3, r3, #11
 800cd88:	f003 0307 	and.w	r3, r3, #7
 800cd8c:	4904      	ldr	r1, [pc, #16]	; (800cda0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd8e:	5ccb      	ldrb	r3, [r1, r3]
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	40021000 	.word	0x40021000
 800cda0:	080151d4 	.word	0x080151d4

0800cda4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cdac:	2300      	movs	r3, #0
 800cdae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cdb0:	4b2a      	ldr	r3, [pc, #168]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cdb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cdbc:	f7ff f9ee 	bl	800c19c <HAL_PWREx_GetVoltageRange>
 800cdc0:	6178      	str	r0, [r7, #20]
 800cdc2:	e014      	b.n	800cdee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cdc4:	4b25      	ldr	r3, [pc, #148]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cdc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc8:	4a24      	ldr	r2, [pc, #144]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cdca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdce:	6593      	str	r3, [r2, #88]	; 0x58
 800cdd0:	4b22      	ldr	r3, [pc, #136]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cddc:	f7ff f9de 	bl	800c19c <HAL_PWREx_GetVoltageRange>
 800cde0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cde2:	4b1e      	ldr	r3, [pc, #120]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cde4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde6:	4a1d      	ldr	r2, [pc, #116]	; (800ce5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cde8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf4:	d10b      	bne.n	800ce0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b80      	cmp	r3, #128	; 0x80
 800cdfa:	d919      	bls.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2ba0      	cmp	r3, #160	; 0xa0
 800ce00:	d902      	bls.n	800ce08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ce02:	2302      	movs	r3, #2
 800ce04:	613b      	str	r3, [r7, #16]
 800ce06:	e013      	b.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ce08:	2301      	movs	r3, #1
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	e010      	b.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d902      	bls.n	800ce1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ce14:	2303      	movs	r3, #3
 800ce16:	613b      	str	r3, [r7, #16]
 800ce18:	e00a      	b.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b80      	cmp	r3, #128	; 0x80
 800ce1e:	d102      	bne.n	800ce26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ce20:	2302      	movs	r3, #2
 800ce22:	613b      	str	r3, [r7, #16]
 800ce24:	e004      	b.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b70      	cmp	r3, #112	; 0x70
 800ce2a:	d101      	bne.n	800ce30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f023 0207 	bic.w	r2, r3, #7
 800ce38:	4909      	ldr	r1, [pc, #36]	; (800ce60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ce40:	4b07      	ldr	r3, [pc, #28]	; (800ce60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 0307 	and.w	r3, r3, #7
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d001      	beq.n	800ce52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e000      	b.n	800ce54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	40021000 	.word	0x40021000
 800ce60:	40022000 	.word	0x40022000

0800ce64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ce70:	2300      	movs	r3, #0
 800ce72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d041      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ce88:	d02a      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ce8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ce8e:	d824      	bhi.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ce90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce94:	d008      	beq.n	800cea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ce96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce9a:	d81e      	bhi.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00a      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cea4:	d010      	beq.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cea6:	e018      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cea8:	4b86      	ldr	r3, [pc, #536]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	4a85      	ldr	r2, [pc, #532]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ceae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ceb4:	e015      	b.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3304      	adds	r3, #4
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fabb 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800cec2:	4603      	mov	r3, r0
 800cec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cec6:	e00c      	b.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3320      	adds	r3, #32
 800cecc:	2100      	movs	r1, #0
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fba6 	bl	800d620 <RCCEx_PLLSAI2_Config>
 800ced4:	4603      	mov	r3, r0
 800ced6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ced8:	e003      	b.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	74fb      	strb	r3, [r7, #19]
      break;
 800cede:	e000      	b.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cee2:	7cfb      	ldrb	r3, [r7, #19]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cee8:	4b76      	ldr	r3, [pc, #472]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ceea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef6:	4973      	ldr	r1, [pc, #460]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cefe:	e001      	b.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf00:	7cfb      	ldrb	r3, [r7, #19]
 800cf02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d041      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf18:	d02a      	beq.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cf1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf1e:	d824      	bhi.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cf20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf24:	d008      	beq.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cf26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf2a:	d81e      	bhi.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00a      	beq.n	800cf46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cf30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf34:	d010      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cf36:	e018      	b.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cf38:	4b62      	ldr	r3, [pc, #392]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	4a61      	ldr	r2, [pc, #388]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cf3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cf44:	e015      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fa73 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800cf52:	4603      	mov	r3, r0
 800cf54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cf56:	e00c      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3320      	adds	r3, #32
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fb5e 	bl	800d620 <RCCEx_PLLSAI2_Config>
 800cf64:	4603      	mov	r3, r0
 800cf66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cf68:	e003      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	74fb      	strb	r3, [r7, #19]
      break;
 800cf6e:	e000      	b.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cf70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf72:	7cfb      	ldrb	r3, [r7, #19]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cf78:	4b52      	ldr	r3, [pc, #328]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf86:	494f      	ldr	r1, [pc, #316]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cf8e:	e001      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf90:	7cfb      	ldrb	r3, [r7, #19]
 800cf92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80a0 	beq.w	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cfa6:	4b47      	ldr	r3, [pc, #284]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cfa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00d      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfbc:	4b41      	ldr	r3, [pc, #260]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cfbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc0:	4a40      	ldr	r2, [pc, #256]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cfc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfc6:	6593      	str	r3, [r2, #88]	; 0x58
 800cfc8:	4b3e      	ldr	r3, [pc, #248]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cfca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfd0:	60bb      	str	r3, [r7, #8]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cfd8:	4b3b      	ldr	r3, [pc, #236]	; (800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a3a      	ldr	r2, [pc, #232]	; (800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cfde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cfe4:	f7fb fa8e 	bl	8008504 <HAL_GetTick>
 800cfe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cfea:	e009      	b.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfec:	f7fb fa8a 	bl	8008504 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d902      	bls.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cffa:	2303      	movs	r3, #3
 800cffc:	74fb      	strb	r3, [r7, #19]
        break;
 800cffe:	e005      	b.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d000:	4b31      	ldr	r3, [pc, #196]	; (800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0ef      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800d00c:	7cfb      	ldrb	r3, [r7, #19]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d15c      	bne.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d012:	4b2c      	ldr	r3, [pc, #176]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d01c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01f      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d019      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d030:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d03a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d03c:	4b21      	ldr	r3, [pc, #132]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d042:	4a20      	ldr	r2, [pc, #128]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d04c:	4b1d      	ldr	r3, [pc, #116]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d052:	4a1c      	ldr	r2, [pc, #112]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d05c:	4a19      	ldr	r2, [pc, #100]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d016      	beq.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d06e:	f7fb fa49 	bl	8008504 <HAL_GetTick>
 800d072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d074:	e00b      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d076:	f7fb fa45 	bl	8008504 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	f241 3288 	movw	r2, #5000	; 0x1388
 800d084:	4293      	cmp	r3, r2
 800d086:	d902      	bls.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800d088:	2303      	movs	r3, #3
 800d08a:	74fb      	strb	r3, [r7, #19]
            break;
 800d08c:	e006      	b.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d094:	f003 0302 	and.w	r3, r3, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0ec      	beq.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800d09c:	7cfb      	ldrb	r3, [r7, #19]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10c      	bne.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d0a2:	4b08      	ldr	r3, [pc, #32]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0b2:	4904      	ldr	r1, [pc, #16]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0ba:	e009      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d0bc:	7cfb      	ldrb	r3, [r7, #19]
 800d0be:	74bb      	strb	r3, [r7, #18]
 800d0c0:	e006      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800d0c2:	bf00      	nop
 800d0c4:	40021000 	.word	0x40021000
 800d0c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0cc:	7cfb      	ldrb	r3, [r7, #19]
 800d0ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d0d0:	7c7b      	ldrb	r3, [r7, #17]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d105      	bne.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0d6:	4b9e      	ldr	r3, [pc, #632]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0da:	4a9d      	ldr	r2, [pc, #628]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d0dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0ee:	4b98      	ldr	r3, [pc, #608]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0f4:	f023 0203 	bic.w	r2, r3, #3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fc:	4994      	ldr	r1, [pc, #592]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f003 0302 	and.w	r3, r3, #2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00a      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d110:	4b8f      	ldr	r3, [pc, #572]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d116:	f023 020c 	bic.w	r2, r3, #12
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d11e:	498c      	ldr	r1, [pc, #560]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d120:	4313      	orrs	r3, r2
 800d122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0304 	and.w	r3, r3, #4
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d132:	4b87      	ldr	r3, [pc, #540]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d138:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d140:	4983      	ldr	r1, [pc, #524]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d142:	4313      	orrs	r3, r2
 800d144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0308 	and.w	r3, r3, #8
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00a      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d154:	4b7e      	ldr	r3, [pc, #504]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d15a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d162:	497b      	ldr	r1, [pc, #492]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d164:	4313      	orrs	r3, r2
 800d166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0310 	and.w	r3, r3, #16
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00a      	beq.n	800d18c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d176:	4b76      	ldr	r3, [pc, #472]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d17c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d184:	4972      	ldr	r1, [pc, #456]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d186:	4313      	orrs	r3, r2
 800d188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00a      	beq.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d198:	4b6d      	ldr	r3, [pc, #436]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d19e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a6:	496a      	ldr	r1, [pc, #424]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00a      	beq.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1ba:	4b65      	ldr	r3, [pc, #404]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1c8:	4961      	ldr	r1, [pc, #388]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00a      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d1dc:	4b5c      	ldr	r3, [pc, #368]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ea:	4959      	ldr	r1, [pc, #356]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00a      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d1fe:	4b54      	ldr	r3, [pc, #336]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d20c:	4950      	ldr	r1, [pc, #320]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00a      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d220:	4b4b      	ldr	r3, [pc, #300]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d226:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22e:	4948      	ldr	r1, [pc, #288]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d230:	4313      	orrs	r3, r2
 800d232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00a      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d242:	4b43      	ldr	r3, [pc, #268]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d250:	493f      	ldr	r1, [pc, #252]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d252:	4313      	orrs	r3, r2
 800d254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d028      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d264:	4b3a      	ldr	r3, [pc, #232]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d26a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d272:	4937      	ldr	r1, [pc, #220]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d274:	4313      	orrs	r3, r2
 800d276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d282:	d106      	bne.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d284:	4b32      	ldr	r3, [pc, #200]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	4a31      	ldr	r2, [pc, #196]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d28a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d28e:	60d3      	str	r3, [r2, #12]
 800d290:	e011      	b.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d29a:	d10c      	bne.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f8c8 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d2ac:	7cfb      	ldrb	r3, [r7, #19]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800d2b2:	7cfb      	ldrb	r3, [r7, #19]
 800d2b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d028      	beq.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d2c2:	4b23      	ldr	r3, [pc, #140]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d0:	491f      	ldr	r1, [pc, #124]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2e0:	d106      	bne.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2e2:	4b1b      	ldr	r3, [pc, #108]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	4a1a      	ldr	r2, [pc, #104]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d2e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ec:	60d3      	str	r3, [r2, #12]
 800d2ee:	e011      	b.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2f8:	d10c      	bne.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	2101      	movs	r1, #1
 800d300:	4618      	mov	r0, r3
 800d302:	f000 f899 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800d306:	4603      	mov	r3, r0
 800d308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d30a:	7cfb      	ldrb	r3, [r7, #19]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800d310:	7cfb      	ldrb	r3, [r7, #19]
 800d312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d02b      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d320:	4b0b      	ldr	r3, [pc, #44]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d32e:	4908      	ldr	r1, [pc, #32]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d330:	4313      	orrs	r3, r2
 800d332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d33e:	d109      	bne.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d340:	4b03      	ldr	r3, [pc, #12]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	4a02      	ldr	r2, [pc, #8]	; (800d350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d34a:	60d3      	str	r3, [r2, #12]
 800d34c:	e014      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d34e:	bf00      	nop
 800d350:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d35c:	d10c      	bne.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3304      	adds	r3, #4
 800d362:	2101      	movs	r1, #1
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f867 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800d36a:	4603      	mov	r3, r0
 800d36c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d36e:	7cfb      	ldrb	r3, [r7, #19]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800d374:	7cfb      	ldrb	r3, [r7, #19]
 800d376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d02f      	beq.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d384:	4b2b      	ldr	r3, [pc, #172]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d38a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d392:	4928      	ldr	r1, [pc, #160]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d394:	4313      	orrs	r3, r2
 800d396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d39e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3a2:	d10d      	bne.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	2102      	movs	r1, #2
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 f844 	bl	800d438 <RCCEx_PLLSAI1_Config>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d3b4:	7cfb      	ldrb	r3, [r7, #19]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d3ba:	7cfb      	ldrb	r3, [r7, #19]
 800d3bc:	74bb      	strb	r3, [r7, #18]
 800d3be:	e011      	b.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c8:	d10c      	bne.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3320      	adds	r3, #32
 800d3ce:	2102      	movs	r1, #2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 f925 	bl	800d620 <RCCEx_PLLSAI2_Config>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d3da:	7cfb      	ldrb	r3, [r7, #19]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800d3e0:	7cfb      	ldrb	r3, [r7, #19]
 800d3e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d3f0:	4b10      	ldr	r3, [pc, #64]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3fe:	490d      	ldr	r1, [pc, #52]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d400:	4313      	orrs	r3, r2
 800d402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00b      	beq.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d412:	4b08      	ldr	r3, [pc, #32]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d418:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d422:	4904      	ldr	r1, [pc, #16]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d424:	4313      	orrs	r3, r2
 800d426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d42a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	40021000 	.word	0x40021000

0800d438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d446:	4b75      	ldr	r3, [pc, #468]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d018      	beq.n	800d484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d452:	4b72      	ldr	r3, [pc, #456]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	f003 0203 	and.w	r2, r3, #3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d10d      	bne.n	800d47e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
       ||
 800d466:	2b00      	cmp	r3, #0
 800d468:	d009      	beq.n	800d47e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d46a:	4b6c      	ldr	r3, [pc, #432]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	091b      	lsrs	r3, r3, #4
 800d470:	f003 0307 	and.w	r3, r3, #7
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
       ||
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d047      	beq.n	800d50e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	73fb      	strb	r3, [r7, #15]
 800d482:	e044      	b.n	800d50e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d018      	beq.n	800d4be <RCCEx_PLLSAI1_Config+0x86>
 800d48c:	2b03      	cmp	r3, #3
 800d48e:	d825      	bhi.n	800d4dc <RCCEx_PLLSAI1_Config+0xa4>
 800d490:	2b01      	cmp	r3, #1
 800d492:	d002      	beq.n	800d49a <RCCEx_PLLSAI1_Config+0x62>
 800d494:	2b02      	cmp	r3, #2
 800d496:	d009      	beq.n	800d4ac <RCCEx_PLLSAI1_Config+0x74>
 800d498:	e020      	b.n	800d4dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d49a:	4b60      	ldr	r3, [pc, #384]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 0302 	and.w	r3, r3, #2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d11d      	bne.n	800d4e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d4aa:	e01a      	b.n	800d4e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d4ac:	4b5b      	ldr	r3, [pc, #364]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d116      	bne.n	800d4e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d4bc:	e013      	b.n	800d4e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d4be:	4b57      	ldr	r3, [pc, #348]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10f      	bne.n	800d4ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d4ca:	4b54      	ldr	r3, [pc, #336]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d109      	bne.n	800d4ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d4da:	e006      	b.n	800d4ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	73fb      	strb	r3, [r7, #15]
      break;
 800d4e0:	e004      	b.n	800d4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4e2:	bf00      	nop
 800d4e4:	e002      	b.n	800d4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4e6:	bf00      	nop
 800d4e8:	e000      	b.n	800d4ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4ea:	bf00      	nop
    }

    if(status == HAL_OK)
 800d4ec:	7bfb      	ldrb	r3, [r7, #15]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10d      	bne.n	800d50e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d4f2:	4b4a      	ldr	r3, [pc, #296]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6819      	ldr	r1, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	3b01      	subs	r3, #1
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	430b      	orrs	r3, r1
 800d508:	4944      	ldr	r1, [pc, #272]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d17d      	bne.n	800d610 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d514:	4b41      	ldr	r3, [pc, #260]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a40      	ldr	r2, [pc, #256]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d51a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d520:	f7fa fff0 	bl	8008504 <HAL_GetTick>
 800d524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d526:	e009      	b.n	800d53c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d528:	f7fa ffec 	bl	8008504 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	2b02      	cmp	r3, #2
 800d534:	d902      	bls.n	800d53c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d536:	2303      	movs	r3, #3
 800d538:	73fb      	strb	r3, [r7, #15]
        break;
 800d53a:	e005      	b.n	800d548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d53c:	4b37      	ldr	r3, [pc, #220]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1ef      	bne.n	800d528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d160      	bne.n	800d610 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d111      	bne.n	800d578 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d554:	4b31      	ldr	r3, [pc, #196]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d556:	691b      	ldr	r3, [r3, #16]
 800d558:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d55c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	6892      	ldr	r2, [r2, #8]
 800d564:	0211      	lsls	r1, r2, #8
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68d2      	ldr	r2, [r2, #12]
 800d56a:	0912      	lsrs	r2, r2, #4
 800d56c:	0452      	lsls	r2, r2, #17
 800d56e:	430a      	orrs	r2, r1
 800d570:	492a      	ldr	r1, [pc, #168]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d572:	4313      	orrs	r3, r2
 800d574:	610b      	str	r3, [r1, #16]
 800d576:	e027      	b.n	800d5c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d112      	bne.n	800d5a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d57e:	4b27      	ldr	r3, [pc, #156]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d586:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	6892      	ldr	r2, [r2, #8]
 800d58e:	0211      	lsls	r1, r2, #8
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	6912      	ldr	r2, [r2, #16]
 800d594:	0852      	lsrs	r2, r2, #1
 800d596:	3a01      	subs	r2, #1
 800d598:	0552      	lsls	r2, r2, #21
 800d59a:	430a      	orrs	r2, r1
 800d59c:	491f      	ldr	r1, [pc, #124]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	610b      	str	r3, [r1, #16]
 800d5a2:	e011      	b.n	800d5c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d5a4:	4b1d      	ldr	r3, [pc, #116]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d5ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	6892      	ldr	r2, [r2, #8]
 800d5b4:	0211      	lsls	r1, r2, #8
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6952      	ldr	r2, [r2, #20]
 800d5ba:	0852      	lsrs	r2, r2, #1
 800d5bc:	3a01      	subs	r2, #1
 800d5be:	0652      	lsls	r2, r2, #25
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	4916      	ldr	r1, [pc, #88]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d5c8:	4b14      	ldr	r3, [pc, #80]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a13      	ldr	r2, [pc, #76]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d5ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5d4:	f7fa ff96 	bl	8008504 <HAL_GetTick>
 800d5d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d5da:	e009      	b.n	800d5f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5dc:	f7fa ff92 	bl	8008504 <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d902      	bls.n	800d5f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	73fb      	strb	r3, [r7, #15]
          break;
 800d5ee:	e005      	b.n	800d5fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d5f0:	4b0a      	ldr	r3, [pc, #40]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0ef      	beq.n	800d5dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d106      	bne.n	800d610 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d602:	4b06      	ldr	r3, [pc, #24]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d604:	691a      	ldr	r2, [r3, #16]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	4904      	ldr	r1, [pc, #16]	; (800d61c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d60c:	4313      	orrs	r3, r2
 800d60e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	40021000 	.word	0x40021000

0800d620 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d62e:	4b6a      	ldr	r3, [pc, #424]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d018      	beq.n	800d66c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d63a:	4b67      	ldr	r3, [pc, #412]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	f003 0203 	and.w	r2, r3, #3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	d10d      	bne.n	800d666 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
       ||
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d009      	beq.n	800d666 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d652:	4b61      	ldr	r3, [pc, #388]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	091b      	lsrs	r3, r3, #4
 800d658:	f003 0307 	and.w	r3, r3, #7
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
       ||
 800d662:	429a      	cmp	r2, r3
 800d664:	d047      	beq.n	800d6f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	73fb      	strb	r3, [r7, #15]
 800d66a:	e044      	b.n	800d6f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b03      	cmp	r3, #3
 800d672:	d018      	beq.n	800d6a6 <RCCEx_PLLSAI2_Config+0x86>
 800d674:	2b03      	cmp	r3, #3
 800d676:	d825      	bhi.n	800d6c4 <RCCEx_PLLSAI2_Config+0xa4>
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d002      	beq.n	800d682 <RCCEx_PLLSAI2_Config+0x62>
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d009      	beq.n	800d694 <RCCEx_PLLSAI2_Config+0x74>
 800d680:	e020      	b.n	800d6c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d682:	4b55      	ldr	r3, [pc, #340]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0302 	and.w	r3, r3, #2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d11d      	bne.n	800d6ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d692:	e01a      	b.n	800d6ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d694:	4b50      	ldr	r3, [pc, #320]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d116      	bne.n	800d6ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d6a4:	e013      	b.n	800d6ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d6a6:	4b4c      	ldr	r3, [pc, #304]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10f      	bne.n	800d6d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d6b2:	4b49      	ldr	r3, [pc, #292]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d109      	bne.n	800d6d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d6c2:	e006      	b.n	800d6d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d6c8:	e004      	b.n	800d6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d6ca:	bf00      	nop
 800d6cc:	e002      	b.n	800d6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d6ce:	bf00      	nop
 800d6d0:	e000      	b.n	800d6d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d6d2:	bf00      	nop
    }

    if(status == HAL_OK)
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10d      	bne.n	800d6f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d6da:	4b3f      	ldr	r3, [pc, #252]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6819      	ldr	r1, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	011b      	lsls	r3, r3, #4
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	4939      	ldr	r1, [pc, #228]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d167      	bne.n	800d7cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d6fc:	4b36      	ldr	r3, [pc, #216]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a35      	ldr	r2, [pc, #212]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d708:	f7fa fefc 	bl	8008504 <HAL_GetTick>
 800d70c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d70e:	e009      	b.n	800d724 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d710:	f7fa fef8 	bl	8008504 <HAL_GetTick>
 800d714:	4602      	mov	r2, r0
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d902      	bls.n	800d724 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d71e:	2303      	movs	r3, #3
 800d720:	73fb      	strb	r3, [r7, #15]
        break;
 800d722:	e005      	b.n	800d730 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d724:	4b2c      	ldr	r3, [pc, #176]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1ef      	bne.n	800d710 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d14a      	bne.n	800d7cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d111      	bne.n	800d760 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d73c:	4b26      	ldr	r3, [pc, #152]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6892      	ldr	r2, [r2, #8]
 800d74c:	0211      	lsls	r1, r2, #8
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	68d2      	ldr	r2, [r2, #12]
 800d752:	0912      	lsrs	r2, r2, #4
 800d754:	0452      	lsls	r2, r2, #17
 800d756:	430a      	orrs	r2, r1
 800d758:	491f      	ldr	r1, [pc, #124]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d75a:	4313      	orrs	r3, r2
 800d75c:	614b      	str	r3, [r1, #20]
 800d75e:	e011      	b.n	800d784 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d760:	4b1d      	ldr	r3, [pc, #116]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	6892      	ldr	r2, [r2, #8]
 800d770:	0211      	lsls	r1, r2, #8
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6912      	ldr	r2, [r2, #16]
 800d776:	0852      	lsrs	r2, r2, #1
 800d778:	3a01      	subs	r2, #1
 800d77a:	0652      	lsls	r2, r2, #25
 800d77c:	430a      	orrs	r2, r1
 800d77e:	4916      	ldr	r1, [pc, #88]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d780:	4313      	orrs	r3, r2
 800d782:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d784:	4b14      	ldr	r3, [pc, #80]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a13      	ldr	r2, [pc, #76]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d78a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d78e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d790:	f7fa feb8 	bl	8008504 <HAL_GetTick>
 800d794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d796:	e009      	b.n	800d7ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d798:	f7fa feb4 	bl	8008504 <HAL_GetTick>
 800d79c:	4602      	mov	r2, r0
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d902      	bls.n	800d7ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	73fb      	strb	r3, [r7, #15]
          break;
 800d7aa:	e005      	b.n	800d7b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0ef      	beq.n	800d798 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d7be:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d7c0:	695a      	ldr	r2, [r3, #20]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	4904      	ldr	r1, [pc, #16]	; (800d7d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40021000 	.word	0x40021000

0800d7dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e095      	b.n	800d91a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d108      	bne.n	800d808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7fe:	d009      	beq.n	800d814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	61da      	str	r2, [r3, #28]
 800d806:	e005      	b.n	800d814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7f7 fb36 	bl	8004ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d84a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d854:	d902      	bls.n	800d85c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e002      	b.n	800d862 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d85c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d860:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d86a:	d007      	beq.n	800d87c <HAL_SPI_Init+0xa0>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d874:	d002      	beq.n	800d87c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d88c:	431a      	orrs	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	f003 0302 	and.w	r3, r3, #2
 800d896:	431a      	orrs	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8be:	ea42 0103 	orr.w	r1, r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	430a      	orrs	r2, r1
 800d8d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	0c1b      	lsrs	r3, r3, #16
 800d8d8:	f003 0204 	and.w	r2, r3, #4
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	f003 0310 	and.w	r3, r3, #16
 800d8e4:	431a      	orrs	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ea:	f003 0308 	and.w	r3, r3, #8
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d8f8:	ea42 0103 	orr.w	r1, r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	430a      	orrs	r2, r1
 800d908:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b088      	sub	sp, #32
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	60b9      	str	r1, [r7, #8]
 800d92c:	603b      	str	r3, [r7, #0]
 800d92e:	4613      	mov	r3, r2
 800d930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d101      	bne.n	800d944 <HAL_SPI_Transmit+0x22>
 800d940:	2302      	movs	r3, #2
 800d942:	e15f      	b.n	800dc04 <HAL_SPI_Transmit+0x2e2>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d94c:	f7fa fdda 	bl	8008504 <HAL_GetTick>
 800d950:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d952:	88fb      	ldrh	r3, [r7, #6]
 800d954:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d002      	beq.n	800d968 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d962:	2302      	movs	r3, #2
 800d964:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d966:	e148      	b.n	800dbfa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <HAL_SPI_Transmit+0x52>
 800d96e:	88fb      	ldrh	r3, [r7, #6]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d978:	e13f      	b.n	800dbfa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2203      	movs	r2, #3
 800d97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	88fa      	ldrh	r2, [r7, #6]
 800d992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	88fa      	ldrh	r2, [r7, #6]
 800d998:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9c4:	d10f      	bne.n	800d9e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d9e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b40      	cmp	r3, #64	; 0x40
 800d9f2:	d007      	beq.n	800da04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da0c:	d94f      	bls.n	800daae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d002      	beq.n	800da1c <HAL_SPI_Transmit+0xfa>
 800da16:	8afb      	ldrh	r3, [r7, #22]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d142      	bne.n	800daa2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	881a      	ldrh	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2c:	1c9a      	adds	r2, r3, #2
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da36:	b29b      	uxth	r3, r3
 800da38:	3b01      	subs	r3, #1
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800da40:	e02f      	b.n	800daa2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	f003 0302 	and.w	r3, r3, #2
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d112      	bne.n	800da76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da54:	881a      	ldrh	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	1c9a      	adds	r2, r3, #2
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	3b01      	subs	r3, #1
 800da6e:	b29a      	uxth	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da74:	e015      	b.n	800daa2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da76:	f7fa fd45 	bl	8008504 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d803      	bhi.n	800da8e <HAL_SPI_Transmit+0x16c>
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8c:	d102      	bne.n	800da94 <HAL_SPI_Transmit+0x172>
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d106      	bne.n	800daa2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800daa0:	e0ab      	b.n	800dbfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1ca      	bne.n	800da42 <HAL_SPI_Transmit+0x120>
 800daac:	e080      	b.n	800dbb0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <HAL_SPI_Transmit+0x19a>
 800dab6:	8afb      	ldrh	r3, [r7, #22]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d174      	bne.n	800dba6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d912      	bls.n	800daec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daca:	881a      	ldrh	r2, [r3, #0]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	1c9a      	adds	r2, r3, #2
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	3b02      	subs	r3, #2
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800daea:	e05c      	b.n	800dba6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	330c      	adds	r3, #12
 800daf6:	7812      	ldrb	r2, [r2, #0]
 800daf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db08:	b29b      	uxth	r3, r3
 800db0a:	3b01      	subs	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800db12:	e048      	b.n	800dba6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	f003 0302 	and.w	r3, r3, #2
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d12b      	bne.n	800db7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db26:	b29b      	uxth	r3, r3
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d912      	bls.n	800db52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db30:	881a      	ldrh	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3c:	1c9a      	adds	r2, r3, #2
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db46:	b29b      	uxth	r3, r3
 800db48:	3b02      	subs	r3, #2
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db50:	e029      	b.n	800dba6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	330c      	adds	r3, #12
 800db5c:	7812      	ldrb	r2, [r2, #0]
 800db5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db6e:	b29b      	uxth	r3, r3
 800db70:	3b01      	subs	r3, #1
 800db72:	b29a      	uxth	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db78:	e015      	b.n	800dba6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db7a:	f7fa fcc3 	bl	8008504 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d803      	bhi.n	800db92 <HAL_SPI_Transmit+0x270>
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db90:	d102      	bne.n	800db98 <HAL_SPI_Transmit+0x276>
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d106      	bne.n	800dba6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800dba4:	e029      	b.n	800dbfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1b1      	bne.n	800db14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f000 fc7d 	bl	800e4b4 <SPI_EndRxTxTransaction>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2220      	movs	r2, #32
 800dbc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10a      	bne.n	800dbe4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbce:	2300      	movs	r3, #0
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	613b      	str	r3, [r7, #16]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	613b      	str	r3, [r7, #16]
 800dbe2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	77fb      	strb	r3, [r7, #31]
 800dbf0:	e003      	b.n	800dbfa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dc02:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	; 0x28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
 800dc18:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_SPI_TransmitReceive+0x26>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e20a      	b.n	800e048 <HAL_SPI_TransmitReceive+0x43c>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc3a:	f7fa fc63 	bl	8008504 <HAL_GetTick>
 800dc3e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc46:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800dc4e:	887b      	ldrh	r3, [r7, #2]
 800dc50:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800dc52:	887b      	ldrh	r3, [r7, #2]
 800dc54:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc56:	7efb      	ldrb	r3, [r7, #27]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d00e      	beq.n	800dc7a <HAL_SPI_TransmitReceive+0x6e>
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc62:	d106      	bne.n	800dc72 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <HAL_SPI_TransmitReceive+0x66>
 800dc6c:	7efb      	ldrb	r3, [r7, #27]
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	d003      	beq.n	800dc7a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800dc72:	2302      	movs	r3, #2
 800dc74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dc78:	e1e0      	b.n	800e03c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d005      	beq.n	800dc8c <HAL_SPI_TransmitReceive+0x80>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <HAL_SPI_TransmitReceive+0x80>
 800dc86:	887b      	ldrh	r3, [r7, #2]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d103      	bne.n	800dc94 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dc92:	e1d3      	b.n	800e03c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	2b04      	cmp	r3, #4
 800dc9e:	d003      	beq.n	800dca8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2205      	movs	r2, #5
 800dca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	887a      	ldrh	r2, [r7, #2]
 800dcb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	887a      	ldrh	r2, [r7, #2]
 800dcc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	887a      	ldrh	r2, [r7, #2]
 800dcce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	887a      	ldrh	r2, [r7, #2]
 800dcd4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dcea:	d802      	bhi.n	800dcf2 <HAL_SPI_TransmitReceive+0xe6>
 800dcec:	8a3b      	ldrh	r3, [r7, #16]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d908      	bls.n	800dd04 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dd00:	605a      	str	r2, [r3, #4]
 800dd02:	e007      	b.n	800dd14 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1e:	2b40      	cmp	r3, #64	; 0x40
 800dd20:	d007      	beq.n	800dd32 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd3a:	f240 8081 	bls.w	800de40 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <HAL_SPI_TransmitReceive+0x140>
 800dd46:	8a7b      	ldrh	r3, [r7, #18]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d16d      	bne.n	800de28 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	881a      	ldrh	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd5c:	1c9a      	adds	r2, r3, #2
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd70:	e05a      	b.n	800de28 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f003 0302 	and.w	r3, r3, #2
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d11b      	bne.n	800ddb8 <HAL_SPI_TransmitReceive+0x1ac>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d016      	beq.n	800ddb8 <HAL_SPI_TransmitReceive+0x1ac>
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d113      	bne.n	800ddb8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd94:	881a      	ldrh	r2, [r3, #0]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	1c9a      	adds	r2, r3, #2
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	3b01      	subs	r3, #1
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f003 0301 	and.w	r3, r3, #1
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d11c      	bne.n	800de00 <HAL_SPI_TransmitReceive+0x1f4>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d016      	beq.n	800de00 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dddc:	b292      	uxth	r2, r2
 800ddde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde4:	1c9a      	adds	r2, r3, #2
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800de00:	f7fa fb80 	bl	8008504 <HAL_GetTick>
 800de04:	4602      	mov	r2, r0
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d80b      	bhi.n	800de28 <HAL_SPI_TransmitReceive+0x21c>
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de16:	d007      	beq.n	800de28 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800de26:	e109      	b.n	800e03c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d19f      	bne.n	800dd72 <HAL_SPI_TransmitReceive+0x166>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800de38:	b29b      	uxth	r3, r3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d199      	bne.n	800dd72 <HAL_SPI_TransmitReceive+0x166>
 800de3e:	e0e3      	b.n	800e008 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d003      	beq.n	800de50 <HAL_SPI_TransmitReceive+0x244>
 800de48:	8a7b      	ldrh	r3, [r7, #18]
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	f040 80cf 	bne.w	800dfee <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de54:	b29b      	uxth	r3, r3
 800de56:	2b01      	cmp	r3, #1
 800de58:	d912      	bls.n	800de80 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5e:	881a      	ldrh	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6a:	1c9a      	adds	r2, r3, #2
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b02      	subs	r3, #2
 800de78:	b29a      	uxth	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de7e:	e0b6      	b.n	800dfee <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	330c      	adds	r3, #12
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	3b01      	subs	r3, #1
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dea6:	e0a2      	b.n	800dfee <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d134      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x314>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d02f      	beq.n	800df20 <HAL_SPI_TransmitReceive+0x314>
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d12c      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deca:	b29b      	uxth	r3, r3
 800decc:	2b01      	cmp	r3, #1
 800dece:	d912      	bls.n	800def6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded4:	881a      	ldrh	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	1c9a      	adds	r2, r3, #2
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deea:	b29b      	uxth	r3, r3
 800deec:	3b02      	subs	r3, #2
 800deee:	b29a      	uxth	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800def4:	e012      	b.n	800df1c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	330c      	adds	r3, #12
 800df00:	7812      	ldrb	r2, [r2, #0]
 800df02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df12:	b29b      	uxth	r3, r3
 800df14:	3b01      	subs	r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800df1c:	2300      	movs	r3, #0
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d148      	bne.n	800dfc0 <HAL_SPI_TransmitReceive+0x3b4>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df34:	b29b      	uxth	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d042      	beq.n	800dfc0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df40:	b29b      	uxth	r3, r3
 800df42:	2b01      	cmp	r3, #1
 800df44:	d923      	bls.n	800df8e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68da      	ldr	r2, [r3, #12]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df50:	b292      	uxth	r2, r2
 800df52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df58:	1c9a      	adds	r2, r3, #2
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df64:	b29b      	uxth	r3, r3
 800df66:	3b02      	subs	r3, #2
 800df68:	b29a      	uxth	r2, r3
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df76:	b29b      	uxth	r3, r3
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d81f      	bhi.n	800dfbc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685a      	ldr	r2, [r3, #4]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df8a:	605a      	str	r2, [r3, #4]
 800df8c:	e016      	b.n	800dfbc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f103 020c 	add.w	r2, r3, #12
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9a:	7812      	ldrb	r2, [r2, #0]
 800df9c:	b2d2      	uxtb	r2, r2
 800df9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dfc0:	f7fa faa0 	bl	8008504 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d803      	bhi.n	800dfd8 <HAL_SPI_TransmitReceive+0x3cc>
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd6:	d102      	bne.n	800dfde <HAL_SPI_TransmitReceive+0x3d2>
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d107      	bne.n	800dfee <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800dfec:	e026      	b.n	800e03c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f47f af57 	bne.w	800dea8 <HAL_SPI_TransmitReceive+0x29c>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e000:	b29b      	uxth	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	f47f af50 	bne.w	800dea8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f000 fa51 	bl	800e4b4 <SPI_EndRxTxTransaction>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d005      	beq.n	800e024 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2220      	movs	r2, #32
 800e022:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e032:	e003      	b.n	800e03c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3728      	adds	r7, #40	; 0x28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10e      	bne.n	800e090 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d009      	beq.n	800e090 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e082:	2b00      	cmp	r3, #0
 800e084:	d004      	beq.n	800e090 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	4798      	blx	r3
    return;
 800e08e:	e0ce      	b.n	800e22e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <HAL_SPI_IRQHandler+0x5e>
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d004      	beq.n	800e0ae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	4798      	blx	r3
    return;
 800e0ac:	e0bf      	b.n	800e22e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	f003 0320 	and.w	r3, r3, #32
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10a      	bne.n	800e0ce <HAL_SPI_IRQHandler+0x7e>
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 80b0 	beq.w	800e22e <HAL_SPI_IRQHandler+0x1de>
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	f003 0320 	and.w	r3, r3, #32
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 80aa 	beq.w	800e22e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d023      	beq.n	800e12c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b03      	cmp	r3, #3
 800e0ee:	d011      	beq.n	800e114 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0f4:	f043 0204 	orr.w	r2, r3, #4
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	617b      	str	r3, [r7, #20]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	e00b      	b.n	800e12c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	613b      	str	r3, [r7, #16]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	613b      	str	r3, [r7, #16]
 800e128:	693b      	ldr	r3, [r7, #16]
        return;
 800e12a:	e080      	b.n	800e22e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	f003 0320 	and.w	r3, r3, #32
 800e132:	2b00      	cmp	r3, #0
 800e134:	d014      	beq.n	800e160 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e13a:	f043 0201 	orr.w	r2, r3, #1
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00c      	beq.n	800e184 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e16e:	f043 0208 	orr.w	r2, r3, #8
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e176:	2300      	movs	r3, #0
 800e178:	60bb      	str	r3, [r7, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	60bb      	str	r3, [r7, #8]
 800e182:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d04f      	beq.n	800e22c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e19a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	f003 0302 	and.w	r3, r3, #2
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d104      	bne.n	800e1b8 <HAL_SPI_IRQHandler+0x168>
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	f003 0301 	and.w	r3, r3, #1
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d034      	beq.n	800e222 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f022 0203 	bic.w	r2, r2, #3
 800e1c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d011      	beq.n	800e1f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1d4:	4a17      	ldr	r2, [pc, #92]	; (800e234 <HAL_SPI_IRQHandler+0x1e4>)
 800e1d6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fc f993 	bl	800a508 <HAL_DMA_Abort_IT>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d005      	beq.n	800e1f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d016      	beq.n	800e22a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e200:	4a0c      	ldr	r2, [pc, #48]	; (800e234 <HAL_SPI_IRQHandler+0x1e4>)
 800e202:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fc f97d 	bl	800a508 <HAL_DMA_Abort_IT>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00a      	beq.n	800e22a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e220:	e003      	b.n	800e22a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f808 	bl	800e238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e228:	e000      	b.n	800e22c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e22a:	bf00      	nop
    return;
 800e22c:	bf00      	nop
  }
}
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	0800e24d 	.word	0x0800e24d

0800e238 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e258:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff ffe5 	bl	800e238 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e26e:	bf00      	nop
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	603b      	str	r3, [r7, #0]
 800e284:	4613      	mov	r3, r2
 800e286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e288:	f7fa f93c 	bl	8008504 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	1a9b      	subs	r3, r3, r2
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	4413      	add	r3, r2
 800e296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e298:	f7fa f934 	bl	8008504 <HAL_GetTick>
 800e29c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e29e:	4b39      	ldr	r3, [pc, #228]	; (800e384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	015b      	lsls	r3, r3, #5
 800e2a4:	0d1b      	lsrs	r3, r3, #20
 800e2a6:	69fa      	ldr	r2, [r7, #28]
 800e2a8:	fb02 f303 	mul.w	r3, r2, r3
 800e2ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2ae:	e054      	b.n	800e35a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b6:	d050      	beq.n	800e35a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2b8:	f7fa f924 	bl	8008504 <HAL_GetTick>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	69fa      	ldr	r2, [r7, #28]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d902      	bls.n	800e2ce <SPI_WaitFlagStateUntilTimeout+0x56>
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d13d      	bne.n	800e34a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2e6:	d111      	bne.n	800e30c <SPI_WaitFlagStateUntilTimeout+0x94>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2f0:	d004      	beq.n	800e2fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2fa:	d107      	bne.n	800e30c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e30a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e314:	d10f      	bne.n	800e336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e017      	b.n	800e37a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d101      	bne.n	800e354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e350:	2300      	movs	r3, #0
 800e352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	3b01      	subs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	4013      	ands	r3, r2
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	429a      	cmp	r2, r3
 800e368:	bf0c      	ite	eq
 800e36a:	2301      	moveq	r3, #1
 800e36c:	2300      	movne	r3, #0
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	461a      	mov	r2, r3
 800e372:	79fb      	ldrb	r3, [r7, #7]
 800e374:	429a      	cmp	r2, r3
 800e376:	d19b      	bne.n	800e2b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3720      	adds	r7, #32
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20000010 	.word	0x20000010

0800e388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08a      	sub	sp, #40	; 0x28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e396:	2300      	movs	r3, #0
 800e398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e39a:	f7fa f8b3 	bl	8008504 <HAL_GetTick>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a2:	1a9b      	subs	r3, r3, r2
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e3aa:	f7fa f8ab 	bl	8008504 <HAL_GetTick>
 800e3ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	330c      	adds	r3, #12
 800e3b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e3b8:	4b3d      	ldr	r3, [pc, #244]	; (800e4b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	00da      	lsls	r2, r3, #3
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	0d1b      	lsrs	r3, r3, #20
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	fb02 f303 	mul.w	r3, r2, r3
 800e3ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e3d0:	e060      	b.n	800e494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e3d8:	d107      	bne.n	800e3ea <SPI_WaitFifoStateUntilTimeout+0x62>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d104      	bne.n	800e3ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f0:	d050      	beq.n	800e494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e3f2:	f7fa f887 	bl	8008504 <HAL_GetTick>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d902      	bls.n	800e408 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	d13d      	bne.n	800e484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e420:	d111      	bne.n	800e446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e42a:	d004      	beq.n	800e436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e434:	d107      	bne.n	800e446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e44e:	d10f      	bne.n	800e470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e46e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e480:	2303      	movs	r3, #3
 800e482:	e010      	b.n	800e4a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d101      	bne.n	800e48e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e48a:	2300      	movs	r3, #0
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	3b01      	subs	r3, #1
 800e492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	689a      	ldr	r2, [r3, #8]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	4013      	ands	r3, r2
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d196      	bne.n	800e3d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3728      	adds	r7, #40	; 0x28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000010 	.word	0x20000010

0800e4b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af02      	add	r7, sp, #8
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f7ff ff5b 	bl	800e388 <SPI_WaitFifoStateUntilTimeout>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d007      	beq.n	800e4e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4dc:	f043 0220 	orr.w	r2, r3, #32
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e027      	b.n	800e538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	2180      	movs	r1, #128	; 0x80
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7ff fec0 	bl	800e278 <SPI_WaitFlagStateUntilTimeout>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d007      	beq.n	800e50e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e502:	f043 0220 	orr.w	r2, r3, #32
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e50a:	2303      	movs	r3, #3
 800e50c:	e014      	b.n	800e538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2200      	movs	r2, #0
 800e516:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f7ff ff34 	bl	800e388 <SPI_WaitFifoStateUntilTimeout>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d007      	beq.n	800e536 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e52a:	f043 0220 	orr.w	r2, r3, #32
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e532:	2303      	movs	r3, #3
 800e534:	e000      	b.n	800e538 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e049      	b.n	800e5e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7f6 fce4 	bl	8004f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2202      	movs	r2, #2
 800e570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3304      	adds	r3, #4
 800e57c:	4619      	mov	r1, r3
 800e57e:	4610      	mov	r0, r2
 800e580:	f000 fc1a 	bl	800edb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d109      	bne.n	800e614 <HAL_TIM_PWM_Start+0x24>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e606:	b2db      	uxtb	r3, r3
 800e608:	2b01      	cmp	r3, #1
 800e60a:	bf14      	ite	ne
 800e60c:	2301      	movne	r3, #1
 800e60e:	2300      	moveq	r3, #0
 800e610:	b2db      	uxtb	r3, r3
 800e612:	e03c      	b.n	800e68e <HAL_TIM_PWM_Start+0x9e>
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	2b04      	cmp	r3, #4
 800e618:	d109      	bne.n	800e62e <HAL_TIM_PWM_Start+0x3e>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b01      	cmp	r3, #1
 800e624:	bf14      	ite	ne
 800e626:	2301      	movne	r3, #1
 800e628:	2300      	moveq	r3, #0
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	e02f      	b.n	800e68e <HAL_TIM_PWM_Start+0x9e>
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b08      	cmp	r3, #8
 800e632:	d109      	bne.n	800e648 <HAL_TIM_PWM_Start+0x58>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	bf14      	ite	ne
 800e640:	2301      	movne	r3, #1
 800e642:	2300      	moveq	r3, #0
 800e644:	b2db      	uxtb	r3, r3
 800e646:	e022      	b.n	800e68e <HAL_TIM_PWM_Start+0x9e>
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b0c      	cmp	r3, #12
 800e64c:	d109      	bne.n	800e662 <HAL_TIM_PWM_Start+0x72>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b01      	cmp	r3, #1
 800e658:	bf14      	ite	ne
 800e65a:	2301      	movne	r3, #1
 800e65c:	2300      	moveq	r3, #0
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	e015      	b.n	800e68e <HAL_TIM_PWM_Start+0x9e>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	2b10      	cmp	r3, #16
 800e666:	d109      	bne.n	800e67c <HAL_TIM_PWM_Start+0x8c>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	bf14      	ite	ne
 800e674:	2301      	movne	r3, #1
 800e676:	2300      	moveq	r3, #0
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	e008      	b.n	800e68e <HAL_TIM_PWM_Start+0x9e>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e682:	b2db      	uxtb	r3, r3
 800e684:	2b01      	cmp	r3, #1
 800e686:	bf14      	ite	ne
 800e688:	2301      	movne	r3, #1
 800e68a:	2300      	moveq	r3, #0
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d001      	beq.n	800e696 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e692:	2301      	movs	r3, #1
 800e694:	e09c      	b.n	800e7d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d104      	bne.n	800e6a6 <HAL_TIM_PWM_Start+0xb6>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2202      	movs	r2, #2
 800e6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6a4:	e023      	b.n	800e6ee <HAL_TIM_PWM_Start+0xfe>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b04      	cmp	r3, #4
 800e6aa:	d104      	bne.n	800e6b6 <HAL_TIM_PWM_Start+0xc6>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2202      	movs	r2, #2
 800e6b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6b4:	e01b      	b.n	800e6ee <HAL_TIM_PWM_Start+0xfe>
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b08      	cmp	r3, #8
 800e6ba:	d104      	bne.n	800e6c6 <HAL_TIM_PWM_Start+0xd6>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2202      	movs	r2, #2
 800e6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6c4:	e013      	b.n	800e6ee <HAL_TIM_PWM_Start+0xfe>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b0c      	cmp	r3, #12
 800e6ca:	d104      	bne.n	800e6d6 <HAL_TIM_PWM_Start+0xe6>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2202      	movs	r2, #2
 800e6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6d4:	e00b      	b.n	800e6ee <HAL_TIM_PWM_Start+0xfe>
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2b10      	cmp	r3, #16
 800e6da:	d104      	bne.n	800e6e6 <HAL_TIM_PWM_Start+0xf6>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6e4:	e003      	b.n	800e6ee <HAL_TIM_PWM_Start+0xfe>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2202      	movs	r2, #2
 800e6ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 fece 	bl	800f498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a35      	ldr	r2, [pc, #212]	; (800e7d8 <HAL_TIM_PWM_Start+0x1e8>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d013      	beq.n	800e72e <HAL_TIM_PWM_Start+0x13e>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a34      	ldr	r2, [pc, #208]	; (800e7dc <HAL_TIM_PWM_Start+0x1ec>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d00e      	beq.n	800e72e <HAL_TIM_PWM_Start+0x13e>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a32      	ldr	r2, [pc, #200]	; (800e7e0 <HAL_TIM_PWM_Start+0x1f0>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d009      	beq.n	800e72e <HAL_TIM_PWM_Start+0x13e>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a31      	ldr	r2, [pc, #196]	; (800e7e4 <HAL_TIM_PWM_Start+0x1f4>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d004      	beq.n	800e72e <HAL_TIM_PWM_Start+0x13e>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a2f      	ldr	r2, [pc, #188]	; (800e7e8 <HAL_TIM_PWM_Start+0x1f8>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d101      	bne.n	800e732 <HAL_TIM_PWM_Start+0x142>
 800e72e:	2301      	movs	r3, #1
 800e730:	e000      	b.n	800e734 <HAL_TIM_PWM_Start+0x144>
 800e732:	2300      	movs	r3, #0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d007      	beq.n	800e748 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e746:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a22      	ldr	r2, [pc, #136]	; (800e7d8 <HAL_TIM_PWM_Start+0x1e8>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d01d      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e75a:	d018      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a22      	ldr	r2, [pc, #136]	; (800e7ec <HAL_TIM_PWM_Start+0x1fc>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d013      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a21      	ldr	r2, [pc, #132]	; (800e7f0 <HAL_TIM_PWM_Start+0x200>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d00e      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <HAL_TIM_PWM_Start+0x204>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d009      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a17      	ldr	r2, [pc, #92]	; (800e7dc <HAL_TIM_PWM_Start+0x1ec>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d004      	beq.n	800e78e <HAL_TIM_PWM_Start+0x19e>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a15      	ldr	r2, [pc, #84]	; (800e7e0 <HAL_TIM_PWM_Start+0x1f0>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d115      	bne.n	800e7ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	689a      	ldr	r2, [r3, #8]
 800e794:	4b18      	ldr	r3, [pc, #96]	; (800e7f8 <HAL_TIM_PWM_Start+0x208>)
 800e796:	4013      	ands	r3, r2
 800e798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b06      	cmp	r3, #6
 800e79e:	d015      	beq.n	800e7cc <HAL_TIM_PWM_Start+0x1dc>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a6:	d011      	beq.n	800e7cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f042 0201 	orr.w	r2, r2, #1
 800e7b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7b8:	e008      	b.n	800e7cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f042 0201 	orr.w	r2, r2, #1
 800e7c8:	601a      	str	r2, [r3, #0]
 800e7ca:	e000      	b.n	800e7ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	40012c00 	.word	0x40012c00
 800e7dc:	40013400 	.word	0x40013400
 800e7e0:	40014000 	.word	0x40014000
 800e7e4:	40014400 	.word	0x40014400
 800e7e8:	40014800 	.word	0x40014800
 800e7ec:	40000400 	.word	0x40000400
 800e7f0:	40000800 	.word	0x40000800
 800e7f4:	40000c00 	.word	0x40000c00
 800e7f8:	00010007 	.word	0x00010007

0800e7fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2200      	movs	r2, #0
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 fe42 	bl	800f498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a3e      	ldr	r2, [pc, #248]	; (800e914 <HAL_TIM_PWM_Stop+0x118>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d013      	beq.n	800e846 <HAL_TIM_PWM_Stop+0x4a>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a3d      	ldr	r2, [pc, #244]	; (800e918 <HAL_TIM_PWM_Stop+0x11c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d00e      	beq.n	800e846 <HAL_TIM_PWM_Stop+0x4a>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a3b      	ldr	r2, [pc, #236]	; (800e91c <HAL_TIM_PWM_Stop+0x120>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d009      	beq.n	800e846 <HAL_TIM_PWM_Stop+0x4a>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a3a      	ldr	r2, [pc, #232]	; (800e920 <HAL_TIM_PWM_Stop+0x124>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d004      	beq.n	800e846 <HAL_TIM_PWM_Stop+0x4a>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a38      	ldr	r2, [pc, #224]	; (800e924 <HAL_TIM_PWM_Stop+0x128>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d101      	bne.n	800e84a <HAL_TIM_PWM_Stop+0x4e>
 800e846:	2301      	movs	r3, #1
 800e848:	e000      	b.n	800e84c <HAL_TIM_PWM_Stop+0x50>
 800e84a:	2300      	movs	r3, #0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d017      	beq.n	800e880 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6a1a      	ldr	r2, [r3, #32]
 800e856:	f241 1311 	movw	r3, #4369	; 0x1111
 800e85a:	4013      	ands	r3, r2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10f      	bne.n	800e880 <HAL_TIM_PWM_Stop+0x84>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6a1a      	ldr	r2, [r3, #32]
 800e866:	f240 4344 	movw	r3, #1092	; 0x444
 800e86a:	4013      	ands	r3, r2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d107      	bne.n	800e880 <HAL_TIM_PWM_Stop+0x84>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e87e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6a1a      	ldr	r2, [r3, #32]
 800e886:	f241 1311 	movw	r3, #4369	; 0x1111
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10f      	bne.n	800e8b0 <HAL_TIM_PWM_Stop+0xb4>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6a1a      	ldr	r2, [r3, #32]
 800e896:	f240 4344 	movw	r3, #1092	; 0x444
 800e89a:	4013      	ands	r3, r2
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d107      	bne.n	800e8b0 <HAL_TIM_PWM_Stop+0xb4>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 0201 	bic.w	r2, r2, #1
 800e8ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d104      	bne.n	800e8c0 <HAL_TIM_PWM_Stop+0xc4>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8be:	e023      	b.n	800e908 <HAL_TIM_PWM_Stop+0x10c>
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d104      	bne.n	800e8d0 <HAL_TIM_PWM_Stop+0xd4>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8ce:	e01b      	b.n	800e908 <HAL_TIM_PWM_Stop+0x10c>
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2b08      	cmp	r3, #8
 800e8d4:	d104      	bne.n	800e8e0 <HAL_TIM_PWM_Stop+0xe4>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8de:	e013      	b.n	800e908 <HAL_TIM_PWM_Stop+0x10c>
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	2b0c      	cmp	r3, #12
 800e8e4:	d104      	bne.n	800e8f0 <HAL_TIM_PWM_Stop+0xf4>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8ee:	e00b      	b.n	800e908 <HAL_TIM_PWM_Stop+0x10c>
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	2b10      	cmp	r3, #16
 800e8f4:	d104      	bne.n	800e900 <HAL_TIM_PWM_Stop+0x104>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8fe:	e003      	b.n	800e908 <HAL_TIM_PWM_Stop+0x10c>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	40012c00 	.word	0x40012c00
 800e918:	40013400 	.word	0x40013400
 800e91c:	40014000 	.word	0x40014000
 800e920:	40014400 	.word	0x40014400
 800e924:	40014800 	.word	0x40014800

0800e928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	691b      	ldr	r3, [r3, #16]
 800e93e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	f003 0302 	and.w	r3, r3, #2
 800e946:	2b00      	cmp	r3, #0
 800e948:	d020      	beq.n	800e98c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f003 0302 	and.w	r3, r3, #2
 800e950:	2b00      	cmp	r3, #0
 800e952:	d01b      	beq.n	800e98c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f06f 0202 	mvn.w	r2, #2
 800e95c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	699b      	ldr	r3, [r3, #24]
 800e96a:	f003 0303 	and.w	r3, r3, #3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d003      	beq.n	800e97a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fa02 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e978:	e005      	b.n	800e986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f9f4 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 fa05 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	f003 0304 	and.w	r3, r3, #4
 800e992:	2b00      	cmp	r3, #0
 800e994:	d020      	beq.n	800e9d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f003 0304 	and.w	r3, r3, #4
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01b      	beq.n	800e9d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f06f 0204 	mvn.w	r2, #4
 800e9a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2202      	movs	r2, #2
 800e9ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	699b      	ldr	r3, [r3, #24]
 800e9b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d003      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f9dc 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800e9c4:	e005      	b.n	800e9d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f9ce 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f9df 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f003 0308 	and.w	r3, r3, #8
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d020      	beq.n	800ea24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f003 0308 	and.w	r3, r3, #8
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01b      	beq.n	800ea24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f06f 0208 	mvn.w	r2, #8
 800e9f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2204      	movs	r2, #4
 800e9fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	69db      	ldr	r3, [r3, #28]
 800ea02:	f003 0303 	and.w	r3, r3, #3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f9b6 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800ea10:	e005      	b.n	800ea1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f9a8 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f9b9 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f003 0310 	and.w	r3, r3, #16
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d020      	beq.n	800ea70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f003 0310 	and.w	r3, r3, #16
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d01b      	beq.n	800ea70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f06f 0210 	mvn.w	r2, #16
 800ea40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2208      	movs	r2, #8
 800ea46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	69db      	ldr	r3, [r3, #28]
 800ea4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f990 	bl	800ed7c <HAL_TIM_IC_CaptureCallback>
 800ea5c:	e005      	b.n	800ea6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f982 	bl	800ed68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f993 	bl	800ed90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00c      	beq.n	800ea94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f003 0301 	and.w	r3, r3, #1
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d007      	beq.n	800ea94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f06f 0201 	mvn.w	r2, #1
 800ea8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f960 	bl	800ed54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00c      	beq.n	800eab8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d007      	beq.n	800eab8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 fe26 	bl	800f704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00c      	beq.n	800eadc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d007      	beq.n	800eadc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ead4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fe1e 	bl	800f718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00c      	beq.n	800eb00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d007      	beq.n	800eb00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eaf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 f952 	bl	800eda4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	f003 0320 	and.w	r3, r3, #32
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00c      	beq.n	800eb24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f003 0320 	and.w	r3, r3, #32
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f06f 0220 	mvn.w	r2, #32
 800eb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fde6 	bl	800f6f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb24:	bf00      	nop
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d101      	bne.n	800eb4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb46:	2302      	movs	r3, #2
 800eb48:	e0ff      	b.n	800ed4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b14      	cmp	r3, #20
 800eb56:	f200 80f0 	bhi.w	800ed3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb5a:	a201      	add	r2, pc, #4	; (adr r2, 800eb60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800ebb5 	.word	0x0800ebb5
 800eb64:	0800ed3b 	.word	0x0800ed3b
 800eb68:	0800ed3b 	.word	0x0800ed3b
 800eb6c:	0800ed3b 	.word	0x0800ed3b
 800eb70:	0800ebf5 	.word	0x0800ebf5
 800eb74:	0800ed3b 	.word	0x0800ed3b
 800eb78:	0800ed3b 	.word	0x0800ed3b
 800eb7c:	0800ed3b 	.word	0x0800ed3b
 800eb80:	0800ec37 	.word	0x0800ec37
 800eb84:	0800ed3b 	.word	0x0800ed3b
 800eb88:	0800ed3b 	.word	0x0800ed3b
 800eb8c:	0800ed3b 	.word	0x0800ed3b
 800eb90:	0800ec77 	.word	0x0800ec77
 800eb94:	0800ed3b 	.word	0x0800ed3b
 800eb98:	0800ed3b 	.word	0x0800ed3b
 800eb9c:	0800ed3b 	.word	0x0800ed3b
 800eba0:	0800ecb9 	.word	0x0800ecb9
 800eba4:	0800ed3b 	.word	0x0800ed3b
 800eba8:	0800ed3b 	.word	0x0800ed3b
 800ebac:	0800ed3b 	.word	0x0800ed3b
 800ebb0:	0800ecf9 	.word	0x0800ecf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68b9      	ldr	r1, [r7, #8]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f996 	bl	800eeec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	699a      	ldr	r2, [r3, #24]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f042 0208 	orr.w	r2, r2, #8
 800ebce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	699a      	ldr	r2, [r3, #24]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f022 0204 	bic.w	r2, r2, #4
 800ebde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6999      	ldr	r1, [r3, #24]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	691a      	ldr	r2, [r3, #16]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	619a      	str	r2, [r3, #24]
      break;
 800ebf2:	e0a5      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	68b9      	ldr	r1, [r7, #8]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 fa06 	bl	800f00c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	699a      	ldr	r2, [r3, #24]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	699a      	ldr	r2, [r3, #24]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	6999      	ldr	r1, [r3, #24]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	021a      	lsls	r2, r3, #8
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	430a      	orrs	r2, r1
 800ec32:	619a      	str	r2, [r3, #24]
      break;
 800ec34:	e084      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68b9      	ldr	r1, [r7, #8]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 fa6f 	bl	800f120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	69da      	ldr	r2, [r3, #28]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f042 0208 	orr.w	r2, r2, #8
 800ec50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	69da      	ldr	r2, [r3, #28]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f022 0204 	bic.w	r2, r2, #4
 800ec60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	69d9      	ldr	r1, [r3, #28]
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	691a      	ldr	r2, [r3, #16]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	430a      	orrs	r2, r1
 800ec72:	61da      	str	r2, [r3, #28]
      break;
 800ec74:	e064      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68b9      	ldr	r1, [r7, #8]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 fad7 	bl	800f230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	69da      	ldr	r2, [r3, #28]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	69da      	ldr	r2, [r3, #28]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69d9      	ldr	r1, [r3, #28]
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	021a      	lsls	r2, r3, #8
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	430a      	orrs	r2, r1
 800ecb4:	61da      	str	r2, [r3, #28]
      break;
 800ecb6:	e043      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 fb20 	bl	800f304 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f042 0208 	orr.w	r2, r2, #8
 800ecd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f022 0204 	bic.w	r2, r2, #4
 800ece2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ecf6:	e023      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	68b9      	ldr	r1, [r7, #8]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 fb64 	bl	800f3cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	021a      	lsls	r2, r3, #8
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed38:	e002      	b.n	800ed40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ed3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3718      	adds	r7, #24
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop

0800ed54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ed5c:	bf00      	nop
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edac:	bf00      	nop
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a40      	ldr	r2, [pc, #256]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d013      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edd6:	d00f      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a3d      	ldr	r2, [pc, #244]	; (800eed0 <TIM_Base_SetConfig+0x118>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00b      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a3c      	ldr	r2, [pc, #240]	; (800eed4 <TIM_Base_SetConfig+0x11c>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d007      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a3b      	ldr	r2, [pc, #236]	; (800eed8 <TIM_Base_SetConfig+0x120>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d003      	beq.n	800edf8 <TIM_Base_SetConfig+0x40>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a3a      	ldr	r2, [pc, #232]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d108      	bne.n	800ee0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a2f      	ldr	r2, [pc, #188]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d01f      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee18:	d01b      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a2c      	ldr	r2, [pc, #176]	; (800eed0 <TIM_Base_SetConfig+0x118>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d017      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a2b      	ldr	r2, [pc, #172]	; (800eed4 <TIM_Base_SetConfig+0x11c>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d013      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a2a      	ldr	r2, [pc, #168]	; (800eed8 <TIM_Base_SetConfig+0x120>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d00f      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a29      	ldr	r2, [pc, #164]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d00b      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a28      	ldr	r2, [pc, #160]	; (800eee0 <TIM_Base_SetConfig+0x128>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d007      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a27      	ldr	r2, [pc, #156]	; (800eee4 <TIM_Base_SetConfig+0x12c>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d003      	beq.n	800ee52 <TIM_Base_SetConfig+0x9a>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a26      	ldr	r2, [pc, #152]	; (800eee8 <TIM_Base_SetConfig+0x130>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d108      	bne.n	800ee64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	695b      	ldr	r3, [r3, #20]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	689a      	ldr	r2, [r3, #8]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a10      	ldr	r2, [pc, #64]	; (800eecc <TIM_Base_SetConfig+0x114>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d00f      	beq.n	800eeb0 <TIM_Base_SetConfig+0xf8>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a12      	ldr	r2, [pc, #72]	; (800eedc <TIM_Base_SetConfig+0x124>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d00b      	beq.n	800eeb0 <TIM_Base_SetConfig+0xf8>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a11      	ldr	r2, [pc, #68]	; (800eee0 <TIM_Base_SetConfig+0x128>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d007      	beq.n	800eeb0 <TIM_Base_SetConfig+0xf8>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a10      	ldr	r2, [pc, #64]	; (800eee4 <TIM_Base_SetConfig+0x12c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d003      	beq.n	800eeb0 <TIM_Base_SetConfig+0xf8>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a0f      	ldr	r2, [pc, #60]	; (800eee8 <TIM_Base_SetConfig+0x130>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d103      	bne.n	800eeb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	691a      	ldr	r2, [r3, #16]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	615a      	str	r2, [r3, #20]
}
 800eebe:	bf00      	nop
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	40012c00 	.word	0x40012c00
 800eed0:	40000400 	.word	0x40000400
 800eed4:	40000800 	.word	0x40000800
 800eed8:	40000c00 	.word	0x40000c00
 800eedc:	40013400 	.word	0x40013400
 800eee0:	40014000 	.word	0x40014000
 800eee4:	40014400 	.word	0x40014400
 800eee8:	40014800 	.word	0x40014800

0800eeec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	f023 0201 	bic.w	r2, r3, #1
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f023 0303 	bic.w	r3, r3, #3
 800ef26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	f023 0302 	bic.w	r3, r3, #2
 800ef38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	4313      	orrs	r3, r2
 800ef42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	4a2c      	ldr	r2, [pc, #176]	; (800eff8 <TIM_OC1_SetConfig+0x10c>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d00f      	beq.n	800ef6c <TIM_OC1_SetConfig+0x80>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	4a2b      	ldr	r2, [pc, #172]	; (800effc <TIM_OC1_SetConfig+0x110>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d00b      	beq.n	800ef6c <TIM_OC1_SetConfig+0x80>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4a2a      	ldr	r2, [pc, #168]	; (800f000 <TIM_OC1_SetConfig+0x114>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d007      	beq.n	800ef6c <TIM_OC1_SetConfig+0x80>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4a29      	ldr	r2, [pc, #164]	; (800f004 <TIM_OC1_SetConfig+0x118>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d003      	beq.n	800ef6c <TIM_OC1_SetConfig+0x80>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4a28      	ldr	r2, [pc, #160]	; (800f008 <TIM_OC1_SetConfig+0x11c>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d10c      	bne.n	800ef86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f023 0308 	bic.w	r3, r3, #8
 800ef72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	697a      	ldr	r2, [r7, #20]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f023 0304 	bic.w	r3, r3, #4
 800ef84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a1b      	ldr	r2, [pc, #108]	; (800eff8 <TIM_OC1_SetConfig+0x10c>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00f      	beq.n	800efae <TIM_OC1_SetConfig+0xc2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a1a      	ldr	r2, [pc, #104]	; (800effc <TIM_OC1_SetConfig+0x110>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d00b      	beq.n	800efae <TIM_OC1_SetConfig+0xc2>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a19      	ldr	r2, [pc, #100]	; (800f000 <TIM_OC1_SetConfig+0x114>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d007      	beq.n	800efae <TIM_OC1_SetConfig+0xc2>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a18      	ldr	r2, [pc, #96]	; (800f004 <TIM_OC1_SetConfig+0x118>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d003      	beq.n	800efae <TIM_OC1_SetConfig+0xc2>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4a17      	ldr	r2, [pc, #92]	; (800f008 <TIM_OC1_SetConfig+0x11c>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d111      	bne.n	800efd2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800efbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	693a      	ldr	r2, [r7, #16]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	699b      	ldr	r3, [r3, #24]
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	4313      	orrs	r3, r2
 800efd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	697a      	ldr	r2, [r7, #20]
 800efea:	621a      	str	r2, [r3, #32]
}
 800efec:	bf00      	nop
 800efee:	371c      	adds	r7, #28
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	40012c00 	.word	0x40012c00
 800effc:	40013400 	.word	0x40013400
 800f000:	40014000 	.word	0x40014000
 800f004:	40014400 	.word	0x40014400
 800f008:	40014800 	.word	0x40014800

0800f00c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	f023 0210 	bic.w	r2, r3, #16
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f03e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	021b      	lsls	r3, r3, #8
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	4313      	orrs	r3, r2
 800f052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f023 0320 	bic.w	r3, r3, #32
 800f05a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	011b      	lsls	r3, r3, #4
 800f062:	697a      	ldr	r2, [r7, #20]
 800f064:	4313      	orrs	r3, r2
 800f066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a28      	ldr	r2, [pc, #160]	; (800f10c <TIM_OC2_SetConfig+0x100>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d003      	beq.n	800f078 <TIM_OC2_SetConfig+0x6c>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a27      	ldr	r2, [pc, #156]	; (800f110 <TIM_OC2_SetConfig+0x104>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d10d      	bne.n	800f094 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	011b      	lsls	r3, r3, #4
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	4313      	orrs	r3, r2
 800f08a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f092:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a1d      	ldr	r2, [pc, #116]	; (800f10c <TIM_OC2_SetConfig+0x100>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d00f      	beq.n	800f0bc <TIM_OC2_SetConfig+0xb0>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a1c      	ldr	r2, [pc, #112]	; (800f110 <TIM_OC2_SetConfig+0x104>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d00b      	beq.n	800f0bc <TIM_OC2_SetConfig+0xb0>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a1b      	ldr	r2, [pc, #108]	; (800f114 <TIM_OC2_SetConfig+0x108>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d007      	beq.n	800f0bc <TIM_OC2_SetConfig+0xb0>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a1a      	ldr	r2, [pc, #104]	; (800f118 <TIM_OC2_SetConfig+0x10c>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d003      	beq.n	800f0bc <TIM_OC2_SetConfig+0xb0>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a19      	ldr	r2, [pc, #100]	; (800f11c <TIM_OC2_SetConfig+0x110>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d113      	bne.n	800f0e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	695b      	ldr	r3, [r3, #20]
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	693a      	ldr	r2, [r7, #16]
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	699b      	ldr	r3, [r3, #24]
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	621a      	str	r2, [r3, #32]
}
 800f0fe:	bf00      	nop
 800f100:	371c      	adds	r7, #28
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	40012c00 	.word	0x40012c00
 800f110:	40013400 	.word	0x40013400
 800f114:	40014000 	.word	0x40014000
 800f118:	40014400 	.word	0x40014400
 800f11c:	40014800 	.word	0x40014800

0800f120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f120:	b480      	push	{r7}
 800f122:	b087      	sub	sp, #28
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6a1b      	ldr	r3, [r3, #32]
 800f134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	69db      	ldr	r3, [r3, #28]
 800f146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f023 0303 	bic.w	r3, r3, #3
 800f15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	4313      	orrs	r3, r2
 800f164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	021b      	lsls	r3, r3, #8
 800f174:	697a      	ldr	r2, [r7, #20]
 800f176:	4313      	orrs	r3, r2
 800f178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4a27      	ldr	r2, [pc, #156]	; (800f21c <TIM_OC3_SetConfig+0xfc>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d003      	beq.n	800f18a <TIM_OC3_SetConfig+0x6a>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	4a26      	ldr	r2, [pc, #152]	; (800f220 <TIM_OC3_SetConfig+0x100>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d10d      	bne.n	800f1a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	021b      	lsls	r3, r3, #8
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a1c      	ldr	r2, [pc, #112]	; (800f21c <TIM_OC3_SetConfig+0xfc>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00f      	beq.n	800f1ce <TIM_OC3_SetConfig+0xae>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a1b      	ldr	r2, [pc, #108]	; (800f220 <TIM_OC3_SetConfig+0x100>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d00b      	beq.n	800f1ce <TIM_OC3_SetConfig+0xae>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a1a      	ldr	r2, [pc, #104]	; (800f224 <TIM_OC3_SetConfig+0x104>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d007      	beq.n	800f1ce <TIM_OC3_SetConfig+0xae>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a19      	ldr	r2, [pc, #100]	; (800f228 <TIM_OC3_SetConfig+0x108>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d003      	beq.n	800f1ce <TIM_OC3_SetConfig+0xae>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a18      	ldr	r2, [pc, #96]	; (800f22c <TIM_OC3_SetConfig+0x10c>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d113      	bne.n	800f1f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	695b      	ldr	r3, [r3, #20]
 800f1e2:	011b      	lsls	r3, r3, #4
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	011b      	lsls	r3, r3, #4
 800f1f0:	693a      	ldr	r2, [r7, #16]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	685a      	ldr	r2, [r3, #4]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	621a      	str	r2, [r3, #32]
}
 800f210:	bf00      	nop
 800f212:	371c      	adds	r7, #28
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	40012c00 	.word	0x40012c00
 800f220:	40013400 	.word	0x40013400
 800f224:	40014000 	.word	0x40014000
 800f228:	40014400 	.word	0x40014400
 800f22c:	40014800 	.word	0x40014800

0800f230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a1b      	ldr	r3, [r3, #32]
 800f244:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	69db      	ldr	r3, [r3, #28]
 800f256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f26a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	021b      	lsls	r3, r3, #8
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	4313      	orrs	r3, r2
 800f276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f27e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	031b      	lsls	r3, r3, #12
 800f286:	693a      	ldr	r2, [r7, #16]
 800f288:	4313      	orrs	r3, r2
 800f28a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a18      	ldr	r2, [pc, #96]	; (800f2f0 <TIM_OC4_SetConfig+0xc0>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00f      	beq.n	800f2b4 <TIM_OC4_SetConfig+0x84>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a17      	ldr	r2, [pc, #92]	; (800f2f4 <TIM_OC4_SetConfig+0xc4>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00b      	beq.n	800f2b4 <TIM_OC4_SetConfig+0x84>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a16      	ldr	r2, [pc, #88]	; (800f2f8 <TIM_OC4_SetConfig+0xc8>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d007      	beq.n	800f2b4 <TIM_OC4_SetConfig+0x84>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a15      	ldr	r2, [pc, #84]	; (800f2fc <TIM_OC4_SetConfig+0xcc>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC4_SetConfig+0x84>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a14      	ldr	r2, [pc, #80]	; (800f300 <TIM_OC4_SetConfig+0xd0>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d109      	bne.n	800f2c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	019b      	lsls	r3, r3, #6
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	68fa      	ldr	r2, [r7, #12]
 800f2d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	685a      	ldr	r2, [r3, #4]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	693a      	ldr	r2, [r7, #16]
 800f2e0:	621a      	str	r2, [r3, #32]
}
 800f2e2:	bf00      	nop
 800f2e4:	371c      	adds	r7, #28
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	40012c00 	.word	0x40012c00
 800f2f4:	40013400 	.word	0x40013400
 800f2f8:	40014000 	.word	0x40014000
 800f2fc:	40014400 	.word	0x40014400
 800f300:	40014800 	.word	0x40014800

0800f304 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f304:	b480      	push	{r7}
 800f306:	b087      	sub	sp, #28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a1b      	ldr	r3, [r3, #32]
 800f318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68fa      	ldr	r2, [r7, #12]
 800f33e:	4313      	orrs	r3, r2
 800f340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	041b      	lsls	r3, r3, #16
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	4313      	orrs	r3, r2
 800f354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a17      	ldr	r2, [pc, #92]	; (800f3b8 <TIM_OC5_SetConfig+0xb4>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d00f      	beq.n	800f37e <TIM_OC5_SetConfig+0x7a>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a16      	ldr	r2, [pc, #88]	; (800f3bc <TIM_OC5_SetConfig+0xb8>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d00b      	beq.n	800f37e <TIM_OC5_SetConfig+0x7a>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a15      	ldr	r2, [pc, #84]	; (800f3c0 <TIM_OC5_SetConfig+0xbc>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d007      	beq.n	800f37e <TIM_OC5_SetConfig+0x7a>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a14      	ldr	r2, [pc, #80]	; (800f3c4 <TIM_OC5_SetConfig+0xc0>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d003      	beq.n	800f37e <TIM_OC5_SetConfig+0x7a>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a13      	ldr	r2, [pc, #76]	; (800f3c8 <TIM_OC5_SetConfig+0xc4>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d109      	bne.n	800f392 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	695b      	ldr	r3, [r3, #20]
 800f38a:	021b      	lsls	r3, r3, #8
 800f38c:	697a      	ldr	r2, [r7, #20]
 800f38e:	4313      	orrs	r3, r2
 800f390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	685a      	ldr	r2, [r3, #4]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	693a      	ldr	r2, [r7, #16]
 800f3aa:	621a      	str	r2, [r3, #32]
}
 800f3ac:	bf00      	nop
 800f3ae:	371c      	adds	r7, #28
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr
 800f3b8:	40012c00 	.word	0x40012c00
 800f3bc:	40013400 	.word	0x40013400
 800f3c0:	40014000 	.word	0x40014000
 800f3c4:	40014400 	.word	0x40014400
 800f3c8:	40014800 	.word	0x40014800

0800f3cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b087      	sub	sp, #28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a1b      	ldr	r3, [r3, #32]
 800f3e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	021b      	lsls	r3, r3, #8
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	4313      	orrs	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	051b      	lsls	r3, r3, #20
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a18      	ldr	r2, [pc, #96]	; (800f484 <TIM_OC6_SetConfig+0xb8>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d00f      	beq.n	800f448 <TIM_OC6_SetConfig+0x7c>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a17      	ldr	r2, [pc, #92]	; (800f488 <TIM_OC6_SetConfig+0xbc>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d00b      	beq.n	800f448 <TIM_OC6_SetConfig+0x7c>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a16      	ldr	r2, [pc, #88]	; (800f48c <TIM_OC6_SetConfig+0xc0>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d007      	beq.n	800f448 <TIM_OC6_SetConfig+0x7c>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a15      	ldr	r2, [pc, #84]	; (800f490 <TIM_OC6_SetConfig+0xc4>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d003      	beq.n	800f448 <TIM_OC6_SetConfig+0x7c>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a14      	ldr	r2, [pc, #80]	; (800f494 <TIM_OC6_SetConfig+0xc8>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d109      	bne.n	800f45c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f44e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	029b      	lsls	r3, r3, #10
 800f456:	697a      	ldr	r2, [r7, #20]
 800f458:	4313      	orrs	r3, r2
 800f45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	621a      	str	r2, [r3, #32]
}
 800f476:	bf00      	nop
 800f478:	371c      	adds	r7, #28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	40012c00 	.word	0x40012c00
 800f488:	40013400 	.word	0x40013400
 800f48c:	40014000 	.word	0x40014000
 800f490:	40014400 	.word	0x40014400
 800f494:	40014800 	.word	0x40014800

0800f498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	f003 031f 	and.w	r3, r3, #31
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f4b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	6a1a      	ldr	r2, [r3, #32]
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	43db      	mvns	r3, r3
 800f4ba:	401a      	ands	r2, r3
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6a1a      	ldr	r2, [r3, #32]
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f003 031f 	and.w	r3, r3, #31
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f4d0:	431a      	orrs	r2, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	621a      	str	r2, [r3, #32]
}
 800f4d6:	bf00      	nop
 800f4d8:	371c      	adds	r7, #28
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
	...

0800f4e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d101      	bne.n	800f4fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	e068      	b.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2202      	movs	r2, #2
 800f508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a2e      	ldr	r2, [pc, #184]	; (800f5dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d004      	beq.n	800f530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a2d      	ldr	r2, [pc, #180]	; (800f5e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d108      	bne.n	800f542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	4313      	orrs	r3, r2
 800f540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	4313      	orrs	r3, r2
 800f552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68fa      	ldr	r2, [r7, #12]
 800f55a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a1e      	ldr	r2, [pc, #120]	; (800f5dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d01d      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f56e:	d018      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a1b      	ldr	r2, [pc, #108]	; (800f5e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d013      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a1a      	ldr	r2, [pc, #104]	; (800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d00e      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a18      	ldr	r2, [pc, #96]	; (800f5ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d009      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a13      	ldr	r2, [pc, #76]	; (800f5e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d004      	beq.n	800f5a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a14      	ldr	r2, [pc, #80]	; (800f5f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d10c      	bne.n	800f5bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3714      	adds	r7, #20
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	40012c00 	.word	0x40012c00
 800f5e0:	40013400 	.word	0x40013400
 800f5e4:	40000400 	.word	0x40000400
 800f5e8:	40000800 	.word	0x40000800
 800f5ec:	40000c00 	.word	0x40000c00
 800f5f0:	40014000 	.word	0x40014000

0800f5f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f5fe:	2300      	movs	r3, #0
 800f600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d101      	bne.n	800f610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f60c:	2302      	movs	r3, #2
 800f60e:	e065      	b.n	800f6dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2201      	movs	r2, #1
 800f614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	4313      	orrs	r3, r2
 800f624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	4313      	orrs	r3, r2
 800f632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	691b      	ldr	r3, [r3, #16]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	695b      	ldr	r3, [r3, #20]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	041b      	lsls	r3, r3, #16
 800f686:	4313      	orrs	r3, r2
 800f688:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d004      	beq.n	800f69e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a14      	ldr	r2, [pc, #80]	; (800f6ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d115      	bne.n	800f6ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	051b      	lsls	r3, r3, #20
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	69db      	ldr	r3, [r3, #28]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	6a1b      	ldr	r3, [r3, #32]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	40012c00 	.word	0x40012c00
 800f6ec:	40013400 	.word	0x40013400

0800f6f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6f8:	bf00      	nop
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f720:	bf00      	nop
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d101      	bne.n	800f73e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e040      	b.n	800f7c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f742:	2b00      	cmp	r3, #0
 800f744:	d106      	bne.n	800f754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7f5 fcaa 	bl	80050a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2224      	movs	r2, #36	; 0x24
 800f758:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f022 0201 	bic.w	r2, r2, #1
 800f768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fe7c 	bl	8010470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fbc1 	bl	800ff00 <UART_SetConfig>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b01      	cmp	r3, #1
 800f782:	d101      	bne.n	800f788 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	e01b      	b.n	800f7c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	689a      	ldr	r2, [r3, #8]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f042 0201 	orr.w	r2, r2, #1
 800f7b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fefb 	bl	80105b4 <UART_CheckIdleState>
 800f7be:	4603      	mov	r3, r0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	; 0x28
 800f7cc:	af02      	add	r7, sp, #8
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	603b      	str	r3, [r7, #0]
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7dc:	2b20      	cmp	r3, #32
 800f7de:	d178      	bne.n	800f8d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <HAL_UART_Transmit+0x24>
 800f7e6:	88fb      	ldrh	r3, [r7, #6]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e071      	b.n	800f8d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2221      	movs	r2, #33	; 0x21
 800f7fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f7fe:	f7f8 fe81 	bl	8008504 <HAL_GetTick>
 800f802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	88fa      	ldrh	r2, [r7, #6]
 800f808:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	88fa      	ldrh	r2, [r7, #6]
 800f810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f81c:	d108      	bne.n	800f830 <HAL_UART_Transmit+0x68>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d104      	bne.n	800f830 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f826:	2300      	movs	r3, #0
 800f828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	61bb      	str	r3, [r7, #24]
 800f82e:	e003      	b.n	800f838 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f834:	2300      	movs	r3, #0
 800f836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f838:	e030      	b.n	800f89c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	2200      	movs	r2, #0
 800f842:	2180      	movs	r1, #128	; 0x80
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 ff5d 	bl	8010704 <UART_WaitOnFlagUntilTimeout>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d004      	beq.n	800f85a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2220      	movs	r2, #32
 800f854:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f856:	2303      	movs	r3, #3
 800f858:	e03c      	b.n	800f8d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10b      	bne.n	800f878 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	881a      	ldrh	r2, [r3, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f86c:	b292      	uxth	r2, r2
 800f86e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	3302      	adds	r3, #2
 800f874:	61bb      	str	r3, [r7, #24]
 800f876:	e008      	b.n	800f88a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	781a      	ldrb	r2, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	b292      	uxth	r2, r2
 800f882:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	3301      	adds	r3, #1
 800f888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f890:	b29b      	uxth	r3, r3
 800f892:	3b01      	subs	r3, #1
 800f894:	b29a      	uxth	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1c8      	bne.n	800f83a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	2140      	movs	r1, #64	; 0x40
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f000 ff26 	bl	8010704 <UART_WaitOnFlagUntilTimeout>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d004      	beq.n	800f8c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2220      	movs	r2, #32
 800f8c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	e005      	b.n	800f8d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2220      	movs	r2, #32
 800f8cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e000      	b.n	800f8d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800f8d2:	2302      	movs	r3, #2
  }
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3720      	adds	r7, #32
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b0ba      	sub	sp, #232	; 0xe8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	69db      	ldr	r3, [r3, #28]
 800f8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f906:	f640 030f 	movw	r3, #2063	; 0x80f
 800f90a:	4013      	ands	r3, r2
 800f90c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f914:	2b00      	cmp	r3, #0
 800f916:	d115      	bne.n	800f944 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f91c:	f003 0320 	and.w	r3, r3, #32
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00f      	beq.n	800f944 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f928:	f003 0320 	and.w	r3, r3, #32
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d009      	beq.n	800f944 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 82ae 	beq.w	800fe96 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	4798      	blx	r3
      }
      return;
 800f942:	e2a8      	b.n	800fe96 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800f944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 8117 	beq.w	800fb7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f94e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d106      	bne.n	800f968 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f95a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f95e:	4b85      	ldr	r3, [pc, #532]	; (800fb74 <HAL_UART_IRQHandler+0x298>)
 800f960:	4013      	ands	r3, r2
 800f962:	2b00      	cmp	r3, #0
 800f964:	f000 810a 	beq.w	800fb7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	d011      	beq.n	800f998 <HAL_UART_IRQHandler+0xbc>
 800f974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00b      	beq.n	800f998 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2201      	movs	r2, #1
 800f986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f98e:	f043 0201 	orr.w	r2, r3, #1
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f99c:	f003 0302 	and.w	r3, r3, #2
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d011      	beq.n	800f9c8 <HAL_UART_IRQHandler+0xec>
 800f9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00b      	beq.n	800f9c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9be:	f043 0204 	orr.w	r2, r3, #4
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9cc:	f003 0304 	and.w	r3, r3, #4
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d011      	beq.n	800f9f8 <HAL_UART_IRQHandler+0x11c>
 800f9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9d8:	f003 0301 	and.w	r3, r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00b      	beq.n	800f9f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2204      	movs	r2, #4
 800f9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9ee:	f043 0202 	orr.w	r2, r3, #2
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fc:	f003 0308 	and.w	r3, r3, #8
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d017      	beq.n	800fa34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa08:	f003 0320 	and.w	r3, r3, #32
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d105      	bne.n	800fa1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fa10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00b      	beq.n	800fa34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2208      	movs	r2, #8
 800fa22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa2a:	f043 0208 	orr.w	r2, r3, #8
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d012      	beq.n	800fa66 <HAL_UART_IRQHandler+0x18a>
 800fa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00c      	beq.n	800fa66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa5c:	f043 0220 	orr.w	r2, r3, #32
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 8214 	beq.w	800fe9a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa76:	f003 0320 	and.w	r3, r3, #32
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00d      	beq.n	800fa9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fa7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa82:	f003 0320 	and.w	r3, r3, #32
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d007      	beq.n	800fa9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d003      	beq.n	800fa9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faae:	2b40      	cmp	r3, #64	; 0x40
 800fab0:	d005      	beq.n	800fabe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d04f      	beq.n	800fb5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 ff4e 	bl	8010960 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800face:	2b40      	cmp	r3, #64	; 0x40
 800fad0:	d141      	bne.n	800fb56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3308      	adds	r3, #8
 800fad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fadc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fae0:	e853 3f00 	ldrex	r3, [r3]
 800fae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800faec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	3308      	adds	r3, #8
 800fafa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fafe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fb02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fb0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb0e:	e841 2300 	strex	r3, r2, [r1]
 800fb12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fb16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1d9      	bne.n	800fad2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d013      	beq.n	800fb4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb2a:	4a13      	ldr	r2, [pc, #76]	; (800fb78 <HAL_UART_IRQHandler+0x29c>)
 800fb2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fa fce8 	bl	800a508 <HAL_DMA_Abort_IT>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d017      	beq.n	800fb6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800fb48:	4610      	mov	r0, r2
 800fb4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb4c:	e00f      	b.n	800fb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 f9cc 	bl	800feec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb54:	e00b      	b.n	800fb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 f9c8 	bl	800feec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb5c:	e007      	b.n	800fb6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f9c4 	bl	800feec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800fb6c:	e195      	b.n	800fe9a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb6e:	bf00      	nop
    return;
 800fb70:	e193      	b.n	800fe9a <HAL_UART_IRQHandler+0x5be>
 800fb72:	bf00      	nop
 800fb74:	04000120 	.word	0x04000120
 800fb78:	08010c11 	.word	0x08010c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	f040 814e 	bne.w	800fe22 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb8a:	f003 0310 	and.w	r3, r3, #16
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f000 8147 	beq.w	800fe22 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb98:	f003 0310 	and.w	r3, r3, #16
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 8140 	beq.w	800fe22 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2210      	movs	r2, #16
 800fba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb4:	2b40      	cmp	r3, #64	; 0x40
 800fbb6:	f040 80b8 	bne.w	800fd2a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 8167 	beq.w	800fe9e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fbd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	f080 815f 	bcs.w	800fe9e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f003 0320 	and.w	r3, r3, #32
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f040 8086 	bne.w	800fd08 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc08:	e853 3f00 	ldrex	r3, [r3]
 800fc0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fc10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	461a      	mov	r2, r3
 800fc22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fc26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc36:	e841 2300 	strex	r3, r2, [r1]
 800fc3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fc3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1da      	bne.n	800fbfc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc50:	e853 3f00 	ldrex	r3, [r3]
 800fc54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc58:	f023 0301 	bic.w	r3, r3, #1
 800fc5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	3308      	adds	r3, #8
 800fc66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fc6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fc6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fc72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc76:	e841 2300 	strex	r3, r2, [r1]
 800fc7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fc7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1e1      	bne.n	800fc46 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	3308      	adds	r3, #8
 800fc88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc8c:	e853 3f00 	ldrex	r3, [r3]
 800fc90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3308      	adds	r3, #8
 800fca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fcac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fcae:	e841 2300 	strex	r3, r2, [r1]
 800fcb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fcb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e3      	bne.n	800fc82 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2220      	movs	r2, #32
 800fcbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcd0:	e853 3f00 	ldrex	r3, [r3]
 800fcd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd8:	f023 0310 	bic.w	r3, r3, #16
 800fcdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	461a      	mov	r2, r3
 800fce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fcea:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcf2:	e841 2300 	strex	r3, r2, [r1]
 800fcf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1e4      	bne.n	800fcc8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fa fbc2 	bl	800a48c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2202      	movs	r2, #2
 800fd0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	4619      	mov	r1, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7f3 fe96 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd28:	e0b9      	b.n	800fe9e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 80ab 	beq.w	800fea2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800fd4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f000 80a6 	beq.w	800fea2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	e853 3f00 	ldrex	r3, [r3]
 800fd62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fd78:	647b      	str	r3, [r7, #68]	; 0x44
 800fd7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd80:	e841 2300 	strex	r3, r2, [r1]
 800fd84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1e4      	bne.n	800fd56 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3308      	adds	r3, #8
 800fd92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	623b      	str	r3, [r7, #32]
   return(result);
 800fd9c:	6a3b      	ldr	r3, [r7, #32]
 800fd9e:	f023 0301 	bic.w	r3, r3, #1
 800fda2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fdb0:	633a      	str	r2, [r7, #48]	; 0x30
 800fdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdb8:	e841 2300 	strex	r3, r2, [r1]
 800fdbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1e3      	bne.n	800fd8c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2220      	movs	r2, #32
 800fdc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	e853 3f00 	ldrex	r3, [r3]
 800fde4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f023 0310 	bic.w	r3, r3, #16
 800fdec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fdfa:	61fb      	str	r3, [r7, #28]
 800fdfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfe:	69b9      	ldr	r1, [r7, #24]
 800fe00:	69fa      	ldr	r2, [r7, #28]
 800fe02:	e841 2300 	strex	r3, r2, [r1]
 800fe06:	617b      	str	r3, [r7, #20]
   return(result);
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e4      	bne.n	800fdd8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2202      	movs	r2, #2
 800fe12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe18:	4619      	mov	r1, r3
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7f3 fe1a 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe20:	e03f      	b.n	800fea2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fe22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00e      	beq.n	800fe4c <HAL_UART_IRQHandler+0x570>
 800fe2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d008      	beq.n	800fe4c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fe42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 ff23 	bl	8010c90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe4a:	e02d      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fe4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00e      	beq.n	800fe76 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fe58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d008      	beq.n	800fe76 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d01c      	beq.n	800fea6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	4798      	blx	r3
    }
    return;
 800fe74:	e017      	b.n	800fea6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fe76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d012      	beq.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
 800fe82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00c      	beq.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fed4 	bl	8010c3c <UART_EndTransmit_IT>
    return;
 800fe94:	e008      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800fe96:	bf00      	nop
 800fe98:	e006      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800fe9a:	bf00      	nop
 800fe9c:	e004      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800fe9e:	bf00      	nop
 800fea0:	e002      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800fea2:	bf00      	nop
 800fea4:	e000      	b.n	800fea8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800fea6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800fea8:	37e8      	adds	r7, #232	; 0xe8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop

0800feb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800feb8:	bf00      	nop
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff04:	b08a      	sub	sp, #40	; 0x28
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	689a      	ldr	r2, [r3, #8]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	691b      	ldr	r3, [r3, #16]
 800ff18:	431a      	orrs	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	69db      	ldr	r3, [r3, #28]
 800ff24:	4313      	orrs	r3, r2
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	4ba4      	ldr	r3, [pc, #656]	; (80101c0 <UART_SetConfig+0x2c0>)
 800ff30:	4013      	ands	r3, r2
 800ff32:	68fa      	ldr	r2, [r7, #12]
 800ff34:	6812      	ldr	r2, [r2, #0]
 800ff36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff38:	430b      	orrs	r3, r1
 800ff3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	68da      	ldr	r2, [r3, #12]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	699b      	ldr	r3, [r3, #24]
 800ff56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a99      	ldr	r2, [pc, #612]	; (80101c4 <UART_SetConfig+0x2c4>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d004      	beq.n	800ff6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6a1b      	ldr	r3, [r3, #32]
 800ff66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff7c:	430a      	orrs	r2, r1
 800ff7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a90      	ldr	r2, [pc, #576]	; (80101c8 <UART_SetConfig+0x2c8>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d126      	bne.n	800ffd8 <UART_SetConfig+0xd8>
 800ff8a:	4b90      	ldr	r3, [pc, #576]	; (80101cc <UART_SetConfig+0x2cc>)
 800ff8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff90:	f003 0303 	and.w	r3, r3, #3
 800ff94:	2b03      	cmp	r3, #3
 800ff96:	d81b      	bhi.n	800ffd0 <UART_SetConfig+0xd0>
 800ff98:	a201      	add	r2, pc, #4	; (adr r2, 800ffa0 <UART_SetConfig+0xa0>)
 800ff9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff9e:	bf00      	nop
 800ffa0:	0800ffb1 	.word	0x0800ffb1
 800ffa4:	0800ffc1 	.word	0x0800ffc1
 800ffa8:	0800ffb9 	.word	0x0800ffb9
 800ffac:	0800ffc9 	.word	0x0800ffc9
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ffb6:	e116      	b.n	80101e6 <UART_SetConfig+0x2e6>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ffbe:	e112      	b.n	80101e6 <UART_SetConfig+0x2e6>
 800ffc0:	2304      	movs	r3, #4
 800ffc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ffc6:	e10e      	b.n	80101e6 <UART_SetConfig+0x2e6>
 800ffc8:	2308      	movs	r3, #8
 800ffca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ffce:	e10a      	b.n	80101e6 <UART_SetConfig+0x2e6>
 800ffd0:	2310      	movs	r3, #16
 800ffd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ffd6:	e106      	b.n	80101e6 <UART_SetConfig+0x2e6>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a7c      	ldr	r2, [pc, #496]	; (80101d0 <UART_SetConfig+0x2d0>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d138      	bne.n	8010054 <UART_SetConfig+0x154>
 800ffe2:	4b7a      	ldr	r3, [pc, #488]	; (80101cc <UART_SetConfig+0x2cc>)
 800ffe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffe8:	f003 030c 	and.w	r3, r3, #12
 800ffec:	2b0c      	cmp	r3, #12
 800ffee:	d82d      	bhi.n	801004c <UART_SetConfig+0x14c>
 800fff0:	a201      	add	r2, pc, #4	; (adr r2, 800fff8 <UART_SetConfig+0xf8>)
 800fff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff6:	bf00      	nop
 800fff8:	0801002d 	.word	0x0801002d
 800fffc:	0801004d 	.word	0x0801004d
 8010000:	0801004d 	.word	0x0801004d
 8010004:	0801004d 	.word	0x0801004d
 8010008:	0801003d 	.word	0x0801003d
 801000c:	0801004d 	.word	0x0801004d
 8010010:	0801004d 	.word	0x0801004d
 8010014:	0801004d 	.word	0x0801004d
 8010018:	08010035 	.word	0x08010035
 801001c:	0801004d 	.word	0x0801004d
 8010020:	0801004d 	.word	0x0801004d
 8010024:	0801004d 	.word	0x0801004d
 8010028:	08010045 	.word	0x08010045
 801002c:	2300      	movs	r3, #0
 801002e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010032:	e0d8      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010034:	2302      	movs	r3, #2
 8010036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801003a:	e0d4      	b.n	80101e6 <UART_SetConfig+0x2e6>
 801003c:	2304      	movs	r3, #4
 801003e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010042:	e0d0      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010044:	2308      	movs	r3, #8
 8010046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801004a:	e0cc      	b.n	80101e6 <UART_SetConfig+0x2e6>
 801004c:	2310      	movs	r3, #16
 801004e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010052:	e0c8      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a5e      	ldr	r2, [pc, #376]	; (80101d4 <UART_SetConfig+0x2d4>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d125      	bne.n	80100aa <UART_SetConfig+0x1aa>
 801005e:	4b5b      	ldr	r3, [pc, #364]	; (80101cc <UART_SetConfig+0x2cc>)
 8010060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010068:	2b30      	cmp	r3, #48	; 0x30
 801006a:	d016      	beq.n	801009a <UART_SetConfig+0x19a>
 801006c:	2b30      	cmp	r3, #48	; 0x30
 801006e:	d818      	bhi.n	80100a2 <UART_SetConfig+0x1a2>
 8010070:	2b20      	cmp	r3, #32
 8010072:	d00a      	beq.n	801008a <UART_SetConfig+0x18a>
 8010074:	2b20      	cmp	r3, #32
 8010076:	d814      	bhi.n	80100a2 <UART_SetConfig+0x1a2>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <UART_SetConfig+0x182>
 801007c:	2b10      	cmp	r3, #16
 801007e:	d008      	beq.n	8010092 <UART_SetConfig+0x192>
 8010080:	e00f      	b.n	80100a2 <UART_SetConfig+0x1a2>
 8010082:	2300      	movs	r3, #0
 8010084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010088:	e0ad      	b.n	80101e6 <UART_SetConfig+0x2e6>
 801008a:	2302      	movs	r3, #2
 801008c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010090:	e0a9      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010092:	2304      	movs	r3, #4
 8010094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010098:	e0a5      	b.n	80101e6 <UART_SetConfig+0x2e6>
 801009a:	2308      	movs	r3, #8
 801009c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100a0:	e0a1      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100a2:	2310      	movs	r3, #16
 80100a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100a8:	e09d      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a4a      	ldr	r2, [pc, #296]	; (80101d8 <UART_SetConfig+0x2d8>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d125      	bne.n	8010100 <UART_SetConfig+0x200>
 80100b4:	4b45      	ldr	r3, [pc, #276]	; (80101cc <UART_SetConfig+0x2cc>)
 80100b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80100be:	2bc0      	cmp	r3, #192	; 0xc0
 80100c0:	d016      	beq.n	80100f0 <UART_SetConfig+0x1f0>
 80100c2:	2bc0      	cmp	r3, #192	; 0xc0
 80100c4:	d818      	bhi.n	80100f8 <UART_SetConfig+0x1f8>
 80100c6:	2b80      	cmp	r3, #128	; 0x80
 80100c8:	d00a      	beq.n	80100e0 <UART_SetConfig+0x1e0>
 80100ca:	2b80      	cmp	r3, #128	; 0x80
 80100cc:	d814      	bhi.n	80100f8 <UART_SetConfig+0x1f8>
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <UART_SetConfig+0x1d8>
 80100d2:	2b40      	cmp	r3, #64	; 0x40
 80100d4:	d008      	beq.n	80100e8 <UART_SetConfig+0x1e8>
 80100d6:	e00f      	b.n	80100f8 <UART_SetConfig+0x1f8>
 80100d8:	2300      	movs	r3, #0
 80100da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100de:	e082      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100e0:	2302      	movs	r3, #2
 80100e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100e6:	e07e      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100e8:	2304      	movs	r3, #4
 80100ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100ee:	e07a      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100f0:	2308      	movs	r3, #8
 80100f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100f6:	e076      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80100f8:	2310      	movs	r3, #16
 80100fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80100fe:	e072      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a35      	ldr	r2, [pc, #212]	; (80101dc <UART_SetConfig+0x2dc>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d12a      	bne.n	8010160 <UART_SetConfig+0x260>
 801010a:	4b30      	ldr	r3, [pc, #192]	; (80101cc <UART_SetConfig+0x2cc>)
 801010c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010118:	d01a      	beq.n	8010150 <UART_SetConfig+0x250>
 801011a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801011e:	d81b      	bhi.n	8010158 <UART_SetConfig+0x258>
 8010120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010124:	d00c      	beq.n	8010140 <UART_SetConfig+0x240>
 8010126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801012a:	d815      	bhi.n	8010158 <UART_SetConfig+0x258>
 801012c:	2b00      	cmp	r3, #0
 801012e:	d003      	beq.n	8010138 <UART_SetConfig+0x238>
 8010130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010134:	d008      	beq.n	8010148 <UART_SetConfig+0x248>
 8010136:	e00f      	b.n	8010158 <UART_SetConfig+0x258>
 8010138:	2300      	movs	r3, #0
 801013a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801013e:	e052      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010140:	2302      	movs	r3, #2
 8010142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010146:	e04e      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010148:	2304      	movs	r3, #4
 801014a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801014e:	e04a      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010150:	2308      	movs	r3, #8
 8010152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010156:	e046      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010158:	2310      	movs	r3, #16
 801015a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801015e:	e042      	b.n	80101e6 <UART_SetConfig+0x2e6>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a17      	ldr	r2, [pc, #92]	; (80101c4 <UART_SetConfig+0x2c4>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d13a      	bne.n	80101e0 <UART_SetConfig+0x2e0>
 801016a:	4b18      	ldr	r3, [pc, #96]	; (80101cc <UART_SetConfig+0x2cc>)
 801016c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010178:	d01a      	beq.n	80101b0 <UART_SetConfig+0x2b0>
 801017a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801017e:	d81b      	bhi.n	80101b8 <UART_SetConfig+0x2b8>
 8010180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010184:	d00c      	beq.n	80101a0 <UART_SetConfig+0x2a0>
 8010186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801018a:	d815      	bhi.n	80101b8 <UART_SetConfig+0x2b8>
 801018c:	2b00      	cmp	r3, #0
 801018e:	d003      	beq.n	8010198 <UART_SetConfig+0x298>
 8010190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010194:	d008      	beq.n	80101a8 <UART_SetConfig+0x2a8>
 8010196:	e00f      	b.n	80101b8 <UART_SetConfig+0x2b8>
 8010198:	2300      	movs	r3, #0
 801019a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801019e:	e022      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80101a0:	2302      	movs	r3, #2
 80101a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101a6:	e01e      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80101a8:	2304      	movs	r3, #4
 80101aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101ae:	e01a      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80101b0:	2308      	movs	r3, #8
 80101b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101b6:	e016      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80101b8:	2310      	movs	r3, #16
 80101ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80101be:	e012      	b.n	80101e6 <UART_SetConfig+0x2e6>
 80101c0:	efff69f3 	.word	0xefff69f3
 80101c4:	40008000 	.word	0x40008000
 80101c8:	40013800 	.word	0x40013800
 80101cc:	40021000 	.word	0x40021000
 80101d0:	40004400 	.word	0x40004400
 80101d4:	40004800 	.word	0x40004800
 80101d8:	40004c00 	.word	0x40004c00
 80101dc:	40005000 	.word	0x40005000
 80101e0:	2310      	movs	r3, #16
 80101e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a9f      	ldr	r2, [pc, #636]	; (8010468 <UART_SetConfig+0x568>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d17a      	bne.n	80102e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80101f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101f4:	2b08      	cmp	r3, #8
 80101f6:	d824      	bhi.n	8010242 <UART_SetConfig+0x342>
 80101f8:	a201      	add	r2, pc, #4	; (adr r2, 8010200 <UART_SetConfig+0x300>)
 80101fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101fe:	bf00      	nop
 8010200:	08010225 	.word	0x08010225
 8010204:	08010243 	.word	0x08010243
 8010208:	0801022d 	.word	0x0801022d
 801020c:	08010243 	.word	0x08010243
 8010210:	08010233 	.word	0x08010233
 8010214:	08010243 	.word	0x08010243
 8010218:	08010243 	.word	0x08010243
 801021c:	08010243 	.word	0x08010243
 8010220:	0801023b 	.word	0x0801023b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010224:	f7fc fd92 	bl	800cd4c <HAL_RCC_GetPCLK1Freq>
 8010228:	61f8      	str	r0, [r7, #28]
        break;
 801022a:	e010      	b.n	801024e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801022c:	4b8f      	ldr	r3, [pc, #572]	; (801046c <UART_SetConfig+0x56c>)
 801022e:	61fb      	str	r3, [r7, #28]
        break;
 8010230:	e00d      	b.n	801024e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010232:	f7fc fcf3 	bl	800cc1c <HAL_RCC_GetSysClockFreq>
 8010236:	61f8      	str	r0, [r7, #28]
        break;
 8010238:	e009      	b.n	801024e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801023a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801023e:	61fb      	str	r3, [r7, #28]
        break;
 8010240:	e005      	b.n	801024e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8010242:	2300      	movs	r3, #0
 8010244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 801024c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 80fb 	beq.w	801044c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	685a      	ldr	r2, [r3, #4]
 801025a:	4613      	mov	r3, r2
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	4413      	add	r3, r2
 8010260:	69fa      	ldr	r2, [r7, #28]
 8010262:	429a      	cmp	r2, r3
 8010264:	d305      	bcc.n	8010272 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801026c:	69fa      	ldr	r2, [r7, #28]
 801026e:	429a      	cmp	r2, r3
 8010270:	d903      	bls.n	801027a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8010278:	e0e8      	b.n	801044c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	2200      	movs	r2, #0
 801027e:	461c      	mov	r4, r3
 8010280:	4615      	mov	r5, r2
 8010282:	f04f 0200 	mov.w	r2, #0
 8010286:	f04f 0300 	mov.w	r3, #0
 801028a:	022b      	lsls	r3, r5, #8
 801028c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8010290:	0222      	lsls	r2, r4, #8
 8010292:	68f9      	ldr	r1, [r7, #12]
 8010294:	6849      	ldr	r1, [r1, #4]
 8010296:	0849      	lsrs	r1, r1, #1
 8010298:	2000      	movs	r0, #0
 801029a:	4688      	mov	r8, r1
 801029c:	4681      	mov	r9, r0
 801029e:	eb12 0a08 	adds.w	sl, r2, r8
 80102a2:	eb43 0b09 	adc.w	fp, r3, r9
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	603b      	str	r3, [r7, #0]
 80102ae:	607a      	str	r2, [r7, #4]
 80102b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102b4:	4650      	mov	r0, sl
 80102b6:	4659      	mov	r1, fp
 80102b8:	f7f0 fcd6 	bl	8000c68 <__aeabi_uldivmod>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4613      	mov	r3, r2
 80102c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102ca:	d308      	bcc.n	80102de <UART_SetConfig+0x3de>
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102d2:	d204      	bcs.n	80102de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	69ba      	ldr	r2, [r7, #24]
 80102da:	60da      	str	r2, [r3, #12]
 80102dc:	e0b6      	b.n	801044c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80102de:	2301      	movs	r3, #1
 80102e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80102e4:	e0b2      	b.n	801044c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102ee:	d15e      	bne.n	80103ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80102f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80102f4:	2b08      	cmp	r3, #8
 80102f6:	d828      	bhi.n	801034a <UART_SetConfig+0x44a>
 80102f8:	a201      	add	r2, pc, #4	; (adr r2, 8010300 <UART_SetConfig+0x400>)
 80102fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102fe:	bf00      	nop
 8010300:	08010325 	.word	0x08010325
 8010304:	0801032d 	.word	0x0801032d
 8010308:	08010335 	.word	0x08010335
 801030c:	0801034b 	.word	0x0801034b
 8010310:	0801033b 	.word	0x0801033b
 8010314:	0801034b 	.word	0x0801034b
 8010318:	0801034b 	.word	0x0801034b
 801031c:	0801034b 	.word	0x0801034b
 8010320:	08010343 	.word	0x08010343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010324:	f7fc fd12 	bl	800cd4c <HAL_RCC_GetPCLK1Freq>
 8010328:	61f8      	str	r0, [r7, #28]
        break;
 801032a:	e014      	b.n	8010356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801032c:	f7fc fd24 	bl	800cd78 <HAL_RCC_GetPCLK2Freq>
 8010330:	61f8      	str	r0, [r7, #28]
        break;
 8010332:	e010      	b.n	8010356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010334:	4b4d      	ldr	r3, [pc, #308]	; (801046c <UART_SetConfig+0x56c>)
 8010336:	61fb      	str	r3, [r7, #28]
        break;
 8010338:	e00d      	b.n	8010356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801033a:	f7fc fc6f 	bl	800cc1c <HAL_RCC_GetSysClockFreq>
 801033e:	61f8      	str	r0, [r7, #28]
        break;
 8010340:	e009      	b.n	8010356 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010346:	61fb      	str	r3, [r7, #28]
        break;
 8010348:	e005      	b.n	8010356 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 801034a:	2300      	movs	r3, #0
 801034c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801034e:	2301      	movs	r3, #1
 8010350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d077      	beq.n	801044c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	005a      	lsls	r2, r3, #1
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	085b      	lsrs	r3, r3, #1
 8010366:	441a      	add	r2, r3
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010370:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	2b0f      	cmp	r3, #15
 8010376:	d916      	bls.n	80103a6 <UART_SetConfig+0x4a6>
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801037e:	d212      	bcs.n	80103a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	b29b      	uxth	r3, r3
 8010384:	f023 030f 	bic.w	r3, r3, #15
 8010388:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	085b      	lsrs	r3, r3, #1
 801038e:	b29b      	uxth	r3, r3
 8010390:	f003 0307 	and.w	r3, r3, #7
 8010394:	b29a      	uxth	r2, r3
 8010396:	8afb      	ldrh	r3, [r7, #22]
 8010398:	4313      	orrs	r3, r2
 801039a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	8afa      	ldrh	r2, [r7, #22]
 80103a2:	60da      	str	r2, [r3, #12]
 80103a4:	e052      	b.n	801044c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80103a6:	2301      	movs	r3, #1
 80103a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80103ac:	e04e      	b.n	801044c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80103b2:	2b08      	cmp	r3, #8
 80103b4:	d827      	bhi.n	8010406 <UART_SetConfig+0x506>
 80103b6:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <UART_SetConfig+0x4bc>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	080103e1 	.word	0x080103e1
 80103c0:	080103e9 	.word	0x080103e9
 80103c4:	080103f1 	.word	0x080103f1
 80103c8:	08010407 	.word	0x08010407
 80103cc:	080103f7 	.word	0x080103f7
 80103d0:	08010407 	.word	0x08010407
 80103d4:	08010407 	.word	0x08010407
 80103d8:	08010407 	.word	0x08010407
 80103dc:	080103ff 	.word	0x080103ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103e0:	f7fc fcb4 	bl	800cd4c <HAL_RCC_GetPCLK1Freq>
 80103e4:	61f8      	str	r0, [r7, #28]
        break;
 80103e6:	e014      	b.n	8010412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103e8:	f7fc fcc6 	bl	800cd78 <HAL_RCC_GetPCLK2Freq>
 80103ec:	61f8      	str	r0, [r7, #28]
        break;
 80103ee:	e010      	b.n	8010412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80103f0:	4b1e      	ldr	r3, [pc, #120]	; (801046c <UART_SetConfig+0x56c>)
 80103f2:	61fb      	str	r3, [r7, #28]
        break;
 80103f4:	e00d      	b.n	8010412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80103f6:	f7fc fc11 	bl	800cc1c <HAL_RCC_GetSysClockFreq>
 80103fa:	61f8      	str	r0, [r7, #28]
        break;
 80103fc:	e009      	b.n	8010412 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010402:	61fb      	str	r3, [r7, #28]
        break;
 8010404:	e005      	b.n	8010412 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8010406:	2300      	movs	r3, #0
 8010408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801040a:	2301      	movs	r3, #1
 801040c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8010410:	bf00      	nop
    }

    if (pclk != 0U)
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d019      	beq.n	801044c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	085a      	lsrs	r2, r3, #1
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	441a      	add	r2, r3
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	fbb2 f3f3 	udiv	r3, r2, r3
 801042a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	2b0f      	cmp	r3, #15
 8010430:	d909      	bls.n	8010446 <UART_SetConfig+0x546>
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010438:	d205      	bcs.n	8010446 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	b29a      	uxth	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	60da      	str	r2, [r3, #12]
 8010444:	e002      	b.n	801044c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8010446:	2301      	movs	r3, #1
 8010448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010458:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 801045c:	4618      	mov	r0, r3
 801045e:	3728      	adds	r7, #40	; 0x28
 8010460:	46bd      	mov	sp, r7
 8010462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010466:	bf00      	nop
 8010468:	40008000 	.word	0x40008000
 801046c:	00f42400 	.word	0x00f42400

08010470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801047c:	f003 0308 	and.w	r3, r3, #8
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00a      	beq.n	801049a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	430a      	orrs	r2, r1
 8010498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049e:	f003 0301 	and.w	r3, r3, #1
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00a      	beq.n	80104bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	430a      	orrs	r2, r1
 80104ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c0:	f003 0302 	and.w	r3, r3, #2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00a      	beq.n	80104de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	430a      	orrs	r2, r1
 80104dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e2:	f003 0304 	and.w	r3, r3, #4
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00a      	beq.n	8010500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	430a      	orrs	r2, r1
 80104fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010504:	f003 0310 	and.w	r3, r3, #16
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	430a      	orrs	r2, r1
 8010520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010526:	f003 0320 	and.w	r3, r3, #32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00a      	beq.n	8010544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	430a      	orrs	r2, r1
 8010542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801054c:	2b00      	cmp	r3, #0
 801054e:	d01a      	beq.n	8010586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801056a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801056e:	d10a      	bne.n	8010586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	430a      	orrs	r2, r1
 8010584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00a      	beq.n	80105a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	430a      	orrs	r2, r1
 80105a6:	605a      	str	r2, [r3, #4]
  }
}
 80105a8:	bf00      	nop
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b098      	sub	sp, #96	; 0x60
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80105c4:	f7f7 ff9e 	bl	8008504 <HAL_GetTick>
 80105c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f003 0308 	and.w	r3, r3, #8
 80105d4:	2b08      	cmp	r3, #8
 80105d6:	d12e      	bne.n	8010636 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e0:	2200      	movs	r2, #0
 80105e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f88c 	bl	8010704 <UART_WaitOnFlagUntilTimeout>
 80105ec:	4603      	mov	r3, r0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d021      	beq.n	8010636 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010606:	653b      	str	r3, [r7, #80]	; 0x50
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	461a      	mov	r2, r3
 801060e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010610:	647b      	str	r3, [r7, #68]	; 0x44
 8010612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801061e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e6      	bne.n	80105f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2220      	movs	r2, #32
 8010628:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e062      	b.n	80106fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	2b04      	cmp	r3, #4
 8010642:	d149      	bne.n	80106d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801064c:	2200      	movs	r2, #0
 801064e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 f856 	bl	8010704 <UART_WaitOnFlagUntilTimeout>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d03c      	beq.n	80106d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	e853 3f00 	ldrex	r3, [r3]
 801066a:	623b      	str	r3, [r7, #32]
   return(result);
 801066c:	6a3b      	ldr	r3, [r7, #32]
 801066e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	461a      	mov	r2, r3
 801067a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067c:	633b      	str	r3, [r7, #48]	; 0x30
 801067e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010684:	e841 2300 	strex	r3, r2, [r1]
 8010688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1e6      	bne.n	801065e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	3308      	adds	r3, #8
 8010696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	e853 3f00 	ldrex	r3, [r3]
 801069e:	60fb      	str	r3, [r7, #12]
   return(result);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f023 0301 	bic.w	r3, r3, #1
 80106a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	3308      	adds	r3, #8
 80106ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106b0:	61fa      	str	r2, [r7, #28]
 80106b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b4:	69b9      	ldr	r1, [r7, #24]
 80106b6:	69fa      	ldr	r2, [r7, #28]
 80106b8:	e841 2300 	strex	r3, r2, [r1]
 80106bc:	617b      	str	r3, [r7, #20]
   return(result);
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1e5      	bne.n	8010690 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2220      	movs	r2, #32
 80106c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106d4:	2303      	movs	r3, #3
 80106d6:	e011      	b.n	80106fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2220      	movs	r2, #32
 80106dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2220      	movs	r2, #32
 80106e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3758      	adds	r7, #88	; 0x58
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	603b      	str	r3, [r7, #0]
 8010710:	4613      	mov	r3, r2
 8010712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010714:	e049      	b.n	80107aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071c:	d045      	beq.n	80107aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801071e:	f7f7 fef1 	bl	8008504 <HAL_GetTick>
 8010722:	4602      	mov	r2, r0
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	69ba      	ldr	r2, [r7, #24]
 801072a:	429a      	cmp	r2, r3
 801072c:	d302      	bcc.n	8010734 <UART_WaitOnFlagUntilTimeout+0x30>
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010734:	2303      	movs	r3, #3
 8010736:	e048      	b.n	80107ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f003 0304 	and.w	r3, r3, #4
 8010742:	2b00      	cmp	r3, #0
 8010744:	d031      	beq.n	80107aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	f003 0308 	and.w	r3, r3, #8
 8010750:	2b08      	cmp	r3, #8
 8010752:	d110      	bne.n	8010776 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2208      	movs	r2, #8
 801075a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f000 f8ff 	bl	8010960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2208      	movs	r2, #8
 8010766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8010772:	2301      	movs	r3, #1
 8010774:	e029      	b.n	80107ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010784:	d111      	bne.n	80107aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801078e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f000 f8e5 	bl	8010960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2220      	movs	r2, #32
 801079a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80107a6:	2303      	movs	r3, #3
 80107a8:	e00f      	b.n	80107ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	69da      	ldr	r2, [r3, #28]
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	4013      	ands	r3, r2
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	bf0c      	ite	eq
 80107ba:	2301      	moveq	r3, #1
 80107bc:	2300      	movne	r3, #0
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	461a      	mov	r2, r3
 80107c2:	79fb      	ldrb	r3, [r7, #7]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d0a6      	beq.n	8010716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
	...

080107d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b096      	sub	sp, #88	; 0x58
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	4613      	mov	r3, r2
 80107e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	88fa      	ldrh	r2, [r7, #6]
 80107ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2222      	movs	r2, #34	; 0x22
 80107fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010804:	2b00      	cmp	r3, #0
 8010806:	d028      	beq.n	801085a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801080c:	4a3e      	ldr	r2, [pc, #248]	; (8010908 <UART_Start_Receive_DMA+0x134>)
 801080e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010814:	4a3d      	ldr	r2, [pc, #244]	; (801090c <UART_Start_Receive_DMA+0x138>)
 8010816:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801081c:	4a3c      	ldr	r2, [pc, #240]	; (8010910 <UART_Start_Receive_DMA+0x13c>)
 801081e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010824:	2200      	movs	r2, #0
 8010826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	3324      	adds	r3, #36	; 0x24
 8010832:	4619      	mov	r1, r3
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010838:	461a      	mov	r2, r3
 801083a:	88fb      	ldrh	r3, [r7, #6]
 801083c:	f7f9 fdc6 	bl	800a3cc <HAL_DMA_Start_IT>
 8010840:	4603      	mov	r3, r0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d009      	beq.n	801085a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2210      	movs	r2, #16
 801084a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2220      	movs	r2, #32
 8010852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	e051      	b.n	80108fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	691b      	ldr	r3, [r3, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d018      	beq.n	8010894 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801086a:	e853 3f00 	ldrex	r3, [r3]
 801086e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010876:	657b      	str	r3, [r7, #84]	; 0x54
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	461a      	mov	r2, r3
 801087e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010880:	64bb      	str	r3, [r7, #72]	; 0x48
 8010882:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010884:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010888:	e841 2300 	strex	r3, r2, [r1]
 801088c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801088e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1e6      	bne.n	8010862 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	3308      	adds	r3, #8
 801089a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	e853 3f00 	ldrex	r3, [r3]
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a6:	f043 0301 	orr.w	r3, r3, #1
 80108aa:	653b      	str	r3, [r7, #80]	; 0x50
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	3308      	adds	r3, #8
 80108b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108b4:	637a      	str	r2, [r7, #52]	; 0x34
 80108b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108bc:	e841 2300 	strex	r3, r2, [r1]
 80108c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1e5      	bne.n	8010894 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3308      	adds	r3, #8
 80108ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	e853 3f00 	ldrex	r3, [r3]
 80108d6:	613b      	str	r3, [r7, #16]
   return(result);
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	3308      	adds	r3, #8
 80108e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108e8:	623a      	str	r2, [r7, #32]
 80108ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	69f9      	ldr	r1, [r7, #28]
 80108ee:	6a3a      	ldr	r2, [r7, #32]
 80108f0:	e841 2300 	strex	r3, r2, [r1]
 80108f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1e5      	bne.n	80108c8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3758      	adds	r7, #88	; 0x58
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	08010a29 	.word	0x08010a29
 801090c:	08010b55 	.word	0x08010b55
 8010910:	08010b93 	.word	0x08010b93

08010914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010914:	b480      	push	{r7}
 8010916:	b089      	sub	sp, #36	; 0x24
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	e853 3f00 	ldrex	r3, [r3]
 8010928:	60bb      	str	r3, [r7, #8]
   return(result);
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010930:	61fb      	str	r3, [r7, #28]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	61bb      	str	r3, [r7, #24]
 801093c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093e:	6979      	ldr	r1, [r7, #20]
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	e841 2300 	strex	r3, r2, [r1]
 8010946:	613b      	str	r3, [r7, #16]
   return(result);
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e6      	bne.n	801091c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2220      	movs	r2, #32
 8010952:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8010954:	bf00      	nop
 8010956:	3724      	adds	r7, #36	; 0x24
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010960:	b480      	push	{r7}
 8010962:	b095      	sub	sp, #84	; 0x54
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010970:	e853 3f00 	ldrex	r3, [r3]
 8010974:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801097c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010986:	643b      	str	r3, [r7, #64]	; 0x40
 8010988:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801098c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801098e:	e841 2300 	strex	r3, r2, [r1]
 8010992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1e6      	bne.n	8010968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3308      	adds	r3, #8
 80109a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	e853 3f00 	ldrex	r3, [r3]
 80109a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	f023 0301 	bic.w	r3, r3, #1
 80109b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3308      	adds	r3, #8
 80109b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109c2:	e841 2300 	strex	r3, r2, [r1]
 80109c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d1e5      	bne.n	801099a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d118      	bne.n	8010a08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	e853 3f00 	ldrex	r3, [r3]
 80109e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f023 0310 	bic.w	r3, r3, #16
 80109ea:	647b      	str	r3, [r7, #68]	; 0x44
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	461a      	mov	r2, r3
 80109f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f4:	61bb      	str	r3, [r7, #24]
 80109f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f8:	6979      	ldr	r1, [r7, #20]
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	e841 2300 	strex	r3, r2, [r1]
 8010a00:	613b      	str	r3, [r7, #16]
   return(result);
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1e6      	bne.n	80109d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2220      	movs	r2, #32
 8010a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8010a1c:	bf00      	nop
 8010a1e:	3754      	adds	r7, #84	; 0x54
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b09c      	sub	sp, #112	; 0x70
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a34:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f003 0320 	and.w	r3, r3, #32
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d171      	bne.n	8010b28 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a54:	e853 3f00 	ldrex	r3, [r3]
 8010a58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	461a      	mov	r2, r3
 8010a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a72:	e841 2300 	strex	r3, r2, [r1]
 8010a76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1e6      	bne.n	8010a4c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a88:	e853 3f00 	ldrex	r3, [r3]
 8010a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	f023 0301 	bic.w	r3, r3, #1
 8010a94:	667b      	str	r3, [r7, #100]	; 0x64
 8010a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a9e:	647a      	str	r2, [r7, #68]	; 0x44
 8010aa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010aa6:	e841 2300 	strex	r3, r2, [r1]
 8010aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1e5      	bne.n	8010a7e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	e853 3f00 	ldrex	r3, [r3]
 8010ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8010aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	3308      	adds	r3, #8
 8010ad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8010ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ada:	e841 2300 	strex	r3, r2, [r1]
 8010ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1e5      	bne.n	8010ab2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae8:	2220      	movs	r2, #32
 8010aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d118      	bne.n	8010b28 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	e853 3f00 	ldrex	r3, [r3]
 8010b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f023 0310 	bic.w	r3, r3, #16
 8010b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	461a      	mov	r2, r3
 8010b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b14:	61fb      	str	r3, [r7, #28]
 8010b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b18:	69b9      	ldr	r1, [r7, #24]
 8010b1a:	69fa      	ldr	r2, [r7, #28]
 8010b1c:	e841 2300 	strex	r3, r2, [r1]
 8010b20:	617b      	str	r3, [r7, #20]
   return(result);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1e6      	bne.n	8010af6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d107      	bne.n	8010b46 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b40:	f7f2 ff88 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b44:	e002      	b.n	8010b4c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010b46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b48:	f7ff f9bc 	bl	800fec4 <HAL_UART_RxCpltCallback>
}
 8010b4c:	bf00      	nop
 8010b4e:	3770      	adds	r7, #112	; 0x70
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b60:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2201      	movs	r2, #1
 8010b66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d109      	bne.n	8010b84 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010b76:	085b      	lsrs	r3, r3, #1
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f7f2 ff69 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b82:	e002      	b.n	8010b8a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f7ff f9a7 	bl	800fed8 <HAL_UART_RxHalfCpltCallback>
}
 8010b8a:	bf00      	nop
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b086      	sub	sp, #24
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ba4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bb8:	2b80      	cmp	r3, #128	; 0x80
 8010bba:	d109      	bne.n	8010bd0 <UART_DMAError+0x3e>
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	2b21      	cmp	r3, #33	; 0x21
 8010bc0:	d106      	bne.n	8010bd0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8010bca:	6978      	ldr	r0, [r7, #20]
 8010bcc:	f7ff fea2 	bl	8010914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bda:	2b40      	cmp	r3, #64	; 0x40
 8010bdc:	d109      	bne.n	8010bf2 <UART_DMAError+0x60>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2b22      	cmp	r3, #34	; 0x22
 8010be2:	d106      	bne.n	8010bf2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8010bec:	6978      	ldr	r0, [r7, #20]
 8010bee:	f7ff feb7 	bl	8010960 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bf8:	f043 0210 	orr.w	r2, r3, #16
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c02:	6978      	ldr	r0, [r7, #20]
 8010c04:	f7ff f972 	bl	800feec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c08:	bf00      	nop
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f7ff f95c 	bl	800feec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c34:	bf00      	nop
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b088      	sub	sp, #32
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	e853 3f00 	ldrex	r3, [r3]
 8010c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c58:	61fb      	str	r3, [r7, #28]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	61bb      	str	r3, [r7, #24]
 8010c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c66:	6979      	ldr	r1, [r7, #20]
 8010c68:	69ba      	ldr	r2, [r7, #24]
 8010c6a:	e841 2300 	strex	r3, r2, [r1]
 8010c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1e6      	bne.n	8010c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2220      	movs	r2, #32
 8010c7a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff f914 	bl	800feb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c88:	bf00      	nop
 8010c8a:	3720      	adds	r7, #32
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c98:	bf00      	nop
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08c      	sub	sp, #48	; 0x30
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	4613      	mov	r3, r2
 8010cb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cb8:	2b20      	cmp	r3, #32
 8010cba:	d142      	bne.n	8010d42 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d002      	beq.n	8010cc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010cc2:	88fb      	ldrh	r3, [r7, #6]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d101      	bne.n	8010ccc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	e03b      	b.n	8010d44 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010cd8:	88fb      	ldrh	r3, [r7, #6]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	68b9      	ldr	r1, [r7, #8]
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f7ff fd78 	bl	80107d4 <UART_Start_Receive_DMA>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d124      	bne.n	8010d3c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d11d      	bne.n	8010d36 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2210      	movs	r2, #16
 8010d00:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	e853 3f00 	ldrex	r3, [r3]
 8010d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	f043 0310 	orr.w	r3, r3, #16
 8010d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	627b      	str	r3, [r7, #36]	; 0x24
 8010d22:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d24:	6a39      	ldr	r1, [r7, #32]
 8010d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d28:	e841 2300 	strex	r3, r2, [r1]
 8010d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d2e:	69fb      	ldr	r3, [r7, #28]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e6      	bne.n	8010d02 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8010d34:	e002      	b.n	8010d3c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d40:	e000      	b.n	8010d44 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010d42:	2302      	movs	r3, #2
  }
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3730      	adds	r7, #48	; 0x30
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <atoi>:
 8010d4c:	220a      	movs	r2, #10
 8010d4e:	2100      	movs	r1, #0
 8010d50:	f000 b978 	b.w	8011044 <strtol>

08010d54 <malloc>:
 8010d54:	4b02      	ldr	r3, [pc, #8]	; (8010d60 <malloc+0xc>)
 8010d56:	4601      	mov	r1, r0
 8010d58:	6818      	ldr	r0, [r3, #0]
 8010d5a:	f000 b82b 	b.w	8010db4 <_malloc_r>
 8010d5e:	bf00      	nop
 8010d60:	2000007c 	.word	0x2000007c

08010d64 <free>:
 8010d64:	4b02      	ldr	r3, [pc, #8]	; (8010d70 <free+0xc>)
 8010d66:	4601      	mov	r1, r0
 8010d68:	6818      	ldr	r0, [r3, #0]
 8010d6a:	f002 ba43 	b.w	80131f4 <_free_r>
 8010d6e:	bf00      	nop
 8010d70:	2000007c 	.word	0x2000007c

08010d74 <sbrk_aligned>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	4e0e      	ldr	r6, [pc, #56]	; (8010db0 <sbrk_aligned+0x3c>)
 8010d78:	460c      	mov	r4, r1
 8010d7a:	6831      	ldr	r1, [r6, #0]
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	b911      	cbnz	r1, 8010d86 <sbrk_aligned+0x12>
 8010d80:	f001 fb36 	bl	80123f0 <_sbrk_r>
 8010d84:	6030      	str	r0, [r6, #0]
 8010d86:	4621      	mov	r1, r4
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f001 fb31 	bl	80123f0 <_sbrk_r>
 8010d8e:	1c43      	adds	r3, r0, #1
 8010d90:	d00a      	beq.n	8010da8 <sbrk_aligned+0x34>
 8010d92:	1cc4      	adds	r4, r0, #3
 8010d94:	f024 0403 	bic.w	r4, r4, #3
 8010d98:	42a0      	cmp	r0, r4
 8010d9a:	d007      	beq.n	8010dac <sbrk_aligned+0x38>
 8010d9c:	1a21      	subs	r1, r4, r0
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f001 fb26 	bl	80123f0 <_sbrk_r>
 8010da4:	3001      	adds	r0, #1
 8010da6:	d101      	bne.n	8010dac <sbrk_aligned+0x38>
 8010da8:	f04f 34ff 	mov.w	r4, #4294967295
 8010dac:	4620      	mov	r0, r4
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	20001f08 	.word	0x20001f08

08010db4 <_malloc_r>:
 8010db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db8:	1ccd      	adds	r5, r1, #3
 8010dba:	f025 0503 	bic.w	r5, r5, #3
 8010dbe:	3508      	adds	r5, #8
 8010dc0:	2d0c      	cmp	r5, #12
 8010dc2:	bf38      	it	cc
 8010dc4:	250c      	movcc	r5, #12
 8010dc6:	2d00      	cmp	r5, #0
 8010dc8:	4607      	mov	r7, r0
 8010dca:	db01      	blt.n	8010dd0 <_malloc_r+0x1c>
 8010dcc:	42a9      	cmp	r1, r5
 8010dce:	d905      	bls.n	8010ddc <_malloc_r+0x28>
 8010dd0:	230c      	movs	r3, #12
 8010dd2:	603b      	str	r3, [r7, #0]
 8010dd4:	2600      	movs	r6, #0
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ddc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010eb0 <_malloc_r+0xfc>
 8010de0:	f000 f868 	bl	8010eb4 <__malloc_lock>
 8010de4:	f8d8 3000 	ldr.w	r3, [r8]
 8010de8:	461c      	mov	r4, r3
 8010dea:	bb5c      	cbnz	r4, 8010e44 <_malloc_r+0x90>
 8010dec:	4629      	mov	r1, r5
 8010dee:	4638      	mov	r0, r7
 8010df0:	f7ff ffc0 	bl	8010d74 <sbrk_aligned>
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	4604      	mov	r4, r0
 8010df8:	d155      	bne.n	8010ea6 <_malloc_r+0xf2>
 8010dfa:	f8d8 4000 	ldr.w	r4, [r8]
 8010dfe:	4626      	mov	r6, r4
 8010e00:	2e00      	cmp	r6, #0
 8010e02:	d145      	bne.n	8010e90 <_malloc_r+0xdc>
 8010e04:	2c00      	cmp	r4, #0
 8010e06:	d048      	beq.n	8010e9a <_malloc_r+0xe6>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	4638      	mov	r0, r7
 8010e0e:	eb04 0903 	add.w	r9, r4, r3
 8010e12:	f001 faed 	bl	80123f0 <_sbrk_r>
 8010e16:	4581      	cmp	r9, r0
 8010e18:	d13f      	bne.n	8010e9a <_malloc_r+0xe6>
 8010e1a:	6821      	ldr	r1, [r4, #0]
 8010e1c:	1a6d      	subs	r5, r5, r1
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4638      	mov	r0, r7
 8010e22:	f7ff ffa7 	bl	8010d74 <sbrk_aligned>
 8010e26:	3001      	adds	r0, #1
 8010e28:	d037      	beq.n	8010e9a <_malloc_r+0xe6>
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	442b      	add	r3, r5
 8010e2e:	6023      	str	r3, [r4, #0]
 8010e30:	f8d8 3000 	ldr.w	r3, [r8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d038      	beq.n	8010eaa <_malloc_r+0xf6>
 8010e38:	685a      	ldr	r2, [r3, #4]
 8010e3a:	42a2      	cmp	r2, r4
 8010e3c:	d12b      	bne.n	8010e96 <_malloc_r+0xe2>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	605a      	str	r2, [r3, #4]
 8010e42:	e00f      	b.n	8010e64 <_malloc_r+0xb0>
 8010e44:	6822      	ldr	r2, [r4, #0]
 8010e46:	1b52      	subs	r2, r2, r5
 8010e48:	d41f      	bmi.n	8010e8a <_malloc_r+0xd6>
 8010e4a:	2a0b      	cmp	r2, #11
 8010e4c:	d917      	bls.n	8010e7e <_malloc_r+0xca>
 8010e4e:	1961      	adds	r1, r4, r5
 8010e50:	42a3      	cmp	r3, r4
 8010e52:	6025      	str	r5, [r4, #0]
 8010e54:	bf18      	it	ne
 8010e56:	6059      	strne	r1, [r3, #4]
 8010e58:	6863      	ldr	r3, [r4, #4]
 8010e5a:	bf08      	it	eq
 8010e5c:	f8c8 1000 	streq.w	r1, [r8]
 8010e60:	5162      	str	r2, [r4, r5]
 8010e62:	604b      	str	r3, [r1, #4]
 8010e64:	4638      	mov	r0, r7
 8010e66:	f104 060b 	add.w	r6, r4, #11
 8010e6a:	f000 f829 	bl	8010ec0 <__malloc_unlock>
 8010e6e:	f026 0607 	bic.w	r6, r6, #7
 8010e72:	1d23      	adds	r3, r4, #4
 8010e74:	1af2      	subs	r2, r6, r3
 8010e76:	d0ae      	beq.n	8010dd6 <_malloc_r+0x22>
 8010e78:	1b9b      	subs	r3, r3, r6
 8010e7a:	50a3      	str	r3, [r4, r2]
 8010e7c:	e7ab      	b.n	8010dd6 <_malloc_r+0x22>
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	6862      	ldr	r2, [r4, #4]
 8010e82:	d1dd      	bne.n	8010e40 <_malloc_r+0x8c>
 8010e84:	f8c8 2000 	str.w	r2, [r8]
 8010e88:	e7ec      	b.n	8010e64 <_malloc_r+0xb0>
 8010e8a:	4623      	mov	r3, r4
 8010e8c:	6864      	ldr	r4, [r4, #4]
 8010e8e:	e7ac      	b.n	8010dea <_malloc_r+0x36>
 8010e90:	4634      	mov	r4, r6
 8010e92:	6876      	ldr	r6, [r6, #4]
 8010e94:	e7b4      	b.n	8010e00 <_malloc_r+0x4c>
 8010e96:	4613      	mov	r3, r2
 8010e98:	e7cc      	b.n	8010e34 <_malloc_r+0x80>
 8010e9a:	230c      	movs	r3, #12
 8010e9c:	603b      	str	r3, [r7, #0]
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	f000 f80e 	bl	8010ec0 <__malloc_unlock>
 8010ea4:	e797      	b.n	8010dd6 <_malloc_r+0x22>
 8010ea6:	6025      	str	r5, [r4, #0]
 8010ea8:	e7dc      	b.n	8010e64 <_malloc_r+0xb0>
 8010eaa:	605b      	str	r3, [r3, #4]
 8010eac:	deff      	udf	#255	; 0xff
 8010eae:	bf00      	nop
 8010eb0:	20001f04 	.word	0x20001f04

08010eb4 <__malloc_lock>:
 8010eb4:	4801      	ldr	r0, [pc, #4]	; (8010ebc <__malloc_lock+0x8>)
 8010eb6:	f001 bae9 	b.w	801248c <__retarget_lock_acquire_recursive>
 8010eba:	bf00      	nop
 8010ebc:	20002071 	.word	0x20002071

08010ec0 <__malloc_unlock>:
 8010ec0:	4801      	ldr	r0, [pc, #4]	; (8010ec8 <__malloc_unlock+0x8>)
 8010ec2:	f001 bae5 	b.w	8012490 <__retarget_lock_release_recursive>
 8010ec6:	bf00      	nop
 8010ec8:	20002071 	.word	0x20002071

08010ecc <realloc>:
 8010ecc:	4b02      	ldr	r3, [pc, #8]	; (8010ed8 <realloc+0xc>)
 8010ece:	460a      	mov	r2, r1
 8010ed0:	4601      	mov	r1, r0
 8010ed2:	6818      	ldr	r0, [r3, #0]
 8010ed4:	f000 b802 	b.w	8010edc <_realloc_r>
 8010ed8:	2000007c 	.word	0x2000007c

08010edc <_realloc_r>:
 8010edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee0:	4680      	mov	r8, r0
 8010ee2:	4614      	mov	r4, r2
 8010ee4:	460e      	mov	r6, r1
 8010ee6:	b921      	cbnz	r1, 8010ef2 <_realloc_r+0x16>
 8010ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eec:	4611      	mov	r1, r2
 8010eee:	f7ff bf61 	b.w	8010db4 <_malloc_r>
 8010ef2:	b92a      	cbnz	r2, 8010f00 <_realloc_r+0x24>
 8010ef4:	f002 f97e 	bl	80131f4 <_free_r>
 8010ef8:	4625      	mov	r5, r4
 8010efa:	4628      	mov	r0, r5
 8010efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f00:	f002 fd84 	bl	8013a0c <_malloc_usable_size_r>
 8010f04:	4284      	cmp	r4, r0
 8010f06:	4607      	mov	r7, r0
 8010f08:	d802      	bhi.n	8010f10 <_realloc_r+0x34>
 8010f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f0e:	d812      	bhi.n	8010f36 <_realloc_r+0x5a>
 8010f10:	4621      	mov	r1, r4
 8010f12:	4640      	mov	r0, r8
 8010f14:	f7ff ff4e 	bl	8010db4 <_malloc_r>
 8010f18:	4605      	mov	r5, r0
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d0ed      	beq.n	8010efa <_realloc_r+0x1e>
 8010f1e:	42bc      	cmp	r4, r7
 8010f20:	4622      	mov	r2, r4
 8010f22:	4631      	mov	r1, r6
 8010f24:	bf28      	it	cs
 8010f26:	463a      	movcs	r2, r7
 8010f28:	f001 fabb 	bl	80124a2 <memcpy>
 8010f2c:	4631      	mov	r1, r6
 8010f2e:	4640      	mov	r0, r8
 8010f30:	f002 f960 	bl	80131f4 <_free_r>
 8010f34:	e7e1      	b.n	8010efa <_realloc_r+0x1e>
 8010f36:	4635      	mov	r5, r6
 8010f38:	e7df      	b.n	8010efa <_realloc_r+0x1e>
	...

08010f3c <_strtol_l.constprop.0>:
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f42:	d001      	beq.n	8010f48 <_strtol_l.constprop.0+0xc>
 8010f44:	2b24      	cmp	r3, #36	; 0x24
 8010f46:	d906      	bls.n	8010f56 <_strtol_l.constprop.0+0x1a>
 8010f48:	f001 fa74 	bl	8012434 <__errno>
 8010f4c:	2316      	movs	r3, #22
 8010f4e:	6003      	str	r3, [r0, #0]
 8010f50:	2000      	movs	r0, #0
 8010f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801103c <_strtol_l.constprop.0+0x100>
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	462e      	mov	r6, r5
 8010f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010f66:	f017 0708 	ands.w	r7, r7, #8
 8010f6a:	d1f7      	bne.n	8010f5c <_strtol_l.constprop.0+0x20>
 8010f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8010f6e:	d132      	bne.n	8010fd6 <_strtol_l.constprop.0+0x9a>
 8010f70:	782c      	ldrb	r4, [r5, #0]
 8010f72:	2701      	movs	r7, #1
 8010f74:	1cb5      	adds	r5, r6, #2
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d05b      	beq.n	8011032 <_strtol_l.constprop.0+0xf6>
 8010f7a:	2b10      	cmp	r3, #16
 8010f7c:	d109      	bne.n	8010f92 <_strtol_l.constprop.0+0x56>
 8010f7e:	2c30      	cmp	r4, #48	; 0x30
 8010f80:	d107      	bne.n	8010f92 <_strtol_l.constprop.0+0x56>
 8010f82:	782c      	ldrb	r4, [r5, #0]
 8010f84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010f88:	2c58      	cmp	r4, #88	; 0x58
 8010f8a:	d14d      	bne.n	8011028 <_strtol_l.constprop.0+0xec>
 8010f8c:	786c      	ldrb	r4, [r5, #1]
 8010f8e:	2310      	movs	r3, #16
 8010f90:	3502      	adds	r5, #2
 8010f92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8010f9a:	f04f 0e00 	mov.w	lr, #0
 8010f9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010fa2:	4676      	mov	r6, lr
 8010fa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8010fa8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010fac:	f1bc 0f09 	cmp.w	ip, #9
 8010fb0:	d816      	bhi.n	8010fe0 <_strtol_l.constprop.0+0xa4>
 8010fb2:	4664      	mov	r4, ip
 8010fb4:	42a3      	cmp	r3, r4
 8010fb6:	dd24      	ble.n	8011002 <_strtol_l.constprop.0+0xc6>
 8010fb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8010fbc:	d008      	beq.n	8010fd0 <_strtol_l.constprop.0+0x94>
 8010fbe:	45b1      	cmp	r9, r6
 8010fc0:	d31c      	bcc.n	8010ffc <_strtol_l.constprop.0+0xc0>
 8010fc2:	d101      	bne.n	8010fc8 <_strtol_l.constprop.0+0x8c>
 8010fc4:	45a2      	cmp	sl, r4
 8010fc6:	db19      	blt.n	8010ffc <_strtol_l.constprop.0+0xc0>
 8010fc8:	fb06 4603 	mla	r6, r6, r3, r4
 8010fcc:	f04f 0e01 	mov.w	lr, #1
 8010fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fd4:	e7e8      	b.n	8010fa8 <_strtol_l.constprop.0+0x6c>
 8010fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8010fd8:	bf04      	itt	eq
 8010fda:	782c      	ldrbeq	r4, [r5, #0]
 8010fdc:	1cb5      	addeq	r5, r6, #2
 8010fde:	e7ca      	b.n	8010f76 <_strtol_l.constprop.0+0x3a>
 8010fe0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010fe4:	f1bc 0f19 	cmp.w	ip, #25
 8010fe8:	d801      	bhi.n	8010fee <_strtol_l.constprop.0+0xb2>
 8010fea:	3c37      	subs	r4, #55	; 0x37
 8010fec:	e7e2      	b.n	8010fb4 <_strtol_l.constprop.0+0x78>
 8010fee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010ff2:	f1bc 0f19 	cmp.w	ip, #25
 8010ff6:	d804      	bhi.n	8011002 <_strtol_l.constprop.0+0xc6>
 8010ff8:	3c57      	subs	r4, #87	; 0x57
 8010ffa:	e7db      	b.n	8010fb4 <_strtol_l.constprop.0+0x78>
 8010ffc:	f04f 3eff 	mov.w	lr, #4294967295
 8011000:	e7e6      	b.n	8010fd0 <_strtol_l.constprop.0+0x94>
 8011002:	f1be 3fff 	cmp.w	lr, #4294967295
 8011006:	d105      	bne.n	8011014 <_strtol_l.constprop.0+0xd8>
 8011008:	2322      	movs	r3, #34	; 0x22
 801100a:	6003      	str	r3, [r0, #0]
 801100c:	4646      	mov	r6, r8
 801100e:	b942      	cbnz	r2, 8011022 <_strtol_l.constprop.0+0xe6>
 8011010:	4630      	mov	r0, r6
 8011012:	e79e      	b.n	8010f52 <_strtol_l.constprop.0+0x16>
 8011014:	b107      	cbz	r7, 8011018 <_strtol_l.constprop.0+0xdc>
 8011016:	4276      	negs	r6, r6
 8011018:	2a00      	cmp	r2, #0
 801101a:	d0f9      	beq.n	8011010 <_strtol_l.constprop.0+0xd4>
 801101c:	f1be 0f00 	cmp.w	lr, #0
 8011020:	d000      	beq.n	8011024 <_strtol_l.constprop.0+0xe8>
 8011022:	1e69      	subs	r1, r5, #1
 8011024:	6011      	str	r1, [r2, #0]
 8011026:	e7f3      	b.n	8011010 <_strtol_l.constprop.0+0xd4>
 8011028:	2430      	movs	r4, #48	; 0x30
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1b1      	bne.n	8010f92 <_strtol_l.constprop.0+0x56>
 801102e:	2308      	movs	r3, #8
 8011030:	e7af      	b.n	8010f92 <_strtol_l.constprop.0+0x56>
 8011032:	2c30      	cmp	r4, #48	; 0x30
 8011034:	d0a5      	beq.n	8010f82 <_strtol_l.constprop.0+0x46>
 8011036:	230a      	movs	r3, #10
 8011038:	e7ab      	b.n	8010f92 <_strtol_l.constprop.0+0x56>
 801103a:	bf00      	nop
 801103c:	0801520d 	.word	0x0801520d

08011040 <_strtol_r>:
 8011040:	f7ff bf7c 	b.w	8010f3c <_strtol_l.constprop.0>

08011044 <strtol>:
 8011044:	4613      	mov	r3, r2
 8011046:	460a      	mov	r2, r1
 8011048:	4601      	mov	r1, r0
 801104a:	4802      	ldr	r0, [pc, #8]	; (8011054 <strtol+0x10>)
 801104c:	6800      	ldr	r0, [r0, #0]
 801104e:	f7ff bf75 	b.w	8010f3c <_strtol_l.constprop.0>
 8011052:	bf00      	nop
 8011054:	2000007c 	.word	0x2000007c

08011058 <__cvt>:
 8011058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801105c:	ec55 4b10 	vmov	r4, r5, d0
 8011060:	2d00      	cmp	r5, #0
 8011062:	460e      	mov	r6, r1
 8011064:	4619      	mov	r1, r3
 8011066:	462b      	mov	r3, r5
 8011068:	bfbb      	ittet	lt
 801106a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801106e:	461d      	movlt	r5, r3
 8011070:	2300      	movge	r3, #0
 8011072:	232d      	movlt	r3, #45	; 0x2d
 8011074:	700b      	strb	r3, [r1, #0]
 8011076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011078:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801107c:	4691      	mov	r9, r2
 801107e:	f023 0820 	bic.w	r8, r3, #32
 8011082:	bfbc      	itt	lt
 8011084:	4622      	movlt	r2, r4
 8011086:	4614      	movlt	r4, r2
 8011088:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801108c:	d005      	beq.n	801109a <__cvt+0x42>
 801108e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011092:	d100      	bne.n	8011096 <__cvt+0x3e>
 8011094:	3601      	adds	r6, #1
 8011096:	2102      	movs	r1, #2
 8011098:	e000      	b.n	801109c <__cvt+0x44>
 801109a:	2103      	movs	r1, #3
 801109c:	ab03      	add	r3, sp, #12
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	ab02      	add	r3, sp, #8
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	ec45 4b10 	vmov	d0, r4, r5
 80110a8:	4653      	mov	r3, sl
 80110aa:	4632      	mov	r2, r6
 80110ac:	f001 fab0 	bl	8012610 <_dtoa_r>
 80110b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80110b4:	4607      	mov	r7, r0
 80110b6:	d102      	bne.n	80110be <__cvt+0x66>
 80110b8:	f019 0f01 	tst.w	r9, #1
 80110bc:	d022      	beq.n	8011104 <__cvt+0xac>
 80110be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80110c2:	eb07 0906 	add.w	r9, r7, r6
 80110c6:	d110      	bne.n	80110ea <__cvt+0x92>
 80110c8:	783b      	ldrb	r3, [r7, #0]
 80110ca:	2b30      	cmp	r3, #48	; 0x30
 80110cc:	d10a      	bne.n	80110e4 <__cvt+0x8c>
 80110ce:	2200      	movs	r2, #0
 80110d0:	2300      	movs	r3, #0
 80110d2:	4620      	mov	r0, r4
 80110d4:	4629      	mov	r1, r5
 80110d6:	f7ef fd07 	bl	8000ae8 <__aeabi_dcmpeq>
 80110da:	b918      	cbnz	r0, 80110e4 <__cvt+0x8c>
 80110dc:	f1c6 0601 	rsb	r6, r6, #1
 80110e0:	f8ca 6000 	str.w	r6, [sl]
 80110e4:	f8da 3000 	ldr.w	r3, [sl]
 80110e8:	4499      	add	r9, r3
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7ef fcf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80110f6:	b108      	cbz	r0, 80110fc <__cvt+0xa4>
 80110f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80110fc:	2230      	movs	r2, #48	; 0x30
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	454b      	cmp	r3, r9
 8011102:	d307      	bcc.n	8011114 <__cvt+0xbc>
 8011104:	9b03      	ldr	r3, [sp, #12]
 8011106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011108:	1bdb      	subs	r3, r3, r7
 801110a:	4638      	mov	r0, r7
 801110c:	6013      	str	r3, [r2, #0]
 801110e:	b004      	add	sp, #16
 8011110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011114:	1c59      	adds	r1, r3, #1
 8011116:	9103      	str	r1, [sp, #12]
 8011118:	701a      	strb	r2, [r3, #0]
 801111a:	e7f0      	b.n	80110fe <__cvt+0xa6>

0801111c <__exponent>:
 801111c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801111e:	4603      	mov	r3, r0
 8011120:	2900      	cmp	r1, #0
 8011122:	bfb8      	it	lt
 8011124:	4249      	neglt	r1, r1
 8011126:	f803 2b02 	strb.w	r2, [r3], #2
 801112a:	bfb4      	ite	lt
 801112c:	222d      	movlt	r2, #45	; 0x2d
 801112e:	222b      	movge	r2, #43	; 0x2b
 8011130:	2909      	cmp	r1, #9
 8011132:	7042      	strb	r2, [r0, #1]
 8011134:	dd2a      	ble.n	801118c <__exponent+0x70>
 8011136:	f10d 0207 	add.w	r2, sp, #7
 801113a:	4617      	mov	r7, r2
 801113c:	260a      	movs	r6, #10
 801113e:	4694      	mov	ip, r2
 8011140:	fb91 f5f6 	sdiv	r5, r1, r6
 8011144:	fb06 1415 	mls	r4, r6, r5, r1
 8011148:	3430      	adds	r4, #48	; 0x30
 801114a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801114e:	460c      	mov	r4, r1
 8011150:	2c63      	cmp	r4, #99	; 0x63
 8011152:	f102 32ff 	add.w	r2, r2, #4294967295
 8011156:	4629      	mov	r1, r5
 8011158:	dcf1      	bgt.n	801113e <__exponent+0x22>
 801115a:	3130      	adds	r1, #48	; 0x30
 801115c:	f1ac 0402 	sub.w	r4, ip, #2
 8011160:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011164:	1c41      	adds	r1, r0, #1
 8011166:	4622      	mov	r2, r4
 8011168:	42ba      	cmp	r2, r7
 801116a:	d30a      	bcc.n	8011182 <__exponent+0x66>
 801116c:	f10d 0209 	add.w	r2, sp, #9
 8011170:	eba2 020c 	sub.w	r2, r2, ip
 8011174:	42bc      	cmp	r4, r7
 8011176:	bf88      	it	hi
 8011178:	2200      	movhi	r2, #0
 801117a:	4413      	add	r3, r2
 801117c:	1a18      	subs	r0, r3, r0
 801117e:	b003      	add	sp, #12
 8011180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011182:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011186:	f801 5f01 	strb.w	r5, [r1, #1]!
 801118a:	e7ed      	b.n	8011168 <__exponent+0x4c>
 801118c:	2330      	movs	r3, #48	; 0x30
 801118e:	3130      	adds	r1, #48	; 0x30
 8011190:	7083      	strb	r3, [r0, #2]
 8011192:	70c1      	strb	r1, [r0, #3]
 8011194:	1d03      	adds	r3, r0, #4
 8011196:	e7f1      	b.n	801117c <__exponent+0x60>

08011198 <_printf_float>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	ed2d 8b02 	vpush	{d8}
 80111a0:	b08d      	sub	sp, #52	; 0x34
 80111a2:	460c      	mov	r4, r1
 80111a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80111a8:	4616      	mov	r6, r2
 80111aa:	461f      	mov	r7, r3
 80111ac:	4605      	mov	r5, r0
 80111ae:	f001 f8e7 	bl	8012380 <_localeconv_r>
 80111b2:	f8d0 a000 	ldr.w	sl, [r0]
 80111b6:	4650      	mov	r0, sl
 80111b8:	f7ef f86a 	bl	8000290 <strlen>
 80111bc:	2300      	movs	r3, #0
 80111be:	930a      	str	r3, [sp, #40]	; 0x28
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	9305      	str	r3, [sp, #20]
 80111c4:	f8d8 3000 	ldr.w	r3, [r8]
 80111c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80111cc:	3307      	adds	r3, #7
 80111ce:	f023 0307 	bic.w	r3, r3, #7
 80111d2:	f103 0208 	add.w	r2, r3, #8
 80111d6:	f8c8 2000 	str.w	r2, [r8]
 80111da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80111de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111e2:	9307      	str	r3, [sp, #28]
 80111e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80111e8:	ee08 0a10 	vmov	s16, r0
 80111ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80111f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111f4:	4b9e      	ldr	r3, [pc, #632]	; (8011470 <_printf_float+0x2d8>)
 80111f6:	f04f 32ff 	mov.w	r2, #4294967295
 80111fa:	f7ef fca7 	bl	8000b4c <__aeabi_dcmpun>
 80111fe:	bb88      	cbnz	r0, 8011264 <_printf_float+0xcc>
 8011200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011204:	4b9a      	ldr	r3, [pc, #616]	; (8011470 <_printf_float+0x2d8>)
 8011206:	f04f 32ff 	mov.w	r2, #4294967295
 801120a:	f7ef fc81 	bl	8000b10 <__aeabi_dcmple>
 801120e:	bb48      	cbnz	r0, 8011264 <_printf_float+0xcc>
 8011210:	2200      	movs	r2, #0
 8011212:	2300      	movs	r3, #0
 8011214:	4640      	mov	r0, r8
 8011216:	4649      	mov	r1, r9
 8011218:	f7ef fc70 	bl	8000afc <__aeabi_dcmplt>
 801121c:	b110      	cbz	r0, 8011224 <_printf_float+0x8c>
 801121e:	232d      	movs	r3, #45	; 0x2d
 8011220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011224:	4a93      	ldr	r2, [pc, #588]	; (8011474 <_printf_float+0x2dc>)
 8011226:	4b94      	ldr	r3, [pc, #592]	; (8011478 <_printf_float+0x2e0>)
 8011228:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801122c:	bf94      	ite	ls
 801122e:	4690      	movls	r8, r2
 8011230:	4698      	movhi	r8, r3
 8011232:	2303      	movs	r3, #3
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	f023 0304 	bic.w	r3, r3, #4
 801123c:	6023      	str	r3, [r4, #0]
 801123e:	f04f 0900 	mov.w	r9, #0
 8011242:	9700      	str	r7, [sp, #0]
 8011244:	4633      	mov	r3, r6
 8011246:	aa0b      	add	r2, sp, #44	; 0x2c
 8011248:	4621      	mov	r1, r4
 801124a:	4628      	mov	r0, r5
 801124c:	f000 f9da 	bl	8011604 <_printf_common>
 8011250:	3001      	adds	r0, #1
 8011252:	f040 8090 	bne.w	8011376 <_printf_float+0x1de>
 8011256:	f04f 30ff 	mov.w	r0, #4294967295
 801125a:	b00d      	add	sp, #52	; 0x34
 801125c:	ecbd 8b02 	vpop	{d8}
 8011260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011264:	4642      	mov	r2, r8
 8011266:	464b      	mov	r3, r9
 8011268:	4640      	mov	r0, r8
 801126a:	4649      	mov	r1, r9
 801126c:	f7ef fc6e 	bl	8000b4c <__aeabi_dcmpun>
 8011270:	b140      	cbz	r0, 8011284 <_printf_float+0xec>
 8011272:	464b      	mov	r3, r9
 8011274:	2b00      	cmp	r3, #0
 8011276:	bfbc      	itt	lt
 8011278:	232d      	movlt	r3, #45	; 0x2d
 801127a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801127e:	4a7f      	ldr	r2, [pc, #508]	; (801147c <_printf_float+0x2e4>)
 8011280:	4b7f      	ldr	r3, [pc, #508]	; (8011480 <_printf_float+0x2e8>)
 8011282:	e7d1      	b.n	8011228 <_printf_float+0x90>
 8011284:	6863      	ldr	r3, [r4, #4]
 8011286:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801128a:	9206      	str	r2, [sp, #24]
 801128c:	1c5a      	adds	r2, r3, #1
 801128e:	d13f      	bne.n	8011310 <_printf_float+0x178>
 8011290:	2306      	movs	r3, #6
 8011292:	6063      	str	r3, [r4, #4]
 8011294:	9b05      	ldr	r3, [sp, #20]
 8011296:	6861      	ldr	r1, [r4, #4]
 8011298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801129c:	2300      	movs	r3, #0
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	ab0a      	add	r3, sp, #40	; 0x28
 80112a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80112a6:	ab09      	add	r3, sp, #36	; 0x24
 80112a8:	ec49 8b10 	vmov	d0, r8, r9
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	6022      	str	r2, [r4, #0]
 80112b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80112b4:	4628      	mov	r0, r5
 80112b6:	f7ff fecf 	bl	8011058 <__cvt>
 80112ba:	9b06      	ldr	r3, [sp, #24]
 80112bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112be:	2b47      	cmp	r3, #71	; 0x47
 80112c0:	4680      	mov	r8, r0
 80112c2:	d108      	bne.n	80112d6 <_printf_float+0x13e>
 80112c4:	1cc8      	adds	r0, r1, #3
 80112c6:	db02      	blt.n	80112ce <_printf_float+0x136>
 80112c8:	6863      	ldr	r3, [r4, #4]
 80112ca:	4299      	cmp	r1, r3
 80112cc:	dd41      	ble.n	8011352 <_printf_float+0x1ba>
 80112ce:	f1ab 0302 	sub.w	r3, fp, #2
 80112d2:	fa5f fb83 	uxtb.w	fp, r3
 80112d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80112da:	d820      	bhi.n	801131e <_printf_float+0x186>
 80112dc:	3901      	subs	r1, #1
 80112de:	465a      	mov	r2, fp
 80112e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80112e4:	9109      	str	r1, [sp, #36]	; 0x24
 80112e6:	f7ff ff19 	bl	801111c <__exponent>
 80112ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112ec:	1813      	adds	r3, r2, r0
 80112ee:	2a01      	cmp	r2, #1
 80112f0:	4681      	mov	r9, r0
 80112f2:	6123      	str	r3, [r4, #16]
 80112f4:	dc02      	bgt.n	80112fc <_printf_float+0x164>
 80112f6:	6822      	ldr	r2, [r4, #0]
 80112f8:	07d2      	lsls	r2, r2, #31
 80112fa:	d501      	bpl.n	8011300 <_printf_float+0x168>
 80112fc:	3301      	adds	r3, #1
 80112fe:	6123      	str	r3, [r4, #16]
 8011300:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011304:	2b00      	cmp	r3, #0
 8011306:	d09c      	beq.n	8011242 <_printf_float+0xaa>
 8011308:	232d      	movs	r3, #45	; 0x2d
 801130a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801130e:	e798      	b.n	8011242 <_printf_float+0xaa>
 8011310:	9a06      	ldr	r2, [sp, #24]
 8011312:	2a47      	cmp	r2, #71	; 0x47
 8011314:	d1be      	bne.n	8011294 <_printf_float+0xfc>
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1bc      	bne.n	8011294 <_printf_float+0xfc>
 801131a:	2301      	movs	r3, #1
 801131c:	e7b9      	b.n	8011292 <_printf_float+0xfa>
 801131e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011322:	d118      	bne.n	8011356 <_printf_float+0x1be>
 8011324:	2900      	cmp	r1, #0
 8011326:	6863      	ldr	r3, [r4, #4]
 8011328:	dd0b      	ble.n	8011342 <_printf_float+0x1aa>
 801132a:	6121      	str	r1, [r4, #16]
 801132c:	b913      	cbnz	r3, 8011334 <_printf_float+0x19c>
 801132e:	6822      	ldr	r2, [r4, #0]
 8011330:	07d0      	lsls	r0, r2, #31
 8011332:	d502      	bpl.n	801133a <_printf_float+0x1a2>
 8011334:	3301      	adds	r3, #1
 8011336:	440b      	add	r3, r1
 8011338:	6123      	str	r3, [r4, #16]
 801133a:	65a1      	str	r1, [r4, #88]	; 0x58
 801133c:	f04f 0900 	mov.w	r9, #0
 8011340:	e7de      	b.n	8011300 <_printf_float+0x168>
 8011342:	b913      	cbnz	r3, 801134a <_printf_float+0x1b2>
 8011344:	6822      	ldr	r2, [r4, #0]
 8011346:	07d2      	lsls	r2, r2, #31
 8011348:	d501      	bpl.n	801134e <_printf_float+0x1b6>
 801134a:	3302      	adds	r3, #2
 801134c:	e7f4      	b.n	8011338 <_printf_float+0x1a0>
 801134e:	2301      	movs	r3, #1
 8011350:	e7f2      	b.n	8011338 <_printf_float+0x1a0>
 8011352:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011358:	4299      	cmp	r1, r3
 801135a:	db05      	blt.n	8011368 <_printf_float+0x1d0>
 801135c:	6823      	ldr	r3, [r4, #0]
 801135e:	6121      	str	r1, [r4, #16]
 8011360:	07d8      	lsls	r0, r3, #31
 8011362:	d5ea      	bpl.n	801133a <_printf_float+0x1a2>
 8011364:	1c4b      	adds	r3, r1, #1
 8011366:	e7e7      	b.n	8011338 <_printf_float+0x1a0>
 8011368:	2900      	cmp	r1, #0
 801136a:	bfd4      	ite	le
 801136c:	f1c1 0202 	rsble	r2, r1, #2
 8011370:	2201      	movgt	r2, #1
 8011372:	4413      	add	r3, r2
 8011374:	e7e0      	b.n	8011338 <_printf_float+0x1a0>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	055a      	lsls	r2, r3, #21
 801137a:	d407      	bmi.n	801138c <_printf_float+0x1f4>
 801137c:	6923      	ldr	r3, [r4, #16]
 801137e:	4642      	mov	r2, r8
 8011380:	4631      	mov	r1, r6
 8011382:	4628      	mov	r0, r5
 8011384:	47b8      	blx	r7
 8011386:	3001      	adds	r0, #1
 8011388:	d12c      	bne.n	80113e4 <_printf_float+0x24c>
 801138a:	e764      	b.n	8011256 <_printf_float+0xbe>
 801138c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011390:	f240 80e0 	bls.w	8011554 <_printf_float+0x3bc>
 8011394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011398:	2200      	movs	r2, #0
 801139a:	2300      	movs	r3, #0
 801139c:	f7ef fba4 	bl	8000ae8 <__aeabi_dcmpeq>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d034      	beq.n	801140e <_printf_float+0x276>
 80113a4:	4a37      	ldr	r2, [pc, #220]	; (8011484 <_printf_float+0x2ec>)
 80113a6:	2301      	movs	r3, #1
 80113a8:	4631      	mov	r1, r6
 80113aa:	4628      	mov	r0, r5
 80113ac:	47b8      	blx	r7
 80113ae:	3001      	adds	r0, #1
 80113b0:	f43f af51 	beq.w	8011256 <_printf_float+0xbe>
 80113b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80113b8:	429a      	cmp	r2, r3
 80113ba:	db02      	blt.n	80113c2 <_printf_float+0x22a>
 80113bc:	6823      	ldr	r3, [r4, #0]
 80113be:	07d8      	lsls	r0, r3, #31
 80113c0:	d510      	bpl.n	80113e4 <_printf_float+0x24c>
 80113c2:	ee18 3a10 	vmov	r3, s16
 80113c6:	4652      	mov	r2, sl
 80113c8:	4631      	mov	r1, r6
 80113ca:	4628      	mov	r0, r5
 80113cc:	47b8      	blx	r7
 80113ce:	3001      	adds	r0, #1
 80113d0:	f43f af41 	beq.w	8011256 <_printf_float+0xbe>
 80113d4:	f04f 0800 	mov.w	r8, #0
 80113d8:	f104 091a 	add.w	r9, r4, #26
 80113dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113de:	3b01      	subs	r3, #1
 80113e0:	4543      	cmp	r3, r8
 80113e2:	dc09      	bgt.n	80113f8 <_printf_float+0x260>
 80113e4:	6823      	ldr	r3, [r4, #0]
 80113e6:	079b      	lsls	r3, r3, #30
 80113e8:	f100 8107 	bmi.w	80115fa <_printf_float+0x462>
 80113ec:	68e0      	ldr	r0, [r4, #12]
 80113ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113f0:	4298      	cmp	r0, r3
 80113f2:	bfb8      	it	lt
 80113f4:	4618      	movlt	r0, r3
 80113f6:	e730      	b.n	801125a <_printf_float+0xc2>
 80113f8:	2301      	movs	r3, #1
 80113fa:	464a      	mov	r2, r9
 80113fc:	4631      	mov	r1, r6
 80113fe:	4628      	mov	r0, r5
 8011400:	47b8      	blx	r7
 8011402:	3001      	adds	r0, #1
 8011404:	f43f af27 	beq.w	8011256 <_printf_float+0xbe>
 8011408:	f108 0801 	add.w	r8, r8, #1
 801140c:	e7e6      	b.n	80113dc <_printf_float+0x244>
 801140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011410:	2b00      	cmp	r3, #0
 8011412:	dc39      	bgt.n	8011488 <_printf_float+0x2f0>
 8011414:	4a1b      	ldr	r2, [pc, #108]	; (8011484 <_printf_float+0x2ec>)
 8011416:	2301      	movs	r3, #1
 8011418:	4631      	mov	r1, r6
 801141a:	4628      	mov	r0, r5
 801141c:	47b8      	blx	r7
 801141e:	3001      	adds	r0, #1
 8011420:	f43f af19 	beq.w	8011256 <_printf_float+0xbe>
 8011424:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011428:	4313      	orrs	r3, r2
 801142a:	d102      	bne.n	8011432 <_printf_float+0x29a>
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	07d9      	lsls	r1, r3, #31
 8011430:	d5d8      	bpl.n	80113e4 <_printf_float+0x24c>
 8011432:	ee18 3a10 	vmov	r3, s16
 8011436:	4652      	mov	r2, sl
 8011438:	4631      	mov	r1, r6
 801143a:	4628      	mov	r0, r5
 801143c:	47b8      	blx	r7
 801143e:	3001      	adds	r0, #1
 8011440:	f43f af09 	beq.w	8011256 <_printf_float+0xbe>
 8011444:	f04f 0900 	mov.w	r9, #0
 8011448:	f104 0a1a 	add.w	sl, r4, #26
 801144c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144e:	425b      	negs	r3, r3
 8011450:	454b      	cmp	r3, r9
 8011452:	dc01      	bgt.n	8011458 <_printf_float+0x2c0>
 8011454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011456:	e792      	b.n	801137e <_printf_float+0x1e6>
 8011458:	2301      	movs	r3, #1
 801145a:	4652      	mov	r2, sl
 801145c:	4631      	mov	r1, r6
 801145e:	4628      	mov	r0, r5
 8011460:	47b8      	blx	r7
 8011462:	3001      	adds	r0, #1
 8011464:	f43f aef7 	beq.w	8011256 <_printf_float+0xbe>
 8011468:	f109 0901 	add.w	r9, r9, #1
 801146c:	e7ee      	b.n	801144c <_printf_float+0x2b4>
 801146e:	bf00      	nop
 8011470:	7fefffff 	.word	0x7fefffff
 8011474:	0801530d 	.word	0x0801530d
 8011478:	08015311 	.word	0x08015311
 801147c:	08015315 	.word	0x08015315
 8011480:	08015319 	.word	0x08015319
 8011484:	0801569d 	.word	0x0801569d
 8011488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801148a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801148c:	429a      	cmp	r2, r3
 801148e:	bfa8      	it	ge
 8011490:	461a      	movge	r2, r3
 8011492:	2a00      	cmp	r2, #0
 8011494:	4691      	mov	r9, r2
 8011496:	dc37      	bgt.n	8011508 <_printf_float+0x370>
 8011498:	f04f 0b00 	mov.w	fp, #0
 801149c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114a0:	f104 021a 	add.w	r2, r4, #26
 80114a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114a6:	9305      	str	r3, [sp, #20]
 80114a8:	eba3 0309 	sub.w	r3, r3, r9
 80114ac:	455b      	cmp	r3, fp
 80114ae:	dc33      	bgt.n	8011518 <_printf_float+0x380>
 80114b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114b4:	429a      	cmp	r2, r3
 80114b6:	db3b      	blt.n	8011530 <_printf_float+0x398>
 80114b8:	6823      	ldr	r3, [r4, #0]
 80114ba:	07da      	lsls	r2, r3, #31
 80114bc:	d438      	bmi.n	8011530 <_printf_float+0x398>
 80114be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80114c2:	eba2 0903 	sub.w	r9, r2, r3
 80114c6:	9b05      	ldr	r3, [sp, #20]
 80114c8:	1ad2      	subs	r2, r2, r3
 80114ca:	4591      	cmp	r9, r2
 80114cc:	bfa8      	it	ge
 80114ce:	4691      	movge	r9, r2
 80114d0:	f1b9 0f00 	cmp.w	r9, #0
 80114d4:	dc35      	bgt.n	8011542 <_printf_float+0x3aa>
 80114d6:	f04f 0800 	mov.w	r8, #0
 80114da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114de:	f104 0a1a 	add.w	sl, r4, #26
 80114e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114e6:	1a9b      	subs	r3, r3, r2
 80114e8:	eba3 0309 	sub.w	r3, r3, r9
 80114ec:	4543      	cmp	r3, r8
 80114ee:	f77f af79 	ble.w	80113e4 <_printf_float+0x24c>
 80114f2:	2301      	movs	r3, #1
 80114f4:	4652      	mov	r2, sl
 80114f6:	4631      	mov	r1, r6
 80114f8:	4628      	mov	r0, r5
 80114fa:	47b8      	blx	r7
 80114fc:	3001      	adds	r0, #1
 80114fe:	f43f aeaa 	beq.w	8011256 <_printf_float+0xbe>
 8011502:	f108 0801 	add.w	r8, r8, #1
 8011506:	e7ec      	b.n	80114e2 <_printf_float+0x34a>
 8011508:	4613      	mov	r3, r2
 801150a:	4631      	mov	r1, r6
 801150c:	4642      	mov	r2, r8
 801150e:	4628      	mov	r0, r5
 8011510:	47b8      	blx	r7
 8011512:	3001      	adds	r0, #1
 8011514:	d1c0      	bne.n	8011498 <_printf_float+0x300>
 8011516:	e69e      	b.n	8011256 <_printf_float+0xbe>
 8011518:	2301      	movs	r3, #1
 801151a:	4631      	mov	r1, r6
 801151c:	4628      	mov	r0, r5
 801151e:	9205      	str	r2, [sp, #20]
 8011520:	47b8      	blx	r7
 8011522:	3001      	adds	r0, #1
 8011524:	f43f ae97 	beq.w	8011256 <_printf_float+0xbe>
 8011528:	9a05      	ldr	r2, [sp, #20]
 801152a:	f10b 0b01 	add.w	fp, fp, #1
 801152e:	e7b9      	b.n	80114a4 <_printf_float+0x30c>
 8011530:	ee18 3a10 	vmov	r3, s16
 8011534:	4652      	mov	r2, sl
 8011536:	4631      	mov	r1, r6
 8011538:	4628      	mov	r0, r5
 801153a:	47b8      	blx	r7
 801153c:	3001      	adds	r0, #1
 801153e:	d1be      	bne.n	80114be <_printf_float+0x326>
 8011540:	e689      	b.n	8011256 <_printf_float+0xbe>
 8011542:	9a05      	ldr	r2, [sp, #20]
 8011544:	464b      	mov	r3, r9
 8011546:	4442      	add	r2, r8
 8011548:	4631      	mov	r1, r6
 801154a:	4628      	mov	r0, r5
 801154c:	47b8      	blx	r7
 801154e:	3001      	adds	r0, #1
 8011550:	d1c1      	bne.n	80114d6 <_printf_float+0x33e>
 8011552:	e680      	b.n	8011256 <_printf_float+0xbe>
 8011554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011556:	2a01      	cmp	r2, #1
 8011558:	dc01      	bgt.n	801155e <_printf_float+0x3c6>
 801155a:	07db      	lsls	r3, r3, #31
 801155c:	d53a      	bpl.n	80115d4 <_printf_float+0x43c>
 801155e:	2301      	movs	r3, #1
 8011560:	4642      	mov	r2, r8
 8011562:	4631      	mov	r1, r6
 8011564:	4628      	mov	r0, r5
 8011566:	47b8      	blx	r7
 8011568:	3001      	adds	r0, #1
 801156a:	f43f ae74 	beq.w	8011256 <_printf_float+0xbe>
 801156e:	ee18 3a10 	vmov	r3, s16
 8011572:	4652      	mov	r2, sl
 8011574:	4631      	mov	r1, r6
 8011576:	4628      	mov	r0, r5
 8011578:	47b8      	blx	r7
 801157a:	3001      	adds	r0, #1
 801157c:	f43f ae6b 	beq.w	8011256 <_printf_float+0xbe>
 8011580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011584:	2200      	movs	r2, #0
 8011586:	2300      	movs	r3, #0
 8011588:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801158c:	f7ef faac 	bl	8000ae8 <__aeabi_dcmpeq>
 8011590:	b9d8      	cbnz	r0, 80115ca <_printf_float+0x432>
 8011592:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011596:	f108 0201 	add.w	r2, r8, #1
 801159a:	4631      	mov	r1, r6
 801159c:	4628      	mov	r0, r5
 801159e:	47b8      	blx	r7
 80115a0:	3001      	adds	r0, #1
 80115a2:	d10e      	bne.n	80115c2 <_printf_float+0x42a>
 80115a4:	e657      	b.n	8011256 <_printf_float+0xbe>
 80115a6:	2301      	movs	r3, #1
 80115a8:	4652      	mov	r2, sl
 80115aa:	4631      	mov	r1, r6
 80115ac:	4628      	mov	r0, r5
 80115ae:	47b8      	blx	r7
 80115b0:	3001      	adds	r0, #1
 80115b2:	f43f ae50 	beq.w	8011256 <_printf_float+0xbe>
 80115b6:	f108 0801 	add.w	r8, r8, #1
 80115ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115bc:	3b01      	subs	r3, #1
 80115be:	4543      	cmp	r3, r8
 80115c0:	dcf1      	bgt.n	80115a6 <_printf_float+0x40e>
 80115c2:	464b      	mov	r3, r9
 80115c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80115c8:	e6da      	b.n	8011380 <_printf_float+0x1e8>
 80115ca:	f04f 0800 	mov.w	r8, #0
 80115ce:	f104 0a1a 	add.w	sl, r4, #26
 80115d2:	e7f2      	b.n	80115ba <_printf_float+0x422>
 80115d4:	2301      	movs	r3, #1
 80115d6:	4642      	mov	r2, r8
 80115d8:	e7df      	b.n	801159a <_printf_float+0x402>
 80115da:	2301      	movs	r3, #1
 80115dc:	464a      	mov	r2, r9
 80115de:	4631      	mov	r1, r6
 80115e0:	4628      	mov	r0, r5
 80115e2:	47b8      	blx	r7
 80115e4:	3001      	adds	r0, #1
 80115e6:	f43f ae36 	beq.w	8011256 <_printf_float+0xbe>
 80115ea:	f108 0801 	add.w	r8, r8, #1
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115f2:	1a5b      	subs	r3, r3, r1
 80115f4:	4543      	cmp	r3, r8
 80115f6:	dcf0      	bgt.n	80115da <_printf_float+0x442>
 80115f8:	e6f8      	b.n	80113ec <_printf_float+0x254>
 80115fa:	f04f 0800 	mov.w	r8, #0
 80115fe:	f104 0919 	add.w	r9, r4, #25
 8011602:	e7f4      	b.n	80115ee <_printf_float+0x456>

08011604 <_printf_common>:
 8011604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011608:	4616      	mov	r6, r2
 801160a:	4699      	mov	r9, r3
 801160c:	688a      	ldr	r2, [r1, #8]
 801160e:	690b      	ldr	r3, [r1, #16]
 8011610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011614:	4293      	cmp	r3, r2
 8011616:	bfb8      	it	lt
 8011618:	4613      	movlt	r3, r2
 801161a:	6033      	str	r3, [r6, #0]
 801161c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011620:	4607      	mov	r7, r0
 8011622:	460c      	mov	r4, r1
 8011624:	b10a      	cbz	r2, 801162a <_printf_common+0x26>
 8011626:	3301      	adds	r3, #1
 8011628:	6033      	str	r3, [r6, #0]
 801162a:	6823      	ldr	r3, [r4, #0]
 801162c:	0699      	lsls	r1, r3, #26
 801162e:	bf42      	ittt	mi
 8011630:	6833      	ldrmi	r3, [r6, #0]
 8011632:	3302      	addmi	r3, #2
 8011634:	6033      	strmi	r3, [r6, #0]
 8011636:	6825      	ldr	r5, [r4, #0]
 8011638:	f015 0506 	ands.w	r5, r5, #6
 801163c:	d106      	bne.n	801164c <_printf_common+0x48>
 801163e:	f104 0a19 	add.w	sl, r4, #25
 8011642:	68e3      	ldr	r3, [r4, #12]
 8011644:	6832      	ldr	r2, [r6, #0]
 8011646:	1a9b      	subs	r3, r3, r2
 8011648:	42ab      	cmp	r3, r5
 801164a:	dc26      	bgt.n	801169a <_printf_common+0x96>
 801164c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011650:	1e13      	subs	r3, r2, #0
 8011652:	6822      	ldr	r2, [r4, #0]
 8011654:	bf18      	it	ne
 8011656:	2301      	movne	r3, #1
 8011658:	0692      	lsls	r2, r2, #26
 801165a:	d42b      	bmi.n	80116b4 <_printf_common+0xb0>
 801165c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011660:	4649      	mov	r1, r9
 8011662:	4638      	mov	r0, r7
 8011664:	47c0      	blx	r8
 8011666:	3001      	adds	r0, #1
 8011668:	d01e      	beq.n	80116a8 <_printf_common+0xa4>
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	6922      	ldr	r2, [r4, #16]
 801166e:	f003 0306 	and.w	r3, r3, #6
 8011672:	2b04      	cmp	r3, #4
 8011674:	bf02      	ittt	eq
 8011676:	68e5      	ldreq	r5, [r4, #12]
 8011678:	6833      	ldreq	r3, [r6, #0]
 801167a:	1aed      	subeq	r5, r5, r3
 801167c:	68a3      	ldr	r3, [r4, #8]
 801167e:	bf0c      	ite	eq
 8011680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011684:	2500      	movne	r5, #0
 8011686:	4293      	cmp	r3, r2
 8011688:	bfc4      	itt	gt
 801168a:	1a9b      	subgt	r3, r3, r2
 801168c:	18ed      	addgt	r5, r5, r3
 801168e:	2600      	movs	r6, #0
 8011690:	341a      	adds	r4, #26
 8011692:	42b5      	cmp	r5, r6
 8011694:	d11a      	bne.n	80116cc <_printf_common+0xc8>
 8011696:	2000      	movs	r0, #0
 8011698:	e008      	b.n	80116ac <_printf_common+0xa8>
 801169a:	2301      	movs	r3, #1
 801169c:	4652      	mov	r2, sl
 801169e:	4649      	mov	r1, r9
 80116a0:	4638      	mov	r0, r7
 80116a2:	47c0      	blx	r8
 80116a4:	3001      	adds	r0, #1
 80116a6:	d103      	bne.n	80116b0 <_printf_common+0xac>
 80116a8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b0:	3501      	adds	r5, #1
 80116b2:	e7c6      	b.n	8011642 <_printf_common+0x3e>
 80116b4:	18e1      	adds	r1, r4, r3
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	2030      	movs	r0, #48	; 0x30
 80116ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80116be:	4422      	add	r2, r4
 80116c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80116c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80116c8:	3302      	adds	r3, #2
 80116ca:	e7c7      	b.n	801165c <_printf_common+0x58>
 80116cc:	2301      	movs	r3, #1
 80116ce:	4622      	mov	r2, r4
 80116d0:	4649      	mov	r1, r9
 80116d2:	4638      	mov	r0, r7
 80116d4:	47c0      	blx	r8
 80116d6:	3001      	adds	r0, #1
 80116d8:	d0e6      	beq.n	80116a8 <_printf_common+0xa4>
 80116da:	3601      	adds	r6, #1
 80116dc:	e7d9      	b.n	8011692 <_printf_common+0x8e>
	...

080116e0 <_printf_i>:
 80116e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116e4:	7e0f      	ldrb	r7, [r1, #24]
 80116e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80116e8:	2f78      	cmp	r7, #120	; 0x78
 80116ea:	4691      	mov	r9, r2
 80116ec:	4680      	mov	r8, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	469a      	mov	sl, r3
 80116f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80116f6:	d807      	bhi.n	8011708 <_printf_i+0x28>
 80116f8:	2f62      	cmp	r7, #98	; 0x62
 80116fa:	d80a      	bhi.n	8011712 <_printf_i+0x32>
 80116fc:	2f00      	cmp	r7, #0
 80116fe:	f000 80d4 	beq.w	80118aa <_printf_i+0x1ca>
 8011702:	2f58      	cmp	r7, #88	; 0x58
 8011704:	f000 80c0 	beq.w	8011888 <_printf_i+0x1a8>
 8011708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801170c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011710:	e03a      	b.n	8011788 <_printf_i+0xa8>
 8011712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011716:	2b15      	cmp	r3, #21
 8011718:	d8f6      	bhi.n	8011708 <_printf_i+0x28>
 801171a:	a101      	add	r1, pc, #4	; (adr r1, 8011720 <_printf_i+0x40>)
 801171c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011720:	08011779 	.word	0x08011779
 8011724:	0801178d 	.word	0x0801178d
 8011728:	08011709 	.word	0x08011709
 801172c:	08011709 	.word	0x08011709
 8011730:	08011709 	.word	0x08011709
 8011734:	08011709 	.word	0x08011709
 8011738:	0801178d 	.word	0x0801178d
 801173c:	08011709 	.word	0x08011709
 8011740:	08011709 	.word	0x08011709
 8011744:	08011709 	.word	0x08011709
 8011748:	08011709 	.word	0x08011709
 801174c:	08011891 	.word	0x08011891
 8011750:	080117b9 	.word	0x080117b9
 8011754:	0801184b 	.word	0x0801184b
 8011758:	08011709 	.word	0x08011709
 801175c:	08011709 	.word	0x08011709
 8011760:	080118b3 	.word	0x080118b3
 8011764:	08011709 	.word	0x08011709
 8011768:	080117b9 	.word	0x080117b9
 801176c:	08011709 	.word	0x08011709
 8011770:	08011709 	.word	0x08011709
 8011774:	08011853 	.word	0x08011853
 8011778:	682b      	ldr	r3, [r5, #0]
 801177a:	1d1a      	adds	r2, r3, #4
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	602a      	str	r2, [r5, #0]
 8011780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011788:	2301      	movs	r3, #1
 801178a:	e09f      	b.n	80118cc <_printf_i+0x1ec>
 801178c:	6820      	ldr	r0, [r4, #0]
 801178e:	682b      	ldr	r3, [r5, #0]
 8011790:	0607      	lsls	r7, r0, #24
 8011792:	f103 0104 	add.w	r1, r3, #4
 8011796:	6029      	str	r1, [r5, #0]
 8011798:	d501      	bpl.n	801179e <_printf_i+0xbe>
 801179a:	681e      	ldr	r6, [r3, #0]
 801179c:	e003      	b.n	80117a6 <_printf_i+0xc6>
 801179e:	0646      	lsls	r6, r0, #25
 80117a0:	d5fb      	bpl.n	801179a <_printf_i+0xba>
 80117a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80117a6:	2e00      	cmp	r6, #0
 80117a8:	da03      	bge.n	80117b2 <_printf_i+0xd2>
 80117aa:	232d      	movs	r3, #45	; 0x2d
 80117ac:	4276      	negs	r6, r6
 80117ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117b2:	485a      	ldr	r0, [pc, #360]	; (801191c <_printf_i+0x23c>)
 80117b4:	230a      	movs	r3, #10
 80117b6:	e012      	b.n	80117de <_printf_i+0xfe>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	6820      	ldr	r0, [r4, #0]
 80117bc:	1d19      	adds	r1, r3, #4
 80117be:	6029      	str	r1, [r5, #0]
 80117c0:	0605      	lsls	r5, r0, #24
 80117c2:	d501      	bpl.n	80117c8 <_printf_i+0xe8>
 80117c4:	681e      	ldr	r6, [r3, #0]
 80117c6:	e002      	b.n	80117ce <_printf_i+0xee>
 80117c8:	0641      	lsls	r1, r0, #25
 80117ca:	d5fb      	bpl.n	80117c4 <_printf_i+0xe4>
 80117cc:	881e      	ldrh	r6, [r3, #0]
 80117ce:	4853      	ldr	r0, [pc, #332]	; (801191c <_printf_i+0x23c>)
 80117d0:	2f6f      	cmp	r7, #111	; 0x6f
 80117d2:	bf0c      	ite	eq
 80117d4:	2308      	moveq	r3, #8
 80117d6:	230a      	movne	r3, #10
 80117d8:	2100      	movs	r1, #0
 80117da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80117de:	6865      	ldr	r5, [r4, #4]
 80117e0:	60a5      	str	r5, [r4, #8]
 80117e2:	2d00      	cmp	r5, #0
 80117e4:	bfa2      	ittt	ge
 80117e6:	6821      	ldrge	r1, [r4, #0]
 80117e8:	f021 0104 	bicge.w	r1, r1, #4
 80117ec:	6021      	strge	r1, [r4, #0]
 80117ee:	b90e      	cbnz	r6, 80117f4 <_printf_i+0x114>
 80117f0:	2d00      	cmp	r5, #0
 80117f2:	d04b      	beq.n	801188c <_printf_i+0x1ac>
 80117f4:	4615      	mov	r5, r2
 80117f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80117fa:	fb03 6711 	mls	r7, r3, r1, r6
 80117fe:	5dc7      	ldrb	r7, [r0, r7]
 8011800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011804:	4637      	mov	r7, r6
 8011806:	42bb      	cmp	r3, r7
 8011808:	460e      	mov	r6, r1
 801180a:	d9f4      	bls.n	80117f6 <_printf_i+0x116>
 801180c:	2b08      	cmp	r3, #8
 801180e:	d10b      	bne.n	8011828 <_printf_i+0x148>
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	07de      	lsls	r6, r3, #31
 8011814:	d508      	bpl.n	8011828 <_printf_i+0x148>
 8011816:	6923      	ldr	r3, [r4, #16]
 8011818:	6861      	ldr	r1, [r4, #4]
 801181a:	4299      	cmp	r1, r3
 801181c:	bfde      	ittt	le
 801181e:	2330      	movle	r3, #48	; 0x30
 8011820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011828:	1b52      	subs	r2, r2, r5
 801182a:	6122      	str	r2, [r4, #16]
 801182c:	f8cd a000 	str.w	sl, [sp]
 8011830:	464b      	mov	r3, r9
 8011832:	aa03      	add	r2, sp, #12
 8011834:	4621      	mov	r1, r4
 8011836:	4640      	mov	r0, r8
 8011838:	f7ff fee4 	bl	8011604 <_printf_common>
 801183c:	3001      	adds	r0, #1
 801183e:	d14a      	bne.n	80118d6 <_printf_i+0x1f6>
 8011840:	f04f 30ff 	mov.w	r0, #4294967295
 8011844:	b004      	add	sp, #16
 8011846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801184a:	6823      	ldr	r3, [r4, #0]
 801184c:	f043 0320 	orr.w	r3, r3, #32
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	4833      	ldr	r0, [pc, #204]	; (8011920 <_printf_i+0x240>)
 8011854:	2778      	movs	r7, #120	; 0x78
 8011856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	6829      	ldr	r1, [r5, #0]
 801185e:	061f      	lsls	r7, r3, #24
 8011860:	f851 6b04 	ldr.w	r6, [r1], #4
 8011864:	d402      	bmi.n	801186c <_printf_i+0x18c>
 8011866:	065f      	lsls	r7, r3, #25
 8011868:	bf48      	it	mi
 801186a:	b2b6      	uxthmi	r6, r6
 801186c:	07df      	lsls	r7, r3, #31
 801186e:	bf48      	it	mi
 8011870:	f043 0320 	orrmi.w	r3, r3, #32
 8011874:	6029      	str	r1, [r5, #0]
 8011876:	bf48      	it	mi
 8011878:	6023      	strmi	r3, [r4, #0]
 801187a:	b91e      	cbnz	r6, 8011884 <_printf_i+0x1a4>
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	f023 0320 	bic.w	r3, r3, #32
 8011882:	6023      	str	r3, [r4, #0]
 8011884:	2310      	movs	r3, #16
 8011886:	e7a7      	b.n	80117d8 <_printf_i+0xf8>
 8011888:	4824      	ldr	r0, [pc, #144]	; (801191c <_printf_i+0x23c>)
 801188a:	e7e4      	b.n	8011856 <_printf_i+0x176>
 801188c:	4615      	mov	r5, r2
 801188e:	e7bd      	b.n	801180c <_printf_i+0x12c>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	6826      	ldr	r6, [r4, #0]
 8011894:	6961      	ldr	r1, [r4, #20]
 8011896:	1d18      	adds	r0, r3, #4
 8011898:	6028      	str	r0, [r5, #0]
 801189a:	0635      	lsls	r5, r6, #24
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	d501      	bpl.n	80118a4 <_printf_i+0x1c4>
 80118a0:	6019      	str	r1, [r3, #0]
 80118a2:	e002      	b.n	80118aa <_printf_i+0x1ca>
 80118a4:	0670      	lsls	r0, r6, #25
 80118a6:	d5fb      	bpl.n	80118a0 <_printf_i+0x1c0>
 80118a8:	8019      	strh	r1, [r3, #0]
 80118aa:	2300      	movs	r3, #0
 80118ac:	6123      	str	r3, [r4, #16]
 80118ae:	4615      	mov	r5, r2
 80118b0:	e7bc      	b.n	801182c <_printf_i+0x14c>
 80118b2:	682b      	ldr	r3, [r5, #0]
 80118b4:	1d1a      	adds	r2, r3, #4
 80118b6:	602a      	str	r2, [r5, #0]
 80118b8:	681d      	ldr	r5, [r3, #0]
 80118ba:	6862      	ldr	r2, [r4, #4]
 80118bc:	2100      	movs	r1, #0
 80118be:	4628      	mov	r0, r5
 80118c0:	f7ee fc96 	bl	80001f0 <memchr>
 80118c4:	b108      	cbz	r0, 80118ca <_printf_i+0x1ea>
 80118c6:	1b40      	subs	r0, r0, r5
 80118c8:	6060      	str	r0, [r4, #4]
 80118ca:	6863      	ldr	r3, [r4, #4]
 80118cc:	6123      	str	r3, [r4, #16]
 80118ce:	2300      	movs	r3, #0
 80118d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118d4:	e7aa      	b.n	801182c <_printf_i+0x14c>
 80118d6:	6923      	ldr	r3, [r4, #16]
 80118d8:	462a      	mov	r2, r5
 80118da:	4649      	mov	r1, r9
 80118dc:	4640      	mov	r0, r8
 80118de:	47d0      	blx	sl
 80118e0:	3001      	adds	r0, #1
 80118e2:	d0ad      	beq.n	8011840 <_printf_i+0x160>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	079b      	lsls	r3, r3, #30
 80118e8:	d413      	bmi.n	8011912 <_printf_i+0x232>
 80118ea:	68e0      	ldr	r0, [r4, #12]
 80118ec:	9b03      	ldr	r3, [sp, #12]
 80118ee:	4298      	cmp	r0, r3
 80118f0:	bfb8      	it	lt
 80118f2:	4618      	movlt	r0, r3
 80118f4:	e7a6      	b.n	8011844 <_printf_i+0x164>
 80118f6:	2301      	movs	r3, #1
 80118f8:	4632      	mov	r2, r6
 80118fa:	4649      	mov	r1, r9
 80118fc:	4640      	mov	r0, r8
 80118fe:	47d0      	blx	sl
 8011900:	3001      	adds	r0, #1
 8011902:	d09d      	beq.n	8011840 <_printf_i+0x160>
 8011904:	3501      	adds	r5, #1
 8011906:	68e3      	ldr	r3, [r4, #12]
 8011908:	9903      	ldr	r1, [sp, #12]
 801190a:	1a5b      	subs	r3, r3, r1
 801190c:	42ab      	cmp	r3, r5
 801190e:	dcf2      	bgt.n	80118f6 <_printf_i+0x216>
 8011910:	e7eb      	b.n	80118ea <_printf_i+0x20a>
 8011912:	2500      	movs	r5, #0
 8011914:	f104 0619 	add.w	r6, r4, #25
 8011918:	e7f5      	b.n	8011906 <_printf_i+0x226>
 801191a:	bf00      	nop
 801191c:	0801531d 	.word	0x0801531d
 8011920:	0801532e 	.word	0x0801532e

08011924 <std>:
 8011924:	2300      	movs	r3, #0
 8011926:	b510      	push	{r4, lr}
 8011928:	4604      	mov	r4, r0
 801192a:	e9c0 3300 	strd	r3, r3, [r0]
 801192e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011932:	6083      	str	r3, [r0, #8]
 8011934:	8181      	strh	r1, [r0, #12]
 8011936:	6643      	str	r3, [r0, #100]	; 0x64
 8011938:	81c2      	strh	r2, [r0, #14]
 801193a:	6183      	str	r3, [r0, #24]
 801193c:	4619      	mov	r1, r3
 801193e:	2208      	movs	r2, #8
 8011940:	305c      	adds	r0, #92	; 0x5c
 8011942:	f000 f916 	bl	8011b72 <memset>
 8011946:	4b0d      	ldr	r3, [pc, #52]	; (801197c <std+0x58>)
 8011948:	6263      	str	r3, [r4, #36]	; 0x24
 801194a:	4b0d      	ldr	r3, [pc, #52]	; (8011980 <std+0x5c>)
 801194c:	62a3      	str	r3, [r4, #40]	; 0x28
 801194e:	4b0d      	ldr	r3, [pc, #52]	; (8011984 <std+0x60>)
 8011950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011952:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <std+0x64>)
 8011954:	6323      	str	r3, [r4, #48]	; 0x30
 8011956:	4b0d      	ldr	r3, [pc, #52]	; (801198c <std+0x68>)
 8011958:	6224      	str	r4, [r4, #32]
 801195a:	429c      	cmp	r4, r3
 801195c:	d006      	beq.n	801196c <std+0x48>
 801195e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011962:	4294      	cmp	r4, r2
 8011964:	d002      	beq.n	801196c <std+0x48>
 8011966:	33d0      	adds	r3, #208	; 0xd0
 8011968:	429c      	cmp	r4, r3
 801196a:	d105      	bne.n	8011978 <std+0x54>
 801196c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011974:	f000 bd88 	b.w	8012488 <__retarget_lock_init_recursive>
 8011978:	bd10      	pop	{r4, pc}
 801197a:	bf00      	nop
 801197c:	08011ae9 	.word	0x08011ae9
 8011980:	08011b0f 	.word	0x08011b0f
 8011984:	08011b47 	.word	0x08011b47
 8011988:	08011b6b 	.word	0x08011b6b
 801198c:	20001f0c 	.word	0x20001f0c

08011990 <stdio_exit_handler>:
 8011990:	4a02      	ldr	r2, [pc, #8]	; (801199c <stdio_exit_handler+0xc>)
 8011992:	4903      	ldr	r1, [pc, #12]	; (80119a0 <stdio_exit_handler+0x10>)
 8011994:	4803      	ldr	r0, [pc, #12]	; (80119a4 <stdio_exit_handler+0x14>)
 8011996:	f000 b869 	b.w	8011a6c <_fwalk_sglue>
 801199a:	bf00      	nop
 801199c:	2000001c 	.word	0x2000001c
 80119a0:	08013ed5 	.word	0x08013ed5
 80119a4:	20000030 	.word	0x20000030

080119a8 <cleanup_stdio>:
 80119a8:	6841      	ldr	r1, [r0, #4]
 80119aa:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <cleanup_stdio+0x34>)
 80119ac:	4299      	cmp	r1, r3
 80119ae:	b510      	push	{r4, lr}
 80119b0:	4604      	mov	r4, r0
 80119b2:	d001      	beq.n	80119b8 <cleanup_stdio+0x10>
 80119b4:	f002 fa8e 	bl	8013ed4 <_fflush_r>
 80119b8:	68a1      	ldr	r1, [r4, #8]
 80119ba:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <cleanup_stdio+0x38>)
 80119bc:	4299      	cmp	r1, r3
 80119be:	d002      	beq.n	80119c6 <cleanup_stdio+0x1e>
 80119c0:	4620      	mov	r0, r4
 80119c2:	f002 fa87 	bl	8013ed4 <_fflush_r>
 80119c6:	68e1      	ldr	r1, [r4, #12]
 80119c8:	4b06      	ldr	r3, [pc, #24]	; (80119e4 <cleanup_stdio+0x3c>)
 80119ca:	4299      	cmp	r1, r3
 80119cc:	d004      	beq.n	80119d8 <cleanup_stdio+0x30>
 80119ce:	4620      	mov	r0, r4
 80119d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d4:	f002 ba7e 	b.w	8013ed4 <_fflush_r>
 80119d8:	bd10      	pop	{r4, pc}
 80119da:	bf00      	nop
 80119dc:	20001f0c 	.word	0x20001f0c
 80119e0:	20001f74 	.word	0x20001f74
 80119e4:	20001fdc 	.word	0x20001fdc

080119e8 <global_stdio_init.part.0>:
 80119e8:	b510      	push	{r4, lr}
 80119ea:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <global_stdio_init.part.0+0x30>)
 80119ec:	4c0b      	ldr	r4, [pc, #44]	; (8011a1c <global_stdio_init.part.0+0x34>)
 80119ee:	4a0c      	ldr	r2, [pc, #48]	; (8011a20 <global_stdio_init.part.0+0x38>)
 80119f0:	601a      	str	r2, [r3, #0]
 80119f2:	4620      	mov	r0, r4
 80119f4:	2200      	movs	r2, #0
 80119f6:	2104      	movs	r1, #4
 80119f8:	f7ff ff94 	bl	8011924 <std>
 80119fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a00:	2201      	movs	r2, #1
 8011a02:	2109      	movs	r1, #9
 8011a04:	f7ff ff8e 	bl	8011924 <std>
 8011a08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a12:	2112      	movs	r1, #18
 8011a14:	f7ff bf86 	b.w	8011924 <std>
 8011a18:	20002044 	.word	0x20002044
 8011a1c:	20001f0c 	.word	0x20001f0c
 8011a20:	08011991 	.word	0x08011991

08011a24 <__sfp_lock_acquire>:
 8011a24:	4801      	ldr	r0, [pc, #4]	; (8011a2c <__sfp_lock_acquire+0x8>)
 8011a26:	f000 bd31 	b.w	801248c <__retarget_lock_acquire_recursive>
 8011a2a:	bf00      	nop
 8011a2c:	20002072 	.word	0x20002072

08011a30 <__sfp_lock_release>:
 8011a30:	4801      	ldr	r0, [pc, #4]	; (8011a38 <__sfp_lock_release+0x8>)
 8011a32:	f000 bd2d 	b.w	8012490 <__retarget_lock_release_recursive>
 8011a36:	bf00      	nop
 8011a38:	20002072 	.word	0x20002072

08011a3c <__sinit>:
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	4604      	mov	r4, r0
 8011a40:	f7ff fff0 	bl	8011a24 <__sfp_lock_acquire>
 8011a44:	6a23      	ldr	r3, [r4, #32]
 8011a46:	b11b      	cbz	r3, 8011a50 <__sinit+0x14>
 8011a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a4c:	f7ff bff0 	b.w	8011a30 <__sfp_lock_release>
 8011a50:	4b04      	ldr	r3, [pc, #16]	; (8011a64 <__sinit+0x28>)
 8011a52:	6223      	str	r3, [r4, #32]
 8011a54:	4b04      	ldr	r3, [pc, #16]	; (8011a68 <__sinit+0x2c>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1f5      	bne.n	8011a48 <__sinit+0xc>
 8011a5c:	f7ff ffc4 	bl	80119e8 <global_stdio_init.part.0>
 8011a60:	e7f2      	b.n	8011a48 <__sinit+0xc>
 8011a62:	bf00      	nop
 8011a64:	080119a9 	.word	0x080119a9
 8011a68:	20002044 	.word	0x20002044

08011a6c <_fwalk_sglue>:
 8011a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a70:	4607      	mov	r7, r0
 8011a72:	4688      	mov	r8, r1
 8011a74:	4614      	mov	r4, r2
 8011a76:	2600      	movs	r6, #0
 8011a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8011a80:	d505      	bpl.n	8011a8e <_fwalk_sglue+0x22>
 8011a82:	6824      	ldr	r4, [r4, #0]
 8011a84:	2c00      	cmp	r4, #0
 8011a86:	d1f7      	bne.n	8011a78 <_fwalk_sglue+0xc>
 8011a88:	4630      	mov	r0, r6
 8011a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a8e:	89ab      	ldrh	r3, [r5, #12]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d907      	bls.n	8011aa4 <_fwalk_sglue+0x38>
 8011a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	d003      	beq.n	8011aa4 <_fwalk_sglue+0x38>
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	47c0      	blx	r8
 8011aa2:	4306      	orrs	r6, r0
 8011aa4:	3568      	adds	r5, #104	; 0x68
 8011aa6:	e7e9      	b.n	8011a7c <_fwalk_sglue+0x10>

08011aa8 <siprintf>:
 8011aa8:	b40e      	push	{r1, r2, r3}
 8011aaa:	b500      	push	{lr}
 8011aac:	b09c      	sub	sp, #112	; 0x70
 8011aae:	ab1d      	add	r3, sp, #116	; 0x74
 8011ab0:	9002      	str	r0, [sp, #8]
 8011ab2:	9006      	str	r0, [sp, #24]
 8011ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ab8:	4809      	ldr	r0, [pc, #36]	; (8011ae0 <siprintf+0x38>)
 8011aba:	9107      	str	r1, [sp, #28]
 8011abc:	9104      	str	r1, [sp, #16]
 8011abe:	4909      	ldr	r1, [pc, #36]	; (8011ae4 <siprintf+0x3c>)
 8011ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ac4:	9105      	str	r1, [sp, #20]
 8011ac6:	6800      	ldr	r0, [r0, #0]
 8011ac8:	9301      	str	r3, [sp, #4]
 8011aca:	a902      	add	r1, sp, #8
 8011acc:	f002 f87e 	bl	8013bcc <_svfiprintf_r>
 8011ad0:	9b02      	ldr	r3, [sp, #8]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	701a      	strb	r2, [r3, #0]
 8011ad6:	b01c      	add	sp, #112	; 0x70
 8011ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011adc:	b003      	add	sp, #12
 8011ade:	4770      	bx	lr
 8011ae0:	2000007c 	.word	0x2000007c
 8011ae4:	ffff0208 	.word	0xffff0208

08011ae8 <__sread>:
 8011ae8:	b510      	push	{r4, lr}
 8011aea:	460c      	mov	r4, r1
 8011aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af0:	f000 fc6c 	bl	80123cc <_read_r>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	bfab      	itete	ge
 8011af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011afa:	89a3      	ldrhlt	r3, [r4, #12]
 8011afc:	181b      	addge	r3, r3, r0
 8011afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b02:	bfac      	ite	ge
 8011b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b06:	81a3      	strhlt	r3, [r4, #12]
 8011b08:	bd10      	pop	{r4, pc}

08011b0a <__seofread>:
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	4770      	bx	lr

08011b0e <__swrite>:
 8011b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b12:	461f      	mov	r7, r3
 8011b14:	898b      	ldrh	r3, [r1, #12]
 8011b16:	05db      	lsls	r3, r3, #23
 8011b18:	4605      	mov	r5, r0
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	4616      	mov	r6, r2
 8011b1e:	d505      	bpl.n	8011b2c <__swrite+0x1e>
 8011b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b24:	2302      	movs	r3, #2
 8011b26:	2200      	movs	r2, #0
 8011b28:	f000 fc3e 	bl	80123a8 <_lseek_r>
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	4632      	mov	r2, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b42:	f000 bc65 	b.w	8012410 <_write_r>

08011b46 <__sseek>:
 8011b46:	b510      	push	{r4, lr}
 8011b48:	460c      	mov	r4, r1
 8011b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b4e:	f000 fc2b 	bl	80123a8 <_lseek_r>
 8011b52:	1c43      	adds	r3, r0, #1
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	bf15      	itete	ne
 8011b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b62:	81a3      	strheq	r3, [r4, #12]
 8011b64:	bf18      	it	ne
 8011b66:	81a3      	strhne	r3, [r4, #12]
 8011b68:	bd10      	pop	{r4, pc}

08011b6a <__sclose>:
 8011b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b6e:	f000 bc0b 	b.w	8012388 <_close_r>

08011b72 <memset>:
 8011b72:	4402      	add	r2, r0
 8011b74:	4603      	mov	r3, r0
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d100      	bne.n	8011b7c <memset+0xa>
 8011b7a:	4770      	bx	lr
 8011b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8011b80:	e7f9      	b.n	8011b76 <memset+0x4>

08011b82 <strncmp>:
 8011b82:	b510      	push	{r4, lr}
 8011b84:	b16a      	cbz	r2, 8011ba2 <strncmp+0x20>
 8011b86:	3901      	subs	r1, #1
 8011b88:	1884      	adds	r4, r0, r2
 8011b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d103      	bne.n	8011b9e <strncmp+0x1c>
 8011b96:	42a0      	cmp	r0, r4
 8011b98:	d001      	beq.n	8011b9e <strncmp+0x1c>
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	d1f5      	bne.n	8011b8a <strncmp+0x8>
 8011b9e:	1ad0      	subs	r0, r2, r3
 8011ba0:	bd10      	pop	{r4, pc}
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	e7fc      	b.n	8011ba0 <strncmp+0x1e>
	...

08011ba8 <localtime>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	4b0b      	ldr	r3, [pc, #44]	; (8011bd8 <localtime+0x30>)
 8011bac:	681d      	ldr	r5, [r3, #0]
 8011bae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	b953      	cbnz	r3, 8011bca <localtime+0x22>
 8011bb4:	2024      	movs	r0, #36	; 0x24
 8011bb6:	f7ff f8cd 	bl	8010d54 <malloc>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	6368      	str	r0, [r5, #52]	; 0x34
 8011bbe:	b920      	cbnz	r0, 8011bca <localtime+0x22>
 8011bc0:	4b06      	ldr	r3, [pc, #24]	; (8011bdc <localtime+0x34>)
 8011bc2:	4807      	ldr	r0, [pc, #28]	; (8011be0 <localtime+0x38>)
 8011bc4:	2132      	movs	r1, #50	; 0x32
 8011bc6:	f000 fc7b 	bl	80124c0 <__assert_func>
 8011bca:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011bcc:	4620      	mov	r0, r4
 8011bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bd2:	f000 b807 	b.w	8011be4 <localtime_r>
 8011bd6:	bf00      	nop
 8011bd8:	2000007c 	.word	0x2000007c
 8011bdc:	0801533f 	.word	0x0801533f
 8011be0:	08015356 	.word	0x08015356

08011be4 <localtime_r>:
 8011be4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011be8:	4680      	mov	r8, r0
 8011bea:	9101      	str	r1, [sp, #4]
 8011bec:	f002 f9f2 	bl	8013fd4 <__gettzinfo>
 8011bf0:	9901      	ldr	r1, [sp, #4]
 8011bf2:	4605      	mov	r5, r0
 8011bf4:	4640      	mov	r0, r8
 8011bf6:	f002 f9f1 	bl	8013fdc <gmtime_r>
 8011bfa:	6943      	ldr	r3, [r0, #20]
 8011bfc:	0799      	lsls	r1, r3, #30
 8011bfe:	4604      	mov	r4, r0
 8011c00:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8011c04:	d105      	bne.n	8011c12 <localtime_r+0x2e>
 8011c06:	2264      	movs	r2, #100	; 0x64
 8011c08:	fb97 f3f2 	sdiv	r3, r7, r2
 8011c0c:	fb02 7313 	mls	r3, r2, r3, r7
 8011c10:	bb7b      	cbnz	r3, 8011c72 <localtime_r+0x8e>
 8011c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c16:	fb97 f3f2 	sdiv	r3, r7, r2
 8011c1a:	fb02 7313 	mls	r3, r2, r3, r7
 8011c1e:	fab3 f383 	clz	r3, r3
 8011c22:	095b      	lsrs	r3, r3, #5
 8011c24:	4e68      	ldr	r6, [pc, #416]	; (8011dc8 <localtime_r+0x1e4>)
 8011c26:	2230      	movs	r2, #48	; 0x30
 8011c28:	fb02 6603 	mla	r6, r2, r3, r6
 8011c2c:	f000 f976 	bl	8011f1c <__tz_lock>
 8011c30:	f000 f980 	bl	8011f34 <_tzset_unlocked>
 8011c34:	4b65      	ldr	r3, [pc, #404]	; (8011dcc <localtime_r+0x1e8>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	b353      	cbz	r3, 8011c90 <localtime_r+0xac>
 8011c3a:	686b      	ldr	r3, [r5, #4]
 8011c3c:	42bb      	cmp	r3, r7
 8011c3e:	d11a      	bne.n	8011c76 <localtime_r+0x92>
 8011c40:	682f      	ldr	r7, [r5, #0]
 8011c42:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011c46:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8011c4a:	b9e7      	cbnz	r7, 8011c86 <localtime_r+0xa2>
 8011c4c:	4282      	cmp	r2, r0
 8011c4e:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c52:	da25      	bge.n	8011ca0 <localtime_r+0xbc>
 8011c54:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8011c58:	4282      	cmp	r2, r0
 8011c5a:	eb73 0701 	sbcs.w	r7, r3, r1
 8011c5e:	bfb4      	ite	lt
 8011c60:	2701      	movlt	r7, #1
 8011c62:	2700      	movge	r7, #0
 8011c64:	4282      	cmp	r2, r0
 8011c66:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c6a:	6227      	str	r7, [r4, #32]
 8011c6c:	db1a      	blt.n	8011ca4 <localtime_r+0xc0>
 8011c6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8011c70:	e019      	b.n	8011ca6 <localtime_r+0xc2>
 8011c72:	2301      	movs	r3, #1
 8011c74:	e7d6      	b.n	8011c24 <localtime_r+0x40>
 8011c76:	4638      	mov	r0, r7
 8011c78:	f000 f8aa 	bl	8011dd0 <__tzcalc_limits>
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d1df      	bne.n	8011c40 <localtime_r+0x5c>
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	e004      	b.n	8011c90 <localtime_r+0xac>
 8011c86:	4282      	cmp	r2, r0
 8011c88:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c8c:	da02      	bge.n	8011c94 <localtime_r+0xb0>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	6223      	str	r3, [r4, #32]
 8011c92:	e7ec      	b.n	8011c6e <localtime_r+0x8a>
 8011c94:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8011c98:	4282      	cmp	r2, r0
 8011c9a:	eb73 0101 	sbcs.w	r1, r3, r1
 8011c9e:	daf6      	bge.n	8011c8e <localtime_r+0xaa>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	6223      	str	r3, [r4, #32]
 8011ca4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8011ca6:	6861      	ldr	r1, [r4, #4]
 8011ca8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8011cac:	fb93 f0f2 	sdiv	r0, r3, r2
 8011cb0:	fb02 3310 	mls	r3, r2, r0, r3
 8011cb4:	223c      	movs	r2, #60	; 0x3c
 8011cb6:	fb93 f5f2 	sdiv	r5, r3, r2
 8011cba:	fb02 3215 	mls	r2, r2, r5, r3
 8011cbe:	6823      	ldr	r3, [r4, #0]
 8011cc0:	1a9b      	subs	r3, r3, r2
 8011cc2:	68a2      	ldr	r2, [r4, #8]
 8011cc4:	6023      	str	r3, [r4, #0]
 8011cc6:	1b49      	subs	r1, r1, r5
 8011cc8:	1a12      	subs	r2, r2, r0
 8011cca:	2b3b      	cmp	r3, #59	; 0x3b
 8011ccc:	6061      	str	r1, [r4, #4]
 8011cce:	60a2      	str	r2, [r4, #8]
 8011cd0:	dd35      	ble.n	8011d3e <localtime_r+0x15a>
 8011cd2:	3101      	adds	r1, #1
 8011cd4:	6061      	str	r1, [r4, #4]
 8011cd6:	3b3c      	subs	r3, #60	; 0x3c
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	6863      	ldr	r3, [r4, #4]
 8011cdc:	2b3b      	cmp	r3, #59	; 0x3b
 8011cde:	dd34      	ble.n	8011d4a <localtime_r+0x166>
 8011ce0:	3201      	adds	r2, #1
 8011ce2:	60a2      	str	r2, [r4, #8]
 8011ce4:	3b3c      	subs	r3, #60	; 0x3c
 8011ce6:	6063      	str	r3, [r4, #4]
 8011ce8:	68a3      	ldr	r3, [r4, #8]
 8011cea:	2b17      	cmp	r3, #23
 8011cec:	dd33      	ble.n	8011d56 <localtime_r+0x172>
 8011cee:	69e2      	ldr	r2, [r4, #28]
 8011cf0:	3201      	adds	r2, #1
 8011cf2:	61e2      	str	r2, [r4, #28]
 8011cf4:	69a2      	ldr	r2, [r4, #24]
 8011cf6:	3201      	adds	r2, #1
 8011cf8:	2a07      	cmp	r2, #7
 8011cfa:	bfa8      	it	ge
 8011cfc:	2200      	movge	r2, #0
 8011cfe:	61a2      	str	r2, [r4, #24]
 8011d00:	68e2      	ldr	r2, [r4, #12]
 8011d02:	3b18      	subs	r3, #24
 8011d04:	3201      	adds	r2, #1
 8011d06:	60a3      	str	r3, [r4, #8]
 8011d08:	6923      	ldr	r3, [r4, #16]
 8011d0a:	60e2      	str	r2, [r4, #12]
 8011d0c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011d10:	428a      	cmp	r2, r1
 8011d12:	dd0e      	ble.n	8011d32 <localtime_r+0x14e>
 8011d14:	2b0b      	cmp	r3, #11
 8011d16:	eba2 0201 	sub.w	r2, r2, r1
 8011d1a:	60e2      	str	r2, [r4, #12]
 8011d1c:	f103 0201 	add.w	r2, r3, #1
 8011d20:	bf09      	itett	eq
 8011d22:	6963      	ldreq	r3, [r4, #20]
 8011d24:	6122      	strne	r2, [r4, #16]
 8011d26:	2200      	moveq	r2, #0
 8011d28:	3301      	addeq	r3, #1
 8011d2a:	bf02      	ittt	eq
 8011d2c:	6122      	streq	r2, [r4, #16]
 8011d2e:	6163      	streq	r3, [r4, #20]
 8011d30:	61e2      	streq	r2, [r4, #28]
 8011d32:	f000 f8f9 	bl	8011f28 <__tz_unlock>
 8011d36:	4620      	mov	r0, r4
 8011d38:	b002      	add	sp, #8
 8011d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	dacb      	bge.n	8011cda <localtime_r+0xf6>
 8011d42:	3901      	subs	r1, #1
 8011d44:	6061      	str	r1, [r4, #4]
 8011d46:	333c      	adds	r3, #60	; 0x3c
 8011d48:	e7c6      	b.n	8011cd8 <localtime_r+0xf4>
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	dacc      	bge.n	8011ce8 <localtime_r+0x104>
 8011d4e:	3a01      	subs	r2, #1
 8011d50:	60a2      	str	r2, [r4, #8]
 8011d52:	333c      	adds	r3, #60	; 0x3c
 8011d54:	e7c7      	b.n	8011ce6 <localtime_r+0x102>
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	daeb      	bge.n	8011d32 <localtime_r+0x14e>
 8011d5a:	69e2      	ldr	r2, [r4, #28]
 8011d5c:	3a01      	subs	r2, #1
 8011d5e:	61e2      	str	r2, [r4, #28]
 8011d60:	69a2      	ldr	r2, [r4, #24]
 8011d62:	3a01      	subs	r2, #1
 8011d64:	bf48      	it	mi
 8011d66:	2206      	movmi	r2, #6
 8011d68:	61a2      	str	r2, [r4, #24]
 8011d6a:	68e2      	ldr	r2, [r4, #12]
 8011d6c:	3318      	adds	r3, #24
 8011d6e:	3a01      	subs	r2, #1
 8011d70:	60e2      	str	r2, [r4, #12]
 8011d72:	60a3      	str	r3, [r4, #8]
 8011d74:	2a00      	cmp	r2, #0
 8011d76:	d1dc      	bne.n	8011d32 <localtime_r+0x14e>
 8011d78:	6923      	ldr	r3, [r4, #16]
 8011d7a:	3b01      	subs	r3, #1
 8011d7c:	d405      	bmi.n	8011d8a <localtime_r+0x1a6>
 8011d7e:	6123      	str	r3, [r4, #16]
 8011d80:	6923      	ldr	r3, [r4, #16]
 8011d82:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011d86:	60e3      	str	r3, [r4, #12]
 8011d88:	e7d3      	b.n	8011d32 <localtime_r+0x14e>
 8011d8a:	230b      	movs	r3, #11
 8011d8c:	6123      	str	r3, [r4, #16]
 8011d8e:	6963      	ldr	r3, [r4, #20]
 8011d90:	1e5a      	subs	r2, r3, #1
 8011d92:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011d96:	6162      	str	r2, [r4, #20]
 8011d98:	079a      	lsls	r2, r3, #30
 8011d9a:	d105      	bne.n	8011da8 <localtime_r+0x1c4>
 8011d9c:	2164      	movs	r1, #100	; 0x64
 8011d9e:	fb93 f2f1 	sdiv	r2, r3, r1
 8011da2:	fb01 3212 	mls	r2, r1, r2, r3
 8011da6:	b962      	cbnz	r2, 8011dc2 <localtime_r+0x1de>
 8011da8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011dac:	fb93 f1f2 	sdiv	r1, r3, r2
 8011db0:	fb02 3311 	mls	r3, r2, r1, r3
 8011db4:	fab3 f383 	clz	r3, r3
 8011db8:	095b      	lsrs	r3, r3, #5
 8011dba:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011dbe:	61e3      	str	r3, [r4, #28]
 8011dc0:	e7de      	b.n	8011d80 <localtime_r+0x19c>
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	e7f9      	b.n	8011dba <localtime_r+0x1d6>
 8011dc6:	bf00      	nop
 8011dc8:	080153b0 	.word	0x080153b0
 8011dcc:	20002064 	.word	0x20002064

08011dd0 <__tzcalc_limits>:
 8011dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	f002 f8fd 	bl	8013fd4 <__gettzinfo>
 8011dda:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8011dde:	429d      	cmp	r5, r3
 8011de0:	f340 8095 	ble.w	8011f0e <__tzcalc_limits+0x13e>
 8011de4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8011de8:	18ac      	adds	r4, r5, r2
 8011dea:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8011dee:	f240 126d 	movw	r2, #365	; 0x16d
 8011df2:	10a4      	asrs	r4, r4, #2
 8011df4:	fb02 4403 	mla	r4, r2, r3, r4
 8011df8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8011dfc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8011e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e04:	441c      	add	r4, r3
 8011e06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011e0a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8011e0e:	fb95 fcf3 	sdiv	ip, r5, r3
 8011e12:	fb03 5c1c 	mls	ip, r3, ip, r5
 8011e16:	186a      	adds	r2, r5, r1
 8011e18:	fabc f68c 	clz	r6, ip
 8011e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011e20:	f005 0303 	and.w	r3, r5, #3
 8011e24:	4414      	add	r4, r2
 8011e26:	2264      	movs	r2, #100	; 0x64
 8011e28:	6045      	str	r5, [r0, #4]
 8011e2a:	fb95 f7f2 	sdiv	r7, r5, r2
 8011e2e:	0976      	lsrs	r6, r6, #5
 8011e30:	fb02 5717 	mls	r7, r2, r7, r5
 8011e34:	4601      	mov	r1, r0
 8011e36:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	f04f 0a07 	mov.w	sl, #7
 8011e40:	7a0d      	ldrb	r5, [r1, #8]
 8011e42:	694b      	ldr	r3, [r1, #20]
 8011e44:	2d4a      	cmp	r5, #74	; 0x4a
 8011e46:	d12b      	bne.n	8011ea0 <__tzcalc_limits+0xd0>
 8011e48:	9a00      	ldr	r2, [sp, #0]
 8011e4a:	18e5      	adds	r5, r4, r3
 8011e4c:	b902      	cbnz	r2, 8011e50 <__tzcalc_limits+0x80>
 8011e4e:	b917      	cbnz	r7, 8011e56 <__tzcalc_limits+0x86>
 8011e50:	f1bc 0f00 	cmp.w	ip, #0
 8011e54:	d122      	bne.n	8011e9c <__tzcalc_limits+0xcc>
 8011e56:	2b3b      	cmp	r3, #59	; 0x3b
 8011e58:	bfd4      	ite	le
 8011e5a:	2300      	movle	r3, #0
 8011e5c:	2301      	movgt	r3, #1
 8011e5e:	442b      	add	r3, r5
 8011e60:	3b01      	subs	r3, #1
 8011e62:	698d      	ldr	r5, [r1, #24]
 8011e64:	4a2b      	ldr	r2, [pc, #172]	; (8011f14 <__tzcalc_limits+0x144>)
 8011e66:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8011e6a:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8011e6e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8011e70:	18ed      	adds	r5, r5, r3
 8011e72:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8011e76:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8011e7a:	3128      	adds	r1, #40	; 0x28
 8011e7c:	458b      	cmp	fp, r1
 8011e7e:	d1df      	bne.n	8011e40 <__tzcalc_limits+0x70>
 8011e80:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8011e84:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 8011e88:	428c      	cmp	r4, r1
 8011e8a:	4193      	sbcs	r3, r2
 8011e8c:	bfb4      	ite	lt
 8011e8e:	2301      	movlt	r3, #1
 8011e90:	2300      	movge	r3, #0
 8011e92:	6003      	str	r3, [r0, #0]
 8011e94:	2001      	movs	r0, #1
 8011e96:	b003      	add	sp, #12
 8011e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	e7de      	b.n	8011e5e <__tzcalc_limits+0x8e>
 8011ea0:	2d44      	cmp	r5, #68	; 0x44
 8011ea2:	d101      	bne.n	8011ea8 <__tzcalc_limits+0xd8>
 8011ea4:	4423      	add	r3, r4
 8011ea6:	e7dc      	b.n	8011e62 <__tzcalc_limits+0x92>
 8011ea8:	9a00      	ldr	r2, [sp, #0]
 8011eaa:	bb52      	cbnz	r2, 8011f02 <__tzcalc_limits+0x132>
 8011eac:	2f00      	cmp	r7, #0
 8011eae:	bf0c      	ite	eq
 8011eb0:	4635      	moveq	r5, r6
 8011eb2:	2501      	movne	r5, #1
 8011eb4:	68ca      	ldr	r2, [r1, #12]
 8011eb6:	9201      	str	r2, [sp, #4]
 8011eb8:	4a17      	ldr	r2, [pc, #92]	; (8011f18 <__tzcalc_limits+0x148>)
 8011eba:	f04f 0930 	mov.w	r9, #48	; 0x30
 8011ebe:	fb09 2505 	mla	r5, r9, r5, r2
 8011ec2:	46a6      	mov	lr, r4
 8011ec4:	f04f 0800 	mov.w	r8, #0
 8011ec8:	3d04      	subs	r5, #4
 8011eca:	9a01      	ldr	r2, [sp, #4]
 8011ecc:	f108 0801 	add.w	r8, r8, #1
 8011ed0:	4542      	cmp	r2, r8
 8011ed2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8011ed6:	dc16      	bgt.n	8011f06 <__tzcalc_limits+0x136>
 8011ed8:	f10e 0504 	add.w	r5, lr, #4
 8011edc:	fb95 f8fa 	sdiv	r8, r5, sl
 8011ee0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8011ee4:	eba5 0508 	sub.w	r5, r5, r8
 8011ee8:	1b5d      	subs	r5, r3, r5
 8011eea:	690b      	ldr	r3, [r1, #16]
 8011eec:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ef0:	bf48      	it	mi
 8011ef2:	3507      	addmi	r5, #7
 8011ef4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011ef8:	442b      	add	r3, r5
 8011efa:	454b      	cmp	r3, r9
 8011efc:	da05      	bge.n	8011f0a <__tzcalc_limits+0x13a>
 8011efe:	4473      	add	r3, lr
 8011f00:	e7af      	b.n	8011e62 <__tzcalc_limits+0x92>
 8011f02:	4635      	mov	r5, r6
 8011f04:	e7d6      	b.n	8011eb4 <__tzcalc_limits+0xe4>
 8011f06:	44ce      	add	lr, r9
 8011f08:	e7df      	b.n	8011eca <__tzcalc_limits+0xfa>
 8011f0a:	3b07      	subs	r3, #7
 8011f0c:	e7f5      	b.n	8011efa <__tzcalc_limits+0x12a>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	e7c1      	b.n	8011e96 <__tzcalc_limits+0xc6>
 8011f12:	bf00      	nop
 8011f14:	00015180 	.word	0x00015180
 8011f18:	080153b0 	.word	0x080153b0

08011f1c <__tz_lock>:
 8011f1c:	4801      	ldr	r0, [pc, #4]	; (8011f24 <__tz_lock+0x8>)
 8011f1e:	f000 bab4 	b.w	801248a <__retarget_lock_acquire>
 8011f22:	bf00      	nop
 8011f24:	20002073 	.word	0x20002073

08011f28 <__tz_unlock>:
 8011f28:	4801      	ldr	r0, [pc, #4]	; (8011f30 <__tz_unlock+0x8>)
 8011f2a:	f000 bab0 	b.w	801248e <__retarget_lock_release>
 8011f2e:	bf00      	nop
 8011f30:	20002073 	.word	0x20002073

08011f34 <_tzset_unlocked>:
 8011f34:	4b01      	ldr	r3, [pc, #4]	; (8011f3c <_tzset_unlocked+0x8>)
 8011f36:	6818      	ldr	r0, [r3, #0]
 8011f38:	f000 b802 	b.w	8011f40 <_tzset_unlocked_r>
 8011f3c:	2000007c 	.word	0x2000007c

08011f40 <_tzset_unlocked_r>:
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	b08d      	sub	sp, #52	; 0x34
 8011f46:	4607      	mov	r7, r0
 8011f48:	f002 f844 	bl	8013fd4 <__gettzinfo>
 8011f4c:	49bb      	ldr	r1, [pc, #748]	; (801223c <_tzset_unlocked_r+0x2fc>)
 8011f4e:	4dbc      	ldr	r5, [pc, #752]	; (8012240 <_tzset_unlocked_r+0x300>)
 8011f50:	4604      	mov	r4, r0
 8011f52:	4638      	mov	r0, r7
 8011f54:	f001 f9d6 	bl	8013304 <_getenv_r>
 8011f58:	4606      	mov	r6, r0
 8011f5a:	bb10      	cbnz	r0, 8011fa2 <_tzset_unlocked_r+0x62>
 8011f5c:	4bb9      	ldr	r3, [pc, #740]	; (8012244 <_tzset_unlocked_r+0x304>)
 8011f5e:	4aba      	ldr	r2, [pc, #744]	; (8012248 <_tzset_unlocked_r+0x308>)
 8011f60:	6018      	str	r0, [r3, #0]
 8011f62:	4bba      	ldr	r3, [pc, #744]	; (801224c <_tzset_unlocked_r+0x30c>)
 8011f64:	62a0      	str	r0, [r4, #40]	; 0x28
 8011f66:	6018      	str	r0, [r3, #0]
 8011f68:	4bb9      	ldr	r3, [pc, #740]	; (8012250 <_tzset_unlocked_r+0x310>)
 8011f6a:	6520      	str	r0, [r4, #80]	; 0x50
 8011f6c:	e9c3 2200 	strd	r2, r2, [r3]
 8011f70:	214a      	movs	r1, #74	; 0x4a
 8011f72:	2200      	movs	r2, #0
 8011f74:	2300      	movs	r3, #0
 8011f76:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8011f7a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8011f7e:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8011f82:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8011f86:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011f8e:	6828      	ldr	r0, [r5, #0]
 8011f90:	7221      	strb	r1, [r4, #8]
 8011f92:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8011f96:	f7fe fee5 	bl	8010d64 <free>
 8011f9a:	602e      	str	r6, [r5, #0]
 8011f9c:	b00d      	add	sp, #52	; 0x34
 8011f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	6829      	ldr	r1, [r5, #0]
 8011fa4:	2900      	cmp	r1, #0
 8011fa6:	f040 808e 	bne.w	80120c6 <_tzset_unlocked_r+0x186>
 8011faa:	6828      	ldr	r0, [r5, #0]
 8011fac:	f7fe feda 	bl	8010d64 <free>
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7ee f96d 	bl	8000290 <strlen>
 8011fb6:	1c41      	adds	r1, r0, #1
 8011fb8:	4638      	mov	r0, r7
 8011fba:	f7fe fefb 	bl	8010db4 <_malloc_r>
 8011fbe:	6028      	str	r0, [r5, #0]
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	f040 8086 	bne.w	80120d2 <_tzset_unlocked_r+0x192>
 8011fc6:	4aa1      	ldr	r2, [pc, #644]	; (801224c <_tzset_unlocked_r+0x30c>)
 8011fc8:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8012250 <_tzset_unlocked_r+0x310>
 8011fcc:	f8df a274 	ldr.w	sl, [pc, #628]	; 8012244 <_tzset_unlocked_r+0x304>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	6013      	str	r3, [r2, #0]
 8011fd4:	4a9f      	ldr	r2, [pc, #636]	; (8012254 <_tzset_unlocked_r+0x314>)
 8011fd6:	f8ca 3000 	str.w	r3, [sl]
 8011fda:	2000      	movs	r0, #0
 8011fdc:	2100      	movs	r1, #0
 8011fde:	e9c8 2200 	strd	r2, r2, [r8]
 8011fe2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8011fe6:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8011fea:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8011fee:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8011ff2:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8011ff6:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011ffa:	224a      	movs	r2, #74	; 0x4a
 8011ffc:	7222      	strb	r2, [r4, #8]
 8011ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8012000:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8012004:	6523      	str	r3, [r4, #80]	; 0x50
 8012006:	7833      	ldrb	r3, [r6, #0]
 8012008:	2b3a      	cmp	r3, #58	; 0x3a
 801200a:	bf08      	it	eq
 801200c:	3601      	addeq	r6, #1
 801200e:	7833      	ldrb	r3, [r6, #0]
 8012010:	2b3c      	cmp	r3, #60	; 0x3c
 8012012:	d162      	bne.n	80120da <_tzset_unlocked_r+0x19a>
 8012014:	1c75      	adds	r5, r6, #1
 8012016:	4a90      	ldr	r2, [pc, #576]	; (8012258 <_tzset_unlocked_r+0x318>)
 8012018:	4990      	ldr	r1, [pc, #576]	; (801225c <_tzset_unlocked_r+0x31c>)
 801201a:	ab0a      	add	r3, sp, #40	; 0x28
 801201c:	4628      	mov	r0, r5
 801201e:	f001 ff93 	bl	8013f48 <siscanf>
 8012022:	2800      	cmp	r0, #0
 8012024:	ddba      	ble.n	8011f9c <_tzset_unlocked_r+0x5c>
 8012026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012028:	1eda      	subs	r2, r3, #3
 801202a:	2a07      	cmp	r2, #7
 801202c:	d8b6      	bhi.n	8011f9c <_tzset_unlocked_r+0x5c>
 801202e:	5ceb      	ldrb	r3, [r5, r3]
 8012030:	2b3e      	cmp	r3, #62	; 0x3e
 8012032:	d1b3      	bne.n	8011f9c <_tzset_unlocked_r+0x5c>
 8012034:	3602      	adds	r6, #2
 8012036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012038:	18f5      	adds	r5, r6, r3
 801203a:	5cf3      	ldrb	r3, [r6, r3]
 801203c:	2b2d      	cmp	r3, #45	; 0x2d
 801203e:	d15a      	bne.n	80120f6 <_tzset_unlocked_r+0x1b6>
 8012040:	3501      	adds	r5, #1
 8012042:	f04f 39ff 	mov.w	r9, #4294967295
 8012046:	2300      	movs	r3, #0
 8012048:	f8ad 301e 	strh.w	r3, [sp, #30]
 801204c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012050:	af08      	add	r7, sp, #32
 8012052:	ab0a      	add	r3, sp, #40	; 0x28
 8012054:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8012058:	9303      	str	r3, [sp, #12]
 801205a:	f10d 031e 	add.w	r3, sp, #30
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	497f      	ldr	r1, [pc, #508]	; (8012260 <_tzset_unlocked_r+0x320>)
 8012062:	ab0a      	add	r3, sp, #40	; 0x28
 8012064:	aa07      	add	r2, sp, #28
 8012066:	4628      	mov	r0, r5
 8012068:	f001 ff6e 	bl	8013f48 <siscanf>
 801206c:	2800      	cmp	r0, #0
 801206e:	dd95      	ble.n	8011f9c <_tzset_unlocked_r+0x5c>
 8012070:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012074:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8012078:	223c      	movs	r2, #60	; 0x3c
 801207a:	fb02 6603 	mla	r6, r2, r3, r6
 801207e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012082:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8012086:	fb02 6603 	mla	r6, r2, r3, r6
 801208a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801208c:	fb09 f606 	mul.w	r6, r9, r6
 8012090:	eb05 0903 	add.w	r9, r5, r3
 8012094:	5ceb      	ldrb	r3, [r5, r3]
 8012096:	2b3c      	cmp	r3, #60	; 0x3c
 8012098:	f040 80ec 	bne.w	8012274 <_tzset_unlocked_r+0x334>
 801209c:	f109 0501 	add.w	r5, r9, #1
 80120a0:	4a70      	ldr	r2, [pc, #448]	; (8012264 <_tzset_unlocked_r+0x324>)
 80120a2:	496e      	ldr	r1, [pc, #440]	; (801225c <_tzset_unlocked_r+0x31c>)
 80120a4:	ab0a      	add	r3, sp, #40	; 0x28
 80120a6:	4628      	mov	r0, r5
 80120a8:	f001 ff4e 	bl	8013f48 <siscanf>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	dc28      	bgt.n	8012102 <_tzset_unlocked_r+0x1c2>
 80120b0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80120b4:	2b3e      	cmp	r3, #62	; 0x3e
 80120b6:	d124      	bne.n	8012102 <_tzset_unlocked_r+0x1c2>
 80120b8:	4b67      	ldr	r3, [pc, #412]	; (8012258 <_tzset_unlocked_r+0x318>)
 80120ba:	62a6      	str	r6, [r4, #40]	; 0x28
 80120bc:	e9c8 3300 	strd	r3, r3, [r8]
 80120c0:	f8ca 6000 	str.w	r6, [sl]
 80120c4:	e76a      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 80120c6:	f7ee f883 	bl	80001d0 <strcmp>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	f47f af6d 	bne.w	8011faa <_tzset_unlocked_r+0x6a>
 80120d0:	e764      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 80120d2:	4631      	mov	r1, r6
 80120d4:	f000 f9dd 	bl	8012492 <strcpy>
 80120d8:	e775      	b.n	8011fc6 <_tzset_unlocked_r+0x86>
 80120da:	4a5f      	ldr	r2, [pc, #380]	; (8012258 <_tzset_unlocked_r+0x318>)
 80120dc:	4962      	ldr	r1, [pc, #392]	; (8012268 <_tzset_unlocked_r+0x328>)
 80120de:	ab0a      	add	r3, sp, #40	; 0x28
 80120e0:	4630      	mov	r0, r6
 80120e2:	f001 ff31 	bl	8013f48 <siscanf>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	f77f af58 	ble.w	8011f9c <_tzset_unlocked_r+0x5c>
 80120ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ee:	3b03      	subs	r3, #3
 80120f0:	2b07      	cmp	r3, #7
 80120f2:	d9a0      	bls.n	8012036 <_tzset_unlocked_r+0xf6>
 80120f4:	e752      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 80120f6:	2b2b      	cmp	r3, #43	; 0x2b
 80120f8:	bf08      	it	eq
 80120fa:	3501      	addeq	r5, #1
 80120fc:	f04f 0901 	mov.w	r9, #1
 8012100:	e7a1      	b.n	8012046 <_tzset_unlocked_r+0x106>
 8012102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012104:	1eda      	subs	r2, r3, #3
 8012106:	2a07      	cmp	r2, #7
 8012108:	f63f af48 	bhi.w	8011f9c <_tzset_unlocked_r+0x5c>
 801210c:	5ceb      	ldrb	r3, [r5, r3]
 801210e:	2b3e      	cmp	r3, #62	; 0x3e
 8012110:	f47f af44 	bne.w	8011f9c <_tzset_unlocked_r+0x5c>
 8012114:	f109 0902 	add.w	r9, r9, #2
 8012118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801211a:	eb09 0503 	add.w	r5, r9, r3
 801211e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012122:	2b2d      	cmp	r3, #45	; 0x2d
 8012124:	f040 80b5 	bne.w	8012292 <_tzset_unlocked_r+0x352>
 8012128:	3501      	adds	r5, #1
 801212a:	f04f 39ff 	mov.w	r9, #4294967295
 801212e:	2300      	movs	r3, #0
 8012130:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012134:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012138:	f8ad 3020 	strh.w	r3, [sp, #32]
 801213c:	930a      	str	r3, [sp, #40]	; 0x28
 801213e:	ab0a      	add	r3, sp, #40	; 0x28
 8012140:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8012144:	9301      	str	r3, [sp, #4]
 8012146:	f10d 031e 	add.w	r3, sp, #30
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	4944      	ldr	r1, [pc, #272]	; (8012260 <_tzset_unlocked_r+0x320>)
 801214e:	ab0a      	add	r3, sp, #40	; 0x28
 8012150:	aa07      	add	r2, sp, #28
 8012152:	4628      	mov	r0, r5
 8012154:	f001 fef8 	bl	8013f48 <siscanf>
 8012158:	2800      	cmp	r0, #0
 801215a:	f300 80a0 	bgt.w	801229e <_tzset_unlocked_r+0x35e>
 801215e:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8012162:	9304      	str	r3, [sp, #16]
 8012164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012166:	4627      	mov	r7, r4
 8012168:	441d      	add	r5, r3
 801216a:	f04f 0b00 	mov.w	fp, #0
 801216e:	782b      	ldrb	r3, [r5, #0]
 8012170:	2b2c      	cmp	r3, #44	; 0x2c
 8012172:	bf08      	it	eq
 8012174:	3501      	addeq	r5, #1
 8012176:	f895 9000 	ldrb.w	r9, [r5]
 801217a:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 801217e:	f040 80a1 	bne.w	80122c4 <_tzset_unlocked_r+0x384>
 8012182:	ab0a      	add	r3, sp, #40	; 0x28
 8012184:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8012188:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801218c:	aa09      	add	r2, sp, #36	; 0x24
 801218e:	9200      	str	r2, [sp, #0]
 8012190:	4936      	ldr	r1, [pc, #216]	; (801226c <_tzset_unlocked_r+0x32c>)
 8012192:	9303      	str	r3, [sp, #12]
 8012194:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8012198:	4628      	mov	r0, r5
 801219a:	f001 fed5 	bl	8013f48 <siscanf>
 801219e:	2803      	cmp	r0, #3
 80121a0:	f47f aefc 	bne.w	8011f9c <_tzset_unlocked_r+0x5c>
 80121a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80121a8:	1e4b      	subs	r3, r1, #1
 80121aa:	2b0b      	cmp	r3, #11
 80121ac:	f63f aef6 	bhi.w	8011f9c <_tzset_unlocked_r+0x5c>
 80121b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80121b4:	1e53      	subs	r3, r2, #1
 80121b6:	2b04      	cmp	r3, #4
 80121b8:	f63f aef0 	bhi.w	8011f9c <_tzset_unlocked_r+0x5c>
 80121bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80121c0:	2b06      	cmp	r3, #6
 80121c2:	f63f aeeb 	bhi.w	8011f9c <_tzset_unlocked_r+0x5c>
 80121c6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80121ca:	f887 9008 	strb.w	r9, [r7, #8]
 80121ce:	617b      	str	r3, [r7, #20]
 80121d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121d2:	eb05 0903 	add.w	r9, r5, r3
 80121d6:	2500      	movs	r5, #0
 80121d8:	2302      	movs	r3, #2
 80121da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80121de:	f8ad 501e 	strh.w	r5, [sp, #30]
 80121e2:	f8ad 5020 	strh.w	r5, [sp, #32]
 80121e6:	950a      	str	r5, [sp, #40]	; 0x28
 80121e8:	f899 3000 	ldrb.w	r3, [r9]
 80121ec:	2b2f      	cmp	r3, #47	; 0x2f
 80121ee:	f040 8095 	bne.w	801231c <_tzset_unlocked_r+0x3dc>
 80121f2:	ab0a      	add	r3, sp, #40	; 0x28
 80121f4:	aa08      	add	r2, sp, #32
 80121f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80121fa:	f10d 021e 	add.w	r2, sp, #30
 80121fe:	9200      	str	r2, [sp, #0]
 8012200:	491b      	ldr	r1, [pc, #108]	; (8012270 <_tzset_unlocked_r+0x330>)
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	aa07      	add	r2, sp, #28
 8012206:	4648      	mov	r0, r9
 8012208:	f001 fe9e 	bl	8013f48 <siscanf>
 801220c:	42a8      	cmp	r0, r5
 801220e:	f300 8085 	bgt.w	801231c <_tzset_unlocked_r+0x3dc>
 8012212:	214a      	movs	r1, #74	; 0x4a
 8012214:	2200      	movs	r2, #0
 8012216:	2300      	movs	r3, #0
 8012218:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801221c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012220:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012228:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 801222c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012230:	7221      	strb	r1, [r4, #8]
 8012232:	62a5      	str	r5, [r4, #40]	; 0x28
 8012234:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8012238:	6525      	str	r5, [r4, #80]	; 0x50
 801223a:	e6af      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 801223c:	08015410 	.word	0x08015410
 8012240:	20002060 	.word	0x20002060
 8012244:	20002068 	.word	0x20002068
 8012248:	08015413 	.word	0x08015413
 801224c:	20002064 	.word	0x20002064
 8012250:	20000028 	.word	0x20000028
 8012254:	08015499 	.word	0x08015499
 8012258:	20002054 	.word	0x20002054
 801225c:	08015417 	.word	0x08015417
 8012260:	0801544c 	.word	0x0801544c
 8012264:	20002048 	.word	0x20002048
 8012268:	0801542a 	.word	0x0801542a
 801226c:	08015438 	.word	0x08015438
 8012270:	0801544b 	.word	0x0801544b
 8012274:	4a3e      	ldr	r2, [pc, #248]	; (8012370 <_tzset_unlocked_r+0x430>)
 8012276:	493f      	ldr	r1, [pc, #252]	; (8012374 <_tzset_unlocked_r+0x434>)
 8012278:	ab0a      	add	r3, sp, #40	; 0x28
 801227a:	4648      	mov	r0, r9
 801227c:	f001 fe64 	bl	8013f48 <siscanf>
 8012280:	2800      	cmp	r0, #0
 8012282:	f77f af19 	ble.w	80120b8 <_tzset_unlocked_r+0x178>
 8012286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012288:	3b03      	subs	r3, #3
 801228a:	2b07      	cmp	r3, #7
 801228c:	f67f af44 	bls.w	8012118 <_tzset_unlocked_r+0x1d8>
 8012290:	e684      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 8012292:	2b2b      	cmp	r3, #43	; 0x2b
 8012294:	bf08      	it	eq
 8012296:	3501      	addeq	r5, #1
 8012298:	f04f 0901 	mov.w	r9, #1
 801229c:	e747      	b.n	801212e <_tzset_unlocked_r+0x1ee>
 801229e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80122a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80122a6:	213c      	movs	r1, #60	; 0x3c
 80122a8:	fb01 3302 	mla	r3, r1, r2, r3
 80122ac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80122b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80122b4:	fb01 3302 	mla	r3, r1, r2, r3
 80122b8:	fb09 f303 	mul.w	r3, r9, r3
 80122bc:	e751      	b.n	8012162 <_tzset_unlocked_r+0x222>
 80122be:	f04f 0b01 	mov.w	fp, #1
 80122c2:	e754      	b.n	801216e <_tzset_unlocked_r+0x22e>
 80122c4:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 80122c8:	bf06      	itte	eq
 80122ca:	3501      	addeq	r5, #1
 80122cc:	464b      	moveq	r3, r9
 80122ce:	2344      	movne	r3, #68	; 0x44
 80122d0:	220a      	movs	r2, #10
 80122d2:	a90b      	add	r1, sp, #44	; 0x2c
 80122d4:	4628      	mov	r0, r5
 80122d6:	9305      	str	r3, [sp, #20]
 80122d8:	f001 fc14 	bl	8013b04 <strtoul>
 80122dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80122e0:	9b05      	ldr	r3, [sp, #20]
 80122e2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80122e6:	45a9      	cmp	r9, r5
 80122e8:	d114      	bne.n	8012314 <_tzset_unlocked_r+0x3d4>
 80122ea:	234d      	movs	r3, #77	; 0x4d
 80122ec:	f1bb 0f00 	cmp.w	fp, #0
 80122f0:	d107      	bne.n	8012302 <_tzset_unlocked_r+0x3c2>
 80122f2:	7223      	strb	r3, [r4, #8]
 80122f4:	2103      	movs	r1, #3
 80122f6:	2302      	movs	r3, #2
 80122f8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80122fc:	f8c4 b014 	str.w	fp, [r4, #20]
 8012300:	e769      	b.n	80121d6 <_tzset_unlocked_r+0x296>
 8012302:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8012306:	220b      	movs	r2, #11
 8012308:	2301      	movs	r3, #1
 801230a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 801230e:	2300      	movs	r3, #0
 8012310:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012312:	e760      	b.n	80121d6 <_tzset_unlocked_r+0x296>
 8012314:	b280      	uxth	r0, r0
 8012316:	723b      	strb	r3, [r7, #8]
 8012318:	6178      	str	r0, [r7, #20]
 801231a:	e75c      	b.n	80121d6 <_tzset_unlocked_r+0x296>
 801231c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012320:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012324:	213c      	movs	r1, #60	; 0x3c
 8012326:	fb01 3302 	mla	r3, r1, r2, r3
 801232a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801232e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012332:	fb01 3302 	mla	r3, r1, r2, r3
 8012336:	61bb      	str	r3, [r7, #24]
 8012338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801233a:	3728      	adds	r7, #40	; 0x28
 801233c:	444d      	add	r5, r9
 801233e:	f1bb 0f00 	cmp.w	fp, #0
 8012342:	d0bc      	beq.n	80122be <_tzset_unlocked_r+0x37e>
 8012344:	9b04      	ldr	r3, [sp, #16]
 8012346:	6523      	str	r3, [r4, #80]	; 0x50
 8012348:	4b0b      	ldr	r3, [pc, #44]	; (8012378 <_tzset_unlocked_r+0x438>)
 801234a:	f8c8 3000 	str.w	r3, [r8]
 801234e:	6860      	ldr	r0, [r4, #4]
 8012350:	4b07      	ldr	r3, [pc, #28]	; (8012370 <_tzset_unlocked_r+0x430>)
 8012352:	62a6      	str	r6, [r4, #40]	; 0x28
 8012354:	f8c8 3004 	str.w	r3, [r8, #4]
 8012358:	f7ff fd3a 	bl	8011dd0 <__tzcalc_limits>
 801235c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801235e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012360:	f8ca 2000 	str.w	r2, [sl]
 8012364:	1a9b      	subs	r3, r3, r2
 8012366:	4a05      	ldr	r2, [pc, #20]	; (801237c <_tzset_unlocked_r+0x43c>)
 8012368:	bf18      	it	ne
 801236a:	2301      	movne	r3, #1
 801236c:	6013      	str	r3, [r2, #0]
 801236e:	e615      	b.n	8011f9c <_tzset_unlocked_r+0x5c>
 8012370:	20002048 	.word	0x20002048
 8012374:	0801542a 	.word	0x0801542a
 8012378:	20002054 	.word	0x20002054
 801237c:	20002064 	.word	0x20002064

08012380 <_localeconv_r>:
 8012380:	4800      	ldr	r0, [pc, #0]	; (8012384 <_localeconv_r+0x4>)
 8012382:	4770      	bx	lr
 8012384:	200001c8 	.word	0x200001c8

08012388 <_close_r>:
 8012388:	b538      	push	{r3, r4, r5, lr}
 801238a:	4d06      	ldr	r5, [pc, #24]	; (80123a4 <_close_r+0x1c>)
 801238c:	2300      	movs	r3, #0
 801238e:	4604      	mov	r4, r0
 8012390:	4608      	mov	r0, r1
 8012392:	602b      	str	r3, [r5, #0]
 8012394:	f7f5 ff9f 	bl	80082d6 <_close>
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	d102      	bne.n	80123a2 <_close_r+0x1a>
 801239c:	682b      	ldr	r3, [r5, #0]
 801239e:	b103      	cbz	r3, 80123a2 <_close_r+0x1a>
 80123a0:	6023      	str	r3, [r4, #0]
 80123a2:	bd38      	pop	{r3, r4, r5, pc}
 80123a4:	2000206c 	.word	0x2000206c

080123a8 <_lseek_r>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	4d07      	ldr	r5, [pc, #28]	; (80123c8 <_lseek_r+0x20>)
 80123ac:	4604      	mov	r4, r0
 80123ae:	4608      	mov	r0, r1
 80123b0:	4611      	mov	r1, r2
 80123b2:	2200      	movs	r2, #0
 80123b4:	602a      	str	r2, [r5, #0]
 80123b6:	461a      	mov	r2, r3
 80123b8:	f7f5 ffb4 	bl	8008324 <_lseek>
 80123bc:	1c43      	adds	r3, r0, #1
 80123be:	d102      	bne.n	80123c6 <_lseek_r+0x1e>
 80123c0:	682b      	ldr	r3, [r5, #0]
 80123c2:	b103      	cbz	r3, 80123c6 <_lseek_r+0x1e>
 80123c4:	6023      	str	r3, [r4, #0]
 80123c6:	bd38      	pop	{r3, r4, r5, pc}
 80123c8:	2000206c 	.word	0x2000206c

080123cc <_read_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4d07      	ldr	r5, [pc, #28]	; (80123ec <_read_r+0x20>)
 80123d0:	4604      	mov	r4, r0
 80123d2:	4608      	mov	r0, r1
 80123d4:	4611      	mov	r1, r2
 80123d6:	2200      	movs	r2, #0
 80123d8:	602a      	str	r2, [r5, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	f7f5 ff42 	bl	8008264 <_read>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d102      	bne.n	80123ea <_read_r+0x1e>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	b103      	cbz	r3, 80123ea <_read_r+0x1e>
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	2000206c 	.word	0x2000206c

080123f0 <_sbrk_r>:
 80123f0:	b538      	push	{r3, r4, r5, lr}
 80123f2:	4d06      	ldr	r5, [pc, #24]	; (801240c <_sbrk_r+0x1c>)
 80123f4:	2300      	movs	r3, #0
 80123f6:	4604      	mov	r4, r0
 80123f8:	4608      	mov	r0, r1
 80123fa:	602b      	str	r3, [r5, #0]
 80123fc:	f7f5 ffa0 	bl	8008340 <_sbrk>
 8012400:	1c43      	adds	r3, r0, #1
 8012402:	d102      	bne.n	801240a <_sbrk_r+0x1a>
 8012404:	682b      	ldr	r3, [r5, #0]
 8012406:	b103      	cbz	r3, 801240a <_sbrk_r+0x1a>
 8012408:	6023      	str	r3, [r4, #0]
 801240a:	bd38      	pop	{r3, r4, r5, pc}
 801240c:	2000206c 	.word	0x2000206c

08012410 <_write_r>:
 8012410:	b538      	push	{r3, r4, r5, lr}
 8012412:	4d07      	ldr	r5, [pc, #28]	; (8012430 <_write_r+0x20>)
 8012414:	4604      	mov	r4, r0
 8012416:	4608      	mov	r0, r1
 8012418:	4611      	mov	r1, r2
 801241a:	2200      	movs	r2, #0
 801241c:	602a      	str	r2, [r5, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	f7f5 ff3d 	bl	800829e <_write>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_write_r+0x1e>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	b103      	cbz	r3, 801242e <_write_r+0x1e>
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	2000206c 	.word	0x2000206c

08012434 <__errno>:
 8012434:	4b01      	ldr	r3, [pc, #4]	; (801243c <__errno+0x8>)
 8012436:	6818      	ldr	r0, [r3, #0]
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	2000007c 	.word	0x2000007c

08012440 <__libc_init_array>:
 8012440:	b570      	push	{r4, r5, r6, lr}
 8012442:	4d0d      	ldr	r5, [pc, #52]	; (8012478 <__libc_init_array+0x38>)
 8012444:	4c0d      	ldr	r4, [pc, #52]	; (801247c <__libc_init_array+0x3c>)
 8012446:	1b64      	subs	r4, r4, r5
 8012448:	10a4      	asrs	r4, r4, #2
 801244a:	2600      	movs	r6, #0
 801244c:	42a6      	cmp	r6, r4
 801244e:	d109      	bne.n	8012464 <__libc_init_array+0x24>
 8012450:	4d0b      	ldr	r5, [pc, #44]	; (8012480 <__libc_init_array+0x40>)
 8012452:	4c0c      	ldr	r4, [pc, #48]	; (8012484 <__libc_init_array+0x44>)
 8012454:	f002 fce6 	bl	8014e24 <_init>
 8012458:	1b64      	subs	r4, r4, r5
 801245a:	10a4      	asrs	r4, r4, #2
 801245c:	2600      	movs	r6, #0
 801245e:	42a6      	cmp	r6, r4
 8012460:	d105      	bne.n	801246e <__libc_init_array+0x2e>
 8012462:	bd70      	pop	{r4, r5, r6, pc}
 8012464:	f855 3b04 	ldr.w	r3, [r5], #4
 8012468:	4798      	blx	r3
 801246a:	3601      	adds	r6, #1
 801246c:	e7ee      	b.n	801244c <__libc_init_array+0xc>
 801246e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012472:	4798      	blx	r3
 8012474:	3601      	adds	r6, #1
 8012476:	e7f2      	b.n	801245e <__libc_init_array+0x1e>
 8012478:	080156ac 	.word	0x080156ac
 801247c:	080156ac 	.word	0x080156ac
 8012480:	080156ac 	.word	0x080156ac
 8012484:	080156b0 	.word	0x080156b0

08012488 <__retarget_lock_init_recursive>:
 8012488:	4770      	bx	lr

0801248a <__retarget_lock_acquire>:
 801248a:	4770      	bx	lr

0801248c <__retarget_lock_acquire_recursive>:
 801248c:	4770      	bx	lr

0801248e <__retarget_lock_release>:
 801248e:	4770      	bx	lr

08012490 <__retarget_lock_release_recursive>:
 8012490:	4770      	bx	lr

08012492 <strcpy>:
 8012492:	4603      	mov	r3, r0
 8012494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012498:	f803 2b01 	strb.w	r2, [r3], #1
 801249c:	2a00      	cmp	r2, #0
 801249e:	d1f9      	bne.n	8012494 <strcpy+0x2>
 80124a0:	4770      	bx	lr

080124a2 <memcpy>:
 80124a2:	440a      	add	r2, r1
 80124a4:	4291      	cmp	r1, r2
 80124a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80124aa:	d100      	bne.n	80124ae <memcpy+0xc>
 80124ac:	4770      	bx	lr
 80124ae:	b510      	push	{r4, lr}
 80124b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124b8:	4291      	cmp	r1, r2
 80124ba:	d1f9      	bne.n	80124b0 <memcpy+0xe>
 80124bc:	bd10      	pop	{r4, pc}
	...

080124c0 <__assert_func>:
 80124c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124c2:	4614      	mov	r4, r2
 80124c4:	461a      	mov	r2, r3
 80124c6:	4b09      	ldr	r3, [pc, #36]	; (80124ec <__assert_func+0x2c>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4605      	mov	r5, r0
 80124cc:	68d8      	ldr	r0, [r3, #12]
 80124ce:	b14c      	cbz	r4, 80124e4 <__assert_func+0x24>
 80124d0:	4b07      	ldr	r3, [pc, #28]	; (80124f0 <__assert_func+0x30>)
 80124d2:	9100      	str	r1, [sp, #0]
 80124d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80124d8:	4906      	ldr	r1, [pc, #24]	; (80124f4 <__assert_func+0x34>)
 80124da:	462b      	mov	r3, r5
 80124dc:	f001 fd22 	bl	8013f24 <fiprintf>
 80124e0:	f001 fe22 	bl	8014128 <abort>
 80124e4:	4b04      	ldr	r3, [pc, #16]	; (80124f8 <__assert_func+0x38>)
 80124e6:	461c      	mov	r4, r3
 80124e8:	e7f3      	b.n	80124d2 <__assert_func+0x12>
 80124ea:	bf00      	nop
 80124ec:	2000007c 	.word	0x2000007c
 80124f0:	0801545e 	.word	0x0801545e
 80124f4:	0801546b 	.word	0x0801546b
 80124f8:	08015499 	.word	0x08015499

080124fc <quorem>:
 80124fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012500:	6903      	ldr	r3, [r0, #16]
 8012502:	690c      	ldr	r4, [r1, #16]
 8012504:	42a3      	cmp	r3, r4
 8012506:	4607      	mov	r7, r0
 8012508:	db7e      	blt.n	8012608 <quorem+0x10c>
 801250a:	3c01      	subs	r4, #1
 801250c:	f101 0814 	add.w	r8, r1, #20
 8012510:	f100 0514 	add.w	r5, r0, #20
 8012514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801251e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012522:	3301      	adds	r3, #1
 8012524:	429a      	cmp	r2, r3
 8012526:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801252a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801252e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012532:	d331      	bcc.n	8012598 <quorem+0x9c>
 8012534:	f04f 0e00 	mov.w	lr, #0
 8012538:	4640      	mov	r0, r8
 801253a:	46ac      	mov	ip, r5
 801253c:	46f2      	mov	sl, lr
 801253e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012542:	b293      	uxth	r3, r2
 8012544:	fb06 e303 	mla	r3, r6, r3, lr
 8012548:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801254c:	0c1a      	lsrs	r2, r3, #16
 801254e:	b29b      	uxth	r3, r3
 8012550:	ebaa 0303 	sub.w	r3, sl, r3
 8012554:	f8dc a000 	ldr.w	sl, [ip]
 8012558:	fa13 f38a 	uxtah	r3, r3, sl
 801255c:	fb06 220e 	mla	r2, r6, lr, r2
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	9b00      	ldr	r3, [sp, #0]
 8012564:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012568:	b292      	uxth	r2, r2
 801256a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801256e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012572:	f8bd 3000 	ldrh.w	r3, [sp]
 8012576:	4581      	cmp	r9, r0
 8012578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801257c:	f84c 3b04 	str.w	r3, [ip], #4
 8012580:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012584:	d2db      	bcs.n	801253e <quorem+0x42>
 8012586:	f855 300b 	ldr.w	r3, [r5, fp]
 801258a:	b92b      	cbnz	r3, 8012598 <quorem+0x9c>
 801258c:	9b01      	ldr	r3, [sp, #4]
 801258e:	3b04      	subs	r3, #4
 8012590:	429d      	cmp	r5, r3
 8012592:	461a      	mov	r2, r3
 8012594:	d32c      	bcc.n	80125f0 <quorem+0xf4>
 8012596:	613c      	str	r4, [r7, #16]
 8012598:	4638      	mov	r0, r7
 801259a:	f001 f937 	bl	801380c <__mcmp>
 801259e:	2800      	cmp	r0, #0
 80125a0:	db22      	blt.n	80125e8 <quorem+0xec>
 80125a2:	3601      	adds	r6, #1
 80125a4:	4629      	mov	r1, r5
 80125a6:	2000      	movs	r0, #0
 80125a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80125ac:	f8d1 c000 	ldr.w	ip, [r1]
 80125b0:	b293      	uxth	r3, r2
 80125b2:	1ac3      	subs	r3, r0, r3
 80125b4:	0c12      	lsrs	r2, r2, #16
 80125b6:	fa13 f38c 	uxtah	r3, r3, ip
 80125ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80125be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125c8:	45c1      	cmp	r9, r8
 80125ca:	f841 3b04 	str.w	r3, [r1], #4
 80125ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80125d2:	d2e9      	bcs.n	80125a8 <quorem+0xac>
 80125d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125dc:	b922      	cbnz	r2, 80125e8 <quorem+0xec>
 80125de:	3b04      	subs	r3, #4
 80125e0:	429d      	cmp	r5, r3
 80125e2:	461a      	mov	r2, r3
 80125e4:	d30a      	bcc.n	80125fc <quorem+0x100>
 80125e6:	613c      	str	r4, [r7, #16]
 80125e8:	4630      	mov	r0, r6
 80125ea:	b003      	add	sp, #12
 80125ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f0:	6812      	ldr	r2, [r2, #0]
 80125f2:	3b04      	subs	r3, #4
 80125f4:	2a00      	cmp	r2, #0
 80125f6:	d1ce      	bne.n	8012596 <quorem+0x9a>
 80125f8:	3c01      	subs	r4, #1
 80125fa:	e7c9      	b.n	8012590 <quorem+0x94>
 80125fc:	6812      	ldr	r2, [r2, #0]
 80125fe:	3b04      	subs	r3, #4
 8012600:	2a00      	cmp	r2, #0
 8012602:	d1f0      	bne.n	80125e6 <quorem+0xea>
 8012604:	3c01      	subs	r4, #1
 8012606:	e7eb      	b.n	80125e0 <quorem+0xe4>
 8012608:	2000      	movs	r0, #0
 801260a:	e7ee      	b.n	80125ea <quorem+0xee>
 801260c:	0000      	movs	r0, r0
	...

08012610 <_dtoa_r>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	ed2d 8b04 	vpush	{d8-d9}
 8012618:	69c5      	ldr	r5, [r0, #28]
 801261a:	b093      	sub	sp, #76	; 0x4c
 801261c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012620:	ec57 6b10 	vmov	r6, r7, d0
 8012624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012628:	9107      	str	r1, [sp, #28]
 801262a:	4604      	mov	r4, r0
 801262c:	920a      	str	r2, [sp, #40]	; 0x28
 801262e:	930d      	str	r3, [sp, #52]	; 0x34
 8012630:	b975      	cbnz	r5, 8012650 <_dtoa_r+0x40>
 8012632:	2010      	movs	r0, #16
 8012634:	f7fe fb8e 	bl	8010d54 <malloc>
 8012638:	4602      	mov	r2, r0
 801263a:	61e0      	str	r0, [r4, #28]
 801263c:	b920      	cbnz	r0, 8012648 <_dtoa_r+0x38>
 801263e:	4bae      	ldr	r3, [pc, #696]	; (80128f8 <_dtoa_r+0x2e8>)
 8012640:	21ef      	movs	r1, #239	; 0xef
 8012642:	48ae      	ldr	r0, [pc, #696]	; (80128fc <_dtoa_r+0x2ec>)
 8012644:	f7ff ff3c 	bl	80124c0 <__assert_func>
 8012648:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801264c:	6005      	str	r5, [r0, #0]
 801264e:	60c5      	str	r5, [r0, #12]
 8012650:	69e3      	ldr	r3, [r4, #28]
 8012652:	6819      	ldr	r1, [r3, #0]
 8012654:	b151      	cbz	r1, 801266c <_dtoa_r+0x5c>
 8012656:	685a      	ldr	r2, [r3, #4]
 8012658:	604a      	str	r2, [r1, #4]
 801265a:	2301      	movs	r3, #1
 801265c:	4093      	lsls	r3, r2
 801265e:	608b      	str	r3, [r1, #8]
 8012660:	4620      	mov	r0, r4
 8012662:	f000 fe97 	bl	8013394 <_Bfree>
 8012666:	69e3      	ldr	r3, [r4, #28]
 8012668:	2200      	movs	r2, #0
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	1e3b      	subs	r3, r7, #0
 801266e:	bfbb      	ittet	lt
 8012670:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012674:	9303      	strlt	r3, [sp, #12]
 8012676:	2300      	movge	r3, #0
 8012678:	2201      	movlt	r2, #1
 801267a:	bfac      	ite	ge
 801267c:	f8c8 3000 	strge.w	r3, [r8]
 8012680:	f8c8 2000 	strlt.w	r2, [r8]
 8012684:	4b9e      	ldr	r3, [pc, #632]	; (8012900 <_dtoa_r+0x2f0>)
 8012686:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801268a:	ea33 0308 	bics.w	r3, r3, r8
 801268e:	d11b      	bne.n	80126c8 <_dtoa_r+0xb8>
 8012690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012692:	f242 730f 	movw	r3, #9999	; 0x270f
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801269c:	4333      	orrs	r3, r6
 801269e:	f000 8593 	beq.w	80131c8 <_dtoa_r+0xbb8>
 80126a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126a4:	b963      	cbnz	r3, 80126c0 <_dtoa_r+0xb0>
 80126a6:	4b97      	ldr	r3, [pc, #604]	; (8012904 <_dtoa_r+0x2f4>)
 80126a8:	e027      	b.n	80126fa <_dtoa_r+0xea>
 80126aa:	4b97      	ldr	r3, [pc, #604]	; (8012908 <_dtoa_r+0x2f8>)
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	3308      	adds	r3, #8
 80126b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80126b2:	6013      	str	r3, [r2, #0]
 80126b4:	9800      	ldr	r0, [sp, #0]
 80126b6:	b013      	add	sp, #76	; 0x4c
 80126b8:	ecbd 8b04 	vpop	{d8-d9}
 80126bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c0:	4b90      	ldr	r3, [pc, #576]	; (8012904 <_dtoa_r+0x2f4>)
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	3303      	adds	r3, #3
 80126c6:	e7f3      	b.n	80126b0 <_dtoa_r+0xa0>
 80126c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126cc:	2200      	movs	r2, #0
 80126ce:	ec51 0b17 	vmov	r0, r1, d7
 80126d2:	eeb0 8a47 	vmov.f32	s16, s14
 80126d6:	eef0 8a67 	vmov.f32	s17, s15
 80126da:	2300      	movs	r3, #0
 80126dc:	f7ee fa04 	bl	8000ae8 <__aeabi_dcmpeq>
 80126e0:	4681      	mov	r9, r0
 80126e2:	b160      	cbz	r0, 80126fe <_dtoa_r+0xee>
 80126e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126e6:	2301      	movs	r3, #1
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f000 8568 	beq.w	80131c2 <_dtoa_r+0xbb2>
 80126f2:	4b86      	ldr	r3, [pc, #536]	; (801290c <_dtoa_r+0x2fc>)
 80126f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80126f6:	6013      	str	r3, [r2, #0]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	e7da      	b.n	80126b4 <_dtoa_r+0xa4>
 80126fe:	aa10      	add	r2, sp, #64	; 0x40
 8012700:	a911      	add	r1, sp, #68	; 0x44
 8012702:	4620      	mov	r0, r4
 8012704:	eeb0 0a48 	vmov.f32	s0, s16
 8012708:	eef0 0a68 	vmov.f32	s1, s17
 801270c:	f001 f924 	bl	8013958 <__d2b>
 8012710:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012714:	4682      	mov	sl, r0
 8012716:	2d00      	cmp	r5, #0
 8012718:	d07f      	beq.n	801281a <_dtoa_r+0x20a>
 801271a:	ee18 3a90 	vmov	r3, s17
 801271e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012722:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012726:	ec51 0b18 	vmov	r0, r1, d8
 801272a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801272e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012732:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012736:	4619      	mov	r1, r3
 8012738:	2200      	movs	r2, #0
 801273a:	4b75      	ldr	r3, [pc, #468]	; (8012910 <_dtoa_r+0x300>)
 801273c:	f7ed fdb4 	bl	80002a8 <__aeabi_dsub>
 8012740:	a367      	add	r3, pc, #412	; (adr r3, 80128e0 <_dtoa_r+0x2d0>)
 8012742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012746:	f7ed ff67 	bl	8000618 <__aeabi_dmul>
 801274a:	a367      	add	r3, pc, #412	; (adr r3, 80128e8 <_dtoa_r+0x2d8>)
 801274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012750:	f7ed fdac 	bl	80002ac <__adddf3>
 8012754:	4606      	mov	r6, r0
 8012756:	4628      	mov	r0, r5
 8012758:	460f      	mov	r7, r1
 801275a:	f7ed fef3 	bl	8000544 <__aeabi_i2d>
 801275e:	a364      	add	r3, pc, #400	; (adr r3, 80128f0 <_dtoa_r+0x2e0>)
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	f7ed ff58 	bl	8000618 <__aeabi_dmul>
 8012768:	4602      	mov	r2, r0
 801276a:	460b      	mov	r3, r1
 801276c:	4630      	mov	r0, r6
 801276e:	4639      	mov	r1, r7
 8012770:	f7ed fd9c 	bl	80002ac <__adddf3>
 8012774:	4606      	mov	r6, r0
 8012776:	460f      	mov	r7, r1
 8012778:	f7ee f9fe 	bl	8000b78 <__aeabi_d2iz>
 801277c:	2200      	movs	r2, #0
 801277e:	4683      	mov	fp, r0
 8012780:	2300      	movs	r3, #0
 8012782:	4630      	mov	r0, r6
 8012784:	4639      	mov	r1, r7
 8012786:	f7ee f9b9 	bl	8000afc <__aeabi_dcmplt>
 801278a:	b148      	cbz	r0, 80127a0 <_dtoa_r+0x190>
 801278c:	4658      	mov	r0, fp
 801278e:	f7ed fed9 	bl	8000544 <__aeabi_i2d>
 8012792:	4632      	mov	r2, r6
 8012794:	463b      	mov	r3, r7
 8012796:	f7ee f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 801279a:	b908      	cbnz	r0, 80127a0 <_dtoa_r+0x190>
 801279c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127a0:	f1bb 0f16 	cmp.w	fp, #22
 80127a4:	d857      	bhi.n	8012856 <_dtoa_r+0x246>
 80127a6:	4b5b      	ldr	r3, [pc, #364]	; (8012914 <_dtoa_r+0x304>)
 80127a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80127ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b0:	ec51 0b18 	vmov	r0, r1, d8
 80127b4:	f7ee f9a2 	bl	8000afc <__aeabi_dcmplt>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d04e      	beq.n	801285a <_dtoa_r+0x24a>
 80127bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127c0:	2300      	movs	r3, #0
 80127c2:	930c      	str	r3, [sp, #48]	; 0x30
 80127c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127c6:	1b5b      	subs	r3, r3, r5
 80127c8:	1e5a      	subs	r2, r3, #1
 80127ca:	bf45      	ittet	mi
 80127cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80127d0:	9305      	strmi	r3, [sp, #20]
 80127d2:	2300      	movpl	r3, #0
 80127d4:	2300      	movmi	r3, #0
 80127d6:	9206      	str	r2, [sp, #24]
 80127d8:	bf54      	ite	pl
 80127da:	9305      	strpl	r3, [sp, #20]
 80127dc:	9306      	strmi	r3, [sp, #24]
 80127de:	f1bb 0f00 	cmp.w	fp, #0
 80127e2:	db3c      	blt.n	801285e <_dtoa_r+0x24e>
 80127e4:	9b06      	ldr	r3, [sp, #24]
 80127e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80127ea:	445b      	add	r3, fp
 80127ec:	9306      	str	r3, [sp, #24]
 80127ee:	2300      	movs	r3, #0
 80127f0:	9308      	str	r3, [sp, #32]
 80127f2:	9b07      	ldr	r3, [sp, #28]
 80127f4:	2b09      	cmp	r3, #9
 80127f6:	d868      	bhi.n	80128ca <_dtoa_r+0x2ba>
 80127f8:	2b05      	cmp	r3, #5
 80127fa:	bfc4      	itt	gt
 80127fc:	3b04      	subgt	r3, #4
 80127fe:	9307      	strgt	r3, [sp, #28]
 8012800:	9b07      	ldr	r3, [sp, #28]
 8012802:	f1a3 0302 	sub.w	r3, r3, #2
 8012806:	bfcc      	ite	gt
 8012808:	2500      	movgt	r5, #0
 801280a:	2501      	movle	r5, #1
 801280c:	2b03      	cmp	r3, #3
 801280e:	f200 8085 	bhi.w	801291c <_dtoa_r+0x30c>
 8012812:	e8df f003 	tbb	[pc, r3]
 8012816:	3b2e      	.short	0x3b2e
 8012818:	5839      	.short	0x5839
 801281a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801281e:	441d      	add	r5, r3
 8012820:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012824:	2b20      	cmp	r3, #32
 8012826:	bfc1      	itttt	gt
 8012828:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801282c:	fa08 f803 	lslgt.w	r8, r8, r3
 8012830:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012834:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012838:	bfd6      	itet	le
 801283a:	f1c3 0320 	rsble	r3, r3, #32
 801283e:	ea48 0003 	orrgt.w	r0, r8, r3
 8012842:	fa06 f003 	lslle.w	r0, r6, r3
 8012846:	f7ed fe6d 	bl	8000524 <__aeabi_ui2d>
 801284a:	2201      	movs	r2, #1
 801284c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012850:	3d01      	subs	r5, #1
 8012852:	920e      	str	r2, [sp, #56]	; 0x38
 8012854:	e76f      	b.n	8012736 <_dtoa_r+0x126>
 8012856:	2301      	movs	r3, #1
 8012858:	e7b3      	b.n	80127c2 <_dtoa_r+0x1b2>
 801285a:	900c      	str	r0, [sp, #48]	; 0x30
 801285c:	e7b2      	b.n	80127c4 <_dtoa_r+0x1b4>
 801285e:	9b05      	ldr	r3, [sp, #20]
 8012860:	eba3 030b 	sub.w	r3, r3, fp
 8012864:	9305      	str	r3, [sp, #20]
 8012866:	f1cb 0300 	rsb	r3, fp, #0
 801286a:	9308      	str	r3, [sp, #32]
 801286c:	2300      	movs	r3, #0
 801286e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012870:	e7bf      	b.n	80127f2 <_dtoa_r+0x1e2>
 8012872:	2300      	movs	r3, #0
 8012874:	9309      	str	r3, [sp, #36]	; 0x24
 8012876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc52      	bgt.n	8012922 <_dtoa_r+0x312>
 801287c:	2301      	movs	r3, #1
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	9304      	str	r3, [sp, #16]
 8012882:	461a      	mov	r2, r3
 8012884:	920a      	str	r2, [sp, #40]	; 0x28
 8012886:	e00b      	b.n	80128a0 <_dtoa_r+0x290>
 8012888:	2301      	movs	r3, #1
 801288a:	e7f3      	b.n	8012874 <_dtoa_r+0x264>
 801288c:	2300      	movs	r3, #0
 801288e:	9309      	str	r3, [sp, #36]	; 0x24
 8012890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012892:	445b      	add	r3, fp
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	3301      	adds	r3, #1
 8012898:	2b01      	cmp	r3, #1
 801289a:	9304      	str	r3, [sp, #16]
 801289c:	bfb8      	it	lt
 801289e:	2301      	movlt	r3, #1
 80128a0:	69e0      	ldr	r0, [r4, #28]
 80128a2:	2100      	movs	r1, #0
 80128a4:	2204      	movs	r2, #4
 80128a6:	f102 0614 	add.w	r6, r2, #20
 80128aa:	429e      	cmp	r6, r3
 80128ac:	d93d      	bls.n	801292a <_dtoa_r+0x31a>
 80128ae:	6041      	str	r1, [r0, #4]
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fd2f 	bl	8013314 <_Balloc>
 80128b6:	9000      	str	r0, [sp, #0]
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d139      	bne.n	8012930 <_dtoa_r+0x320>
 80128bc:	4b16      	ldr	r3, [pc, #88]	; (8012918 <_dtoa_r+0x308>)
 80128be:	4602      	mov	r2, r0
 80128c0:	f240 11af 	movw	r1, #431	; 0x1af
 80128c4:	e6bd      	b.n	8012642 <_dtoa_r+0x32>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e7e1      	b.n	801288e <_dtoa_r+0x27e>
 80128ca:	2501      	movs	r5, #1
 80128cc:	2300      	movs	r3, #0
 80128ce:	9307      	str	r3, [sp, #28]
 80128d0:	9509      	str	r5, [sp, #36]	; 0x24
 80128d2:	f04f 33ff 	mov.w	r3, #4294967295
 80128d6:	9301      	str	r3, [sp, #4]
 80128d8:	9304      	str	r3, [sp, #16]
 80128da:	2200      	movs	r2, #0
 80128dc:	2312      	movs	r3, #18
 80128de:	e7d1      	b.n	8012884 <_dtoa_r+0x274>
 80128e0:	636f4361 	.word	0x636f4361
 80128e4:	3fd287a7 	.word	0x3fd287a7
 80128e8:	8b60c8b3 	.word	0x8b60c8b3
 80128ec:	3fc68a28 	.word	0x3fc68a28
 80128f0:	509f79fb 	.word	0x509f79fb
 80128f4:	3fd34413 	.word	0x3fd34413
 80128f8:	0801533f 	.word	0x0801533f
 80128fc:	080154a7 	.word	0x080154a7
 8012900:	7ff00000 	.word	0x7ff00000
 8012904:	080154a3 	.word	0x080154a3
 8012908:	0801549a 	.word	0x0801549a
 801290c:	0801569e 	.word	0x0801569e
 8012910:	3ff80000 	.word	0x3ff80000
 8012914:	08015598 	.word	0x08015598
 8012918:	080154ff 	.word	0x080154ff
 801291c:	2301      	movs	r3, #1
 801291e:	9309      	str	r3, [sp, #36]	; 0x24
 8012920:	e7d7      	b.n	80128d2 <_dtoa_r+0x2c2>
 8012922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012924:	9301      	str	r3, [sp, #4]
 8012926:	9304      	str	r3, [sp, #16]
 8012928:	e7ba      	b.n	80128a0 <_dtoa_r+0x290>
 801292a:	3101      	adds	r1, #1
 801292c:	0052      	lsls	r2, r2, #1
 801292e:	e7ba      	b.n	80128a6 <_dtoa_r+0x296>
 8012930:	69e3      	ldr	r3, [r4, #28]
 8012932:	9a00      	ldr	r2, [sp, #0]
 8012934:	601a      	str	r2, [r3, #0]
 8012936:	9b04      	ldr	r3, [sp, #16]
 8012938:	2b0e      	cmp	r3, #14
 801293a:	f200 80a8 	bhi.w	8012a8e <_dtoa_r+0x47e>
 801293e:	2d00      	cmp	r5, #0
 8012940:	f000 80a5 	beq.w	8012a8e <_dtoa_r+0x47e>
 8012944:	f1bb 0f00 	cmp.w	fp, #0
 8012948:	dd38      	ble.n	80129bc <_dtoa_r+0x3ac>
 801294a:	4bc0      	ldr	r3, [pc, #768]	; (8012c4c <_dtoa_r+0x63c>)
 801294c:	f00b 020f 	and.w	r2, fp, #15
 8012950:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012954:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012958:	e9d3 6700 	ldrd	r6, r7, [r3]
 801295c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012960:	d019      	beq.n	8012996 <_dtoa_r+0x386>
 8012962:	4bbb      	ldr	r3, [pc, #748]	; (8012c50 <_dtoa_r+0x640>)
 8012964:	ec51 0b18 	vmov	r0, r1, d8
 8012968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801296c:	f7ed ff7e 	bl	800086c <__aeabi_ddiv>
 8012970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012974:	f008 080f 	and.w	r8, r8, #15
 8012978:	2503      	movs	r5, #3
 801297a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012c50 <_dtoa_r+0x640>
 801297e:	f1b8 0f00 	cmp.w	r8, #0
 8012982:	d10a      	bne.n	801299a <_dtoa_r+0x38a>
 8012984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012988:	4632      	mov	r2, r6
 801298a:	463b      	mov	r3, r7
 801298c:	f7ed ff6e 	bl	800086c <__aeabi_ddiv>
 8012990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012994:	e02b      	b.n	80129ee <_dtoa_r+0x3de>
 8012996:	2502      	movs	r5, #2
 8012998:	e7ef      	b.n	801297a <_dtoa_r+0x36a>
 801299a:	f018 0f01 	tst.w	r8, #1
 801299e:	d008      	beq.n	80129b2 <_dtoa_r+0x3a2>
 80129a0:	4630      	mov	r0, r6
 80129a2:	4639      	mov	r1, r7
 80129a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80129a8:	f7ed fe36 	bl	8000618 <__aeabi_dmul>
 80129ac:	3501      	adds	r5, #1
 80129ae:	4606      	mov	r6, r0
 80129b0:	460f      	mov	r7, r1
 80129b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80129b6:	f109 0908 	add.w	r9, r9, #8
 80129ba:	e7e0      	b.n	801297e <_dtoa_r+0x36e>
 80129bc:	f000 809f 	beq.w	8012afe <_dtoa_r+0x4ee>
 80129c0:	f1cb 0600 	rsb	r6, fp, #0
 80129c4:	4ba1      	ldr	r3, [pc, #644]	; (8012c4c <_dtoa_r+0x63c>)
 80129c6:	4fa2      	ldr	r7, [pc, #648]	; (8012c50 <_dtoa_r+0x640>)
 80129c8:	f006 020f 	and.w	r2, r6, #15
 80129cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	ec51 0b18 	vmov	r0, r1, d8
 80129d8:	f7ed fe1e 	bl	8000618 <__aeabi_dmul>
 80129dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129e0:	1136      	asrs	r6, r6, #4
 80129e2:	2300      	movs	r3, #0
 80129e4:	2502      	movs	r5, #2
 80129e6:	2e00      	cmp	r6, #0
 80129e8:	d17e      	bne.n	8012ae8 <_dtoa_r+0x4d8>
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1d0      	bne.n	8012990 <_dtoa_r+0x380>
 80129ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f000 8084 	beq.w	8012b02 <_dtoa_r+0x4f2>
 80129fa:	4b96      	ldr	r3, [pc, #600]	; (8012c54 <_dtoa_r+0x644>)
 80129fc:	2200      	movs	r2, #0
 80129fe:	4640      	mov	r0, r8
 8012a00:	4649      	mov	r1, r9
 8012a02:	f7ee f87b 	bl	8000afc <__aeabi_dcmplt>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d07b      	beq.n	8012b02 <_dtoa_r+0x4f2>
 8012a0a:	9b04      	ldr	r3, [sp, #16]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d078      	beq.n	8012b02 <_dtoa_r+0x4f2>
 8012a10:	9b01      	ldr	r3, [sp, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	dd39      	ble.n	8012a8a <_dtoa_r+0x47a>
 8012a16:	4b90      	ldr	r3, [pc, #576]	; (8012c58 <_dtoa_r+0x648>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	4640      	mov	r0, r8
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	f7ed fdfb 	bl	8000618 <__aeabi_dmul>
 8012a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a26:	9e01      	ldr	r6, [sp, #4]
 8012a28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012a2c:	3501      	adds	r5, #1
 8012a2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012a32:	4628      	mov	r0, r5
 8012a34:	f7ed fd86 	bl	8000544 <__aeabi_i2d>
 8012a38:	4642      	mov	r2, r8
 8012a3a:	464b      	mov	r3, r9
 8012a3c:	f7ed fdec 	bl	8000618 <__aeabi_dmul>
 8012a40:	4b86      	ldr	r3, [pc, #536]	; (8012c5c <_dtoa_r+0x64c>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	f7ed fc32 	bl	80002ac <__adddf3>
 8012a48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a50:	9303      	str	r3, [sp, #12]
 8012a52:	2e00      	cmp	r6, #0
 8012a54:	d158      	bne.n	8012b08 <_dtoa_r+0x4f8>
 8012a56:	4b82      	ldr	r3, [pc, #520]	; (8012c60 <_dtoa_r+0x650>)
 8012a58:	2200      	movs	r2, #0
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	4649      	mov	r1, r9
 8012a5e:	f7ed fc23 	bl	80002a8 <__aeabi_dsub>
 8012a62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a66:	4680      	mov	r8, r0
 8012a68:	4689      	mov	r9, r1
 8012a6a:	f7ee f865 	bl	8000b38 <__aeabi_dcmpgt>
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f040 8296 	bne.w	8012fa0 <_dtoa_r+0x990>
 8012a74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012a78:	4640      	mov	r0, r8
 8012a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a7e:	4649      	mov	r1, r9
 8012a80:	f7ee f83c 	bl	8000afc <__aeabi_dcmplt>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	f040 8289 	bne.w	8012f9c <_dtoa_r+0x98c>
 8012a8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f2c0 814e 	blt.w	8012d32 <_dtoa_r+0x722>
 8012a96:	f1bb 0f0e 	cmp.w	fp, #14
 8012a9a:	f300 814a 	bgt.w	8012d32 <_dtoa_r+0x722>
 8012a9e:	4b6b      	ldr	r3, [pc, #428]	; (8012c4c <_dtoa_r+0x63c>)
 8012aa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f280 80dc 	bge.w	8012c68 <_dtoa_r+0x658>
 8012ab0:	9b04      	ldr	r3, [sp, #16]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	f300 80d8 	bgt.w	8012c68 <_dtoa_r+0x658>
 8012ab8:	f040 826f 	bne.w	8012f9a <_dtoa_r+0x98a>
 8012abc:	4b68      	ldr	r3, [pc, #416]	; (8012c60 <_dtoa_r+0x650>)
 8012abe:	2200      	movs	r2, #0
 8012ac0:	4640      	mov	r0, r8
 8012ac2:	4649      	mov	r1, r9
 8012ac4:	f7ed fda8 	bl	8000618 <__aeabi_dmul>
 8012ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012acc:	f7ee f82a 	bl	8000b24 <__aeabi_dcmpge>
 8012ad0:	9e04      	ldr	r6, [sp, #16]
 8012ad2:	4637      	mov	r7, r6
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f040 8245 	bne.w	8012f64 <_dtoa_r+0x954>
 8012ada:	9d00      	ldr	r5, [sp, #0]
 8012adc:	2331      	movs	r3, #49	; 0x31
 8012ade:	f805 3b01 	strb.w	r3, [r5], #1
 8012ae2:	f10b 0b01 	add.w	fp, fp, #1
 8012ae6:	e241      	b.n	8012f6c <_dtoa_r+0x95c>
 8012ae8:	07f2      	lsls	r2, r6, #31
 8012aea:	d505      	bpl.n	8012af8 <_dtoa_r+0x4e8>
 8012aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012af0:	f7ed fd92 	bl	8000618 <__aeabi_dmul>
 8012af4:	3501      	adds	r5, #1
 8012af6:	2301      	movs	r3, #1
 8012af8:	1076      	asrs	r6, r6, #1
 8012afa:	3708      	adds	r7, #8
 8012afc:	e773      	b.n	80129e6 <_dtoa_r+0x3d6>
 8012afe:	2502      	movs	r5, #2
 8012b00:	e775      	b.n	80129ee <_dtoa_r+0x3de>
 8012b02:	9e04      	ldr	r6, [sp, #16]
 8012b04:	465f      	mov	r7, fp
 8012b06:	e792      	b.n	8012a2e <_dtoa_r+0x41e>
 8012b08:	9900      	ldr	r1, [sp, #0]
 8012b0a:	4b50      	ldr	r3, [pc, #320]	; (8012c4c <_dtoa_r+0x63c>)
 8012b0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b10:	4431      	add	r1, r6
 8012b12:	9102      	str	r1, [sp, #8]
 8012b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b16:	eeb0 9a47 	vmov.f32	s18, s14
 8012b1a:	eef0 9a67 	vmov.f32	s19, s15
 8012b1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012b22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b26:	2900      	cmp	r1, #0
 8012b28:	d044      	beq.n	8012bb4 <_dtoa_r+0x5a4>
 8012b2a:	494e      	ldr	r1, [pc, #312]	; (8012c64 <_dtoa_r+0x654>)
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7ed fe9d 	bl	800086c <__aeabi_ddiv>
 8012b32:	ec53 2b19 	vmov	r2, r3, d9
 8012b36:	f7ed fbb7 	bl	80002a8 <__aeabi_dsub>
 8012b3a:	9d00      	ldr	r5, [sp, #0]
 8012b3c:	ec41 0b19 	vmov	d9, r0, r1
 8012b40:	4649      	mov	r1, r9
 8012b42:	4640      	mov	r0, r8
 8012b44:	f7ee f818 	bl	8000b78 <__aeabi_d2iz>
 8012b48:	4606      	mov	r6, r0
 8012b4a:	f7ed fcfb 	bl	8000544 <__aeabi_i2d>
 8012b4e:	4602      	mov	r2, r0
 8012b50:	460b      	mov	r3, r1
 8012b52:	4640      	mov	r0, r8
 8012b54:	4649      	mov	r1, r9
 8012b56:	f7ed fba7 	bl	80002a8 <__aeabi_dsub>
 8012b5a:	3630      	adds	r6, #48	; 0x30
 8012b5c:	f805 6b01 	strb.w	r6, [r5], #1
 8012b60:	ec53 2b19 	vmov	r2, r3, d9
 8012b64:	4680      	mov	r8, r0
 8012b66:	4689      	mov	r9, r1
 8012b68:	f7ed ffc8 	bl	8000afc <__aeabi_dcmplt>
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	d164      	bne.n	8012c3a <_dtoa_r+0x62a>
 8012b70:	4642      	mov	r2, r8
 8012b72:	464b      	mov	r3, r9
 8012b74:	4937      	ldr	r1, [pc, #220]	; (8012c54 <_dtoa_r+0x644>)
 8012b76:	2000      	movs	r0, #0
 8012b78:	f7ed fb96 	bl	80002a8 <__aeabi_dsub>
 8012b7c:	ec53 2b19 	vmov	r2, r3, d9
 8012b80:	f7ed ffbc 	bl	8000afc <__aeabi_dcmplt>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	f040 80b6 	bne.w	8012cf6 <_dtoa_r+0x6e6>
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	429d      	cmp	r5, r3
 8012b8e:	f43f af7c 	beq.w	8012a8a <_dtoa_r+0x47a>
 8012b92:	4b31      	ldr	r3, [pc, #196]	; (8012c58 <_dtoa_r+0x648>)
 8012b94:	ec51 0b19 	vmov	r0, r1, d9
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f7ed fd3d 	bl	8000618 <__aeabi_dmul>
 8012b9e:	4b2e      	ldr	r3, [pc, #184]	; (8012c58 <_dtoa_r+0x648>)
 8012ba0:	ec41 0b19 	vmov	d9, r0, r1
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	4640      	mov	r0, r8
 8012ba8:	4649      	mov	r1, r9
 8012baa:	f7ed fd35 	bl	8000618 <__aeabi_dmul>
 8012bae:	4680      	mov	r8, r0
 8012bb0:	4689      	mov	r9, r1
 8012bb2:	e7c5      	b.n	8012b40 <_dtoa_r+0x530>
 8012bb4:	ec51 0b17 	vmov	r0, r1, d7
 8012bb8:	f7ed fd2e 	bl	8000618 <__aeabi_dmul>
 8012bbc:	9b02      	ldr	r3, [sp, #8]
 8012bbe:	9d00      	ldr	r5, [sp, #0]
 8012bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bc2:	ec41 0b19 	vmov	d9, r0, r1
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	4640      	mov	r0, r8
 8012bca:	f7ed ffd5 	bl	8000b78 <__aeabi_d2iz>
 8012bce:	4606      	mov	r6, r0
 8012bd0:	f7ed fcb8 	bl	8000544 <__aeabi_i2d>
 8012bd4:	3630      	adds	r6, #48	; 0x30
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	460b      	mov	r3, r1
 8012bda:	4640      	mov	r0, r8
 8012bdc:	4649      	mov	r1, r9
 8012bde:	f7ed fb63 	bl	80002a8 <__aeabi_dsub>
 8012be2:	f805 6b01 	strb.w	r6, [r5], #1
 8012be6:	9b02      	ldr	r3, [sp, #8]
 8012be8:	429d      	cmp	r5, r3
 8012bea:	4680      	mov	r8, r0
 8012bec:	4689      	mov	r9, r1
 8012bee:	f04f 0200 	mov.w	r2, #0
 8012bf2:	d124      	bne.n	8012c3e <_dtoa_r+0x62e>
 8012bf4:	4b1b      	ldr	r3, [pc, #108]	; (8012c64 <_dtoa_r+0x654>)
 8012bf6:	ec51 0b19 	vmov	r0, r1, d9
 8012bfa:	f7ed fb57 	bl	80002ac <__adddf3>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	460b      	mov	r3, r1
 8012c02:	4640      	mov	r0, r8
 8012c04:	4649      	mov	r1, r9
 8012c06:	f7ed ff97 	bl	8000b38 <__aeabi_dcmpgt>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d173      	bne.n	8012cf6 <_dtoa_r+0x6e6>
 8012c0e:	ec53 2b19 	vmov	r2, r3, d9
 8012c12:	4914      	ldr	r1, [pc, #80]	; (8012c64 <_dtoa_r+0x654>)
 8012c14:	2000      	movs	r0, #0
 8012c16:	f7ed fb47 	bl	80002a8 <__aeabi_dsub>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	4640      	mov	r0, r8
 8012c20:	4649      	mov	r1, r9
 8012c22:	f7ed ff6b 	bl	8000afc <__aeabi_dcmplt>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	f43f af2f 	beq.w	8012a8a <_dtoa_r+0x47a>
 8012c2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012c2e:	1e6b      	subs	r3, r5, #1
 8012c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c36:	2b30      	cmp	r3, #48	; 0x30
 8012c38:	d0f8      	beq.n	8012c2c <_dtoa_r+0x61c>
 8012c3a:	46bb      	mov	fp, r7
 8012c3c:	e04a      	b.n	8012cd4 <_dtoa_r+0x6c4>
 8012c3e:	4b06      	ldr	r3, [pc, #24]	; (8012c58 <_dtoa_r+0x648>)
 8012c40:	f7ed fcea 	bl	8000618 <__aeabi_dmul>
 8012c44:	4680      	mov	r8, r0
 8012c46:	4689      	mov	r9, r1
 8012c48:	e7bd      	b.n	8012bc6 <_dtoa_r+0x5b6>
 8012c4a:	bf00      	nop
 8012c4c:	08015598 	.word	0x08015598
 8012c50:	08015570 	.word	0x08015570
 8012c54:	3ff00000 	.word	0x3ff00000
 8012c58:	40240000 	.word	0x40240000
 8012c5c:	401c0000 	.word	0x401c0000
 8012c60:	40140000 	.word	0x40140000
 8012c64:	3fe00000 	.word	0x3fe00000
 8012c68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012c6c:	9d00      	ldr	r5, [sp, #0]
 8012c6e:	4642      	mov	r2, r8
 8012c70:	464b      	mov	r3, r9
 8012c72:	4630      	mov	r0, r6
 8012c74:	4639      	mov	r1, r7
 8012c76:	f7ed fdf9 	bl	800086c <__aeabi_ddiv>
 8012c7a:	f7ed ff7d 	bl	8000b78 <__aeabi_d2iz>
 8012c7e:	9001      	str	r0, [sp, #4]
 8012c80:	f7ed fc60 	bl	8000544 <__aeabi_i2d>
 8012c84:	4642      	mov	r2, r8
 8012c86:	464b      	mov	r3, r9
 8012c88:	f7ed fcc6 	bl	8000618 <__aeabi_dmul>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ed fb08 	bl	80002a8 <__aeabi_dsub>
 8012c98:	9e01      	ldr	r6, [sp, #4]
 8012c9a:	9f04      	ldr	r7, [sp, #16]
 8012c9c:	3630      	adds	r6, #48	; 0x30
 8012c9e:	f805 6b01 	strb.w	r6, [r5], #1
 8012ca2:	9e00      	ldr	r6, [sp, #0]
 8012ca4:	1bae      	subs	r6, r5, r6
 8012ca6:	42b7      	cmp	r7, r6
 8012ca8:	4602      	mov	r2, r0
 8012caa:	460b      	mov	r3, r1
 8012cac:	d134      	bne.n	8012d18 <_dtoa_r+0x708>
 8012cae:	f7ed fafd 	bl	80002ac <__adddf3>
 8012cb2:	4642      	mov	r2, r8
 8012cb4:	464b      	mov	r3, r9
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	460f      	mov	r7, r1
 8012cba:	f7ed ff3d 	bl	8000b38 <__aeabi_dcmpgt>
 8012cbe:	b9c8      	cbnz	r0, 8012cf4 <_dtoa_r+0x6e4>
 8012cc0:	4642      	mov	r2, r8
 8012cc2:	464b      	mov	r3, r9
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	f7ed ff0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ccc:	b110      	cbz	r0, 8012cd4 <_dtoa_r+0x6c4>
 8012cce:	9b01      	ldr	r3, [sp, #4]
 8012cd0:	07db      	lsls	r3, r3, #31
 8012cd2:	d40f      	bmi.n	8012cf4 <_dtoa_r+0x6e4>
 8012cd4:	4651      	mov	r1, sl
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f000 fb5c 	bl	8013394 <_Bfree>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ce0:	702b      	strb	r3, [r5, #0]
 8012ce2:	f10b 0301 	add.w	r3, fp, #1
 8012ce6:	6013      	str	r3, [r2, #0]
 8012ce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f43f ace2 	beq.w	80126b4 <_dtoa_r+0xa4>
 8012cf0:	601d      	str	r5, [r3, #0]
 8012cf2:	e4df      	b.n	80126b4 <_dtoa_r+0xa4>
 8012cf4:	465f      	mov	r7, fp
 8012cf6:	462b      	mov	r3, r5
 8012cf8:	461d      	mov	r5, r3
 8012cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cfe:	2a39      	cmp	r2, #57	; 0x39
 8012d00:	d106      	bne.n	8012d10 <_dtoa_r+0x700>
 8012d02:	9a00      	ldr	r2, [sp, #0]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d1f7      	bne.n	8012cf8 <_dtoa_r+0x6e8>
 8012d08:	9900      	ldr	r1, [sp, #0]
 8012d0a:	2230      	movs	r2, #48	; 0x30
 8012d0c:	3701      	adds	r7, #1
 8012d0e:	700a      	strb	r2, [r1, #0]
 8012d10:	781a      	ldrb	r2, [r3, #0]
 8012d12:	3201      	adds	r2, #1
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	e790      	b.n	8012c3a <_dtoa_r+0x62a>
 8012d18:	4ba3      	ldr	r3, [pc, #652]	; (8012fa8 <_dtoa_r+0x998>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f7ed fc7c 	bl	8000618 <__aeabi_dmul>
 8012d20:	2200      	movs	r2, #0
 8012d22:	2300      	movs	r3, #0
 8012d24:	4606      	mov	r6, r0
 8012d26:	460f      	mov	r7, r1
 8012d28:	f7ed fede 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d09e      	beq.n	8012c6e <_dtoa_r+0x65e>
 8012d30:	e7d0      	b.n	8012cd4 <_dtoa_r+0x6c4>
 8012d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d34:	2a00      	cmp	r2, #0
 8012d36:	f000 80ca 	beq.w	8012ece <_dtoa_r+0x8be>
 8012d3a:	9a07      	ldr	r2, [sp, #28]
 8012d3c:	2a01      	cmp	r2, #1
 8012d3e:	f300 80ad 	bgt.w	8012e9c <_dtoa_r+0x88c>
 8012d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d44:	2a00      	cmp	r2, #0
 8012d46:	f000 80a5 	beq.w	8012e94 <_dtoa_r+0x884>
 8012d4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012d4e:	9e08      	ldr	r6, [sp, #32]
 8012d50:	9d05      	ldr	r5, [sp, #20]
 8012d52:	9a05      	ldr	r2, [sp, #20]
 8012d54:	441a      	add	r2, r3
 8012d56:	9205      	str	r2, [sp, #20]
 8012d58:	9a06      	ldr	r2, [sp, #24]
 8012d5a:	2101      	movs	r1, #1
 8012d5c:	441a      	add	r2, r3
 8012d5e:	4620      	mov	r0, r4
 8012d60:	9206      	str	r2, [sp, #24]
 8012d62:	f000 fbcd 	bl	8013500 <__i2b>
 8012d66:	4607      	mov	r7, r0
 8012d68:	b165      	cbz	r5, 8012d84 <_dtoa_r+0x774>
 8012d6a:	9b06      	ldr	r3, [sp, #24]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	dd09      	ble.n	8012d84 <_dtoa_r+0x774>
 8012d70:	42ab      	cmp	r3, r5
 8012d72:	9a05      	ldr	r2, [sp, #20]
 8012d74:	bfa8      	it	ge
 8012d76:	462b      	movge	r3, r5
 8012d78:	1ad2      	subs	r2, r2, r3
 8012d7a:	9205      	str	r2, [sp, #20]
 8012d7c:	9a06      	ldr	r2, [sp, #24]
 8012d7e:	1aed      	subs	r5, r5, r3
 8012d80:	1ad3      	subs	r3, r2, r3
 8012d82:	9306      	str	r3, [sp, #24]
 8012d84:	9b08      	ldr	r3, [sp, #32]
 8012d86:	b1f3      	cbz	r3, 8012dc6 <_dtoa_r+0x7b6>
 8012d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	f000 80a3 	beq.w	8012ed6 <_dtoa_r+0x8c6>
 8012d90:	2e00      	cmp	r6, #0
 8012d92:	dd10      	ble.n	8012db6 <_dtoa_r+0x7a6>
 8012d94:	4639      	mov	r1, r7
 8012d96:	4632      	mov	r2, r6
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 fc71 	bl	8013680 <__pow5mult>
 8012d9e:	4652      	mov	r2, sl
 8012da0:	4601      	mov	r1, r0
 8012da2:	4607      	mov	r7, r0
 8012da4:	4620      	mov	r0, r4
 8012da6:	f000 fbc1 	bl	801352c <__multiply>
 8012daa:	4651      	mov	r1, sl
 8012dac:	4680      	mov	r8, r0
 8012dae:	4620      	mov	r0, r4
 8012db0:	f000 faf0 	bl	8013394 <_Bfree>
 8012db4:	46c2      	mov	sl, r8
 8012db6:	9b08      	ldr	r3, [sp, #32]
 8012db8:	1b9a      	subs	r2, r3, r6
 8012dba:	d004      	beq.n	8012dc6 <_dtoa_r+0x7b6>
 8012dbc:	4651      	mov	r1, sl
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f000 fc5e 	bl	8013680 <__pow5mult>
 8012dc4:	4682      	mov	sl, r0
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 fb99 	bl	8013500 <__i2b>
 8012dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	4606      	mov	r6, r0
 8012dd4:	f340 8081 	ble.w	8012eda <_dtoa_r+0x8ca>
 8012dd8:	461a      	mov	r2, r3
 8012dda:	4601      	mov	r1, r0
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f000 fc4f 	bl	8013680 <__pow5mult>
 8012de2:	9b07      	ldr	r3, [sp, #28]
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	4606      	mov	r6, r0
 8012de8:	dd7a      	ble.n	8012ee0 <_dtoa_r+0x8d0>
 8012dea:	f04f 0800 	mov.w	r8, #0
 8012dee:	6933      	ldr	r3, [r6, #16]
 8012df0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012df4:	6918      	ldr	r0, [r3, #16]
 8012df6:	f000 fb35 	bl	8013464 <__hi0bits>
 8012dfa:	f1c0 0020 	rsb	r0, r0, #32
 8012dfe:	9b06      	ldr	r3, [sp, #24]
 8012e00:	4418      	add	r0, r3
 8012e02:	f010 001f 	ands.w	r0, r0, #31
 8012e06:	f000 8094 	beq.w	8012f32 <_dtoa_r+0x922>
 8012e0a:	f1c0 0320 	rsb	r3, r0, #32
 8012e0e:	2b04      	cmp	r3, #4
 8012e10:	f340 8085 	ble.w	8012f1e <_dtoa_r+0x90e>
 8012e14:	9b05      	ldr	r3, [sp, #20]
 8012e16:	f1c0 001c 	rsb	r0, r0, #28
 8012e1a:	4403      	add	r3, r0
 8012e1c:	9305      	str	r3, [sp, #20]
 8012e1e:	9b06      	ldr	r3, [sp, #24]
 8012e20:	4403      	add	r3, r0
 8012e22:	4405      	add	r5, r0
 8012e24:	9306      	str	r3, [sp, #24]
 8012e26:	9b05      	ldr	r3, [sp, #20]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	dd05      	ble.n	8012e38 <_dtoa_r+0x828>
 8012e2c:	4651      	mov	r1, sl
 8012e2e:	461a      	mov	r2, r3
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 fc7f 	bl	8013734 <__lshift>
 8012e36:	4682      	mov	sl, r0
 8012e38:	9b06      	ldr	r3, [sp, #24]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dd05      	ble.n	8012e4a <_dtoa_r+0x83a>
 8012e3e:	4631      	mov	r1, r6
 8012e40:	461a      	mov	r2, r3
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 fc76 	bl	8013734 <__lshift>
 8012e48:	4606      	mov	r6, r0
 8012e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d072      	beq.n	8012f36 <_dtoa_r+0x926>
 8012e50:	4631      	mov	r1, r6
 8012e52:	4650      	mov	r0, sl
 8012e54:	f000 fcda 	bl	801380c <__mcmp>
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	da6c      	bge.n	8012f36 <_dtoa_r+0x926>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	4651      	mov	r1, sl
 8012e60:	220a      	movs	r2, #10
 8012e62:	4620      	mov	r0, r4
 8012e64:	f000 fab8 	bl	80133d8 <__multadd>
 8012e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e6e:	4682      	mov	sl, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f000 81b0 	beq.w	80131d6 <_dtoa_r+0xbc6>
 8012e76:	2300      	movs	r3, #0
 8012e78:	4639      	mov	r1, r7
 8012e7a:	220a      	movs	r2, #10
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	f000 faab 	bl	80133d8 <__multadd>
 8012e82:	9b01      	ldr	r3, [sp, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	4607      	mov	r7, r0
 8012e88:	f300 8096 	bgt.w	8012fb8 <_dtoa_r+0x9a8>
 8012e8c:	9b07      	ldr	r3, [sp, #28]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	dc59      	bgt.n	8012f46 <_dtoa_r+0x936>
 8012e92:	e091      	b.n	8012fb8 <_dtoa_r+0x9a8>
 8012e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012e9a:	e758      	b.n	8012d4e <_dtoa_r+0x73e>
 8012e9c:	9b04      	ldr	r3, [sp, #16]
 8012e9e:	1e5e      	subs	r6, r3, #1
 8012ea0:	9b08      	ldr	r3, [sp, #32]
 8012ea2:	42b3      	cmp	r3, r6
 8012ea4:	bfbf      	itttt	lt
 8012ea6:	9b08      	ldrlt	r3, [sp, #32]
 8012ea8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012eaa:	9608      	strlt	r6, [sp, #32]
 8012eac:	1af3      	sublt	r3, r6, r3
 8012eae:	bfb4      	ite	lt
 8012eb0:	18d2      	addlt	r2, r2, r3
 8012eb2:	1b9e      	subge	r6, r3, r6
 8012eb4:	9b04      	ldr	r3, [sp, #16]
 8012eb6:	bfbc      	itt	lt
 8012eb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012eba:	2600      	movlt	r6, #0
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	bfb7      	itett	lt
 8012ec0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012ec4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012ec8:	1a9d      	sublt	r5, r3, r2
 8012eca:	2300      	movlt	r3, #0
 8012ecc:	e741      	b.n	8012d52 <_dtoa_r+0x742>
 8012ece:	9e08      	ldr	r6, [sp, #32]
 8012ed0:	9d05      	ldr	r5, [sp, #20]
 8012ed2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ed4:	e748      	b.n	8012d68 <_dtoa_r+0x758>
 8012ed6:	9a08      	ldr	r2, [sp, #32]
 8012ed8:	e770      	b.n	8012dbc <_dtoa_r+0x7ac>
 8012eda:	9b07      	ldr	r3, [sp, #28]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	dc19      	bgt.n	8012f14 <_dtoa_r+0x904>
 8012ee0:	9b02      	ldr	r3, [sp, #8]
 8012ee2:	b9bb      	cbnz	r3, 8012f14 <_dtoa_r+0x904>
 8012ee4:	9b03      	ldr	r3, [sp, #12]
 8012ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012eea:	b99b      	cbnz	r3, 8012f14 <_dtoa_r+0x904>
 8012eec:	9b03      	ldr	r3, [sp, #12]
 8012eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ef2:	0d1b      	lsrs	r3, r3, #20
 8012ef4:	051b      	lsls	r3, r3, #20
 8012ef6:	b183      	cbz	r3, 8012f1a <_dtoa_r+0x90a>
 8012ef8:	9b05      	ldr	r3, [sp, #20]
 8012efa:	3301      	adds	r3, #1
 8012efc:	9305      	str	r3, [sp, #20]
 8012efe:	9b06      	ldr	r3, [sp, #24]
 8012f00:	3301      	adds	r3, #1
 8012f02:	9306      	str	r3, [sp, #24]
 8012f04:	f04f 0801 	mov.w	r8, #1
 8012f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f47f af6f 	bne.w	8012dee <_dtoa_r+0x7de>
 8012f10:	2001      	movs	r0, #1
 8012f12:	e774      	b.n	8012dfe <_dtoa_r+0x7ee>
 8012f14:	f04f 0800 	mov.w	r8, #0
 8012f18:	e7f6      	b.n	8012f08 <_dtoa_r+0x8f8>
 8012f1a:	4698      	mov	r8, r3
 8012f1c:	e7f4      	b.n	8012f08 <_dtoa_r+0x8f8>
 8012f1e:	d082      	beq.n	8012e26 <_dtoa_r+0x816>
 8012f20:	9a05      	ldr	r2, [sp, #20]
 8012f22:	331c      	adds	r3, #28
 8012f24:	441a      	add	r2, r3
 8012f26:	9205      	str	r2, [sp, #20]
 8012f28:	9a06      	ldr	r2, [sp, #24]
 8012f2a:	441a      	add	r2, r3
 8012f2c:	441d      	add	r5, r3
 8012f2e:	9206      	str	r2, [sp, #24]
 8012f30:	e779      	b.n	8012e26 <_dtoa_r+0x816>
 8012f32:	4603      	mov	r3, r0
 8012f34:	e7f4      	b.n	8012f20 <_dtoa_r+0x910>
 8012f36:	9b04      	ldr	r3, [sp, #16]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	dc37      	bgt.n	8012fac <_dtoa_r+0x99c>
 8012f3c:	9b07      	ldr	r3, [sp, #28]
 8012f3e:	2b02      	cmp	r3, #2
 8012f40:	dd34      	ble.n	8012fac <_dtoa_r+0x99c>
 8012f42:	9b04      	ldr	r3, [sp, #16]
 8012f44:	9301      	str	r3, [sp, #4]
 8012f46:	9b01      	ldr	r3, [sp, #4]
 8012f48:	b963      	cbnz	r3, 8012f64 <_dtoa_r+0x954>
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	2205      	movs	r2, #5
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f000 fa42 	bl	80133d8 <__multadd>
 8012f54:	4601      	mov	r1, r0
 8012f56:	4606      	mov	r6, r0
 8012f58:	4650      	mov	r0, sl
 8012f5a:	f000 fc57 	bl	801380c <__mcmp>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f73f adbb 	bgt.w	8012ada <_dtoa_r+0x4ca>
 8012f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f66:	9d00      	ldr	r5, [sp, #0]
 8012f68:	ea6f 0b03 	mvn.w	fp, r3
 8012f6c:	f04f 0800 	mov.w	r8, #0
 8012f70:	4631      	mov	r1, r6
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 fa0e 	bl	8013394 <_Bfree>
 8012f78:	2f00      	cmp	r7, #0
 8012f7a:	f43f aeab 	beq.w	8012cd4 <_dtoa_r+0x6c4>
 8012f7e:	f1b8 0f00 	cmp.w	r8, #0
 8012f82:	d005      	beq.n	8012f90 <_dtoa_r+0x980>
 8012f84:	45b8      	cmp	r8, r7
 8012f86:	d003      	beq.n	8012f90 <_dtoa_r+0x980>
 8012f88:	4641      	mov	r1, r8
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	f000 fa02 	bl	8013394 <_Bfree>
 8012f90:	4639      	mov	r1, r7
 8012f92:	4620      	mov	r0, r4
 8012f94:	f000 f9fe 	bl	8013394 <_Bfree>
 8012f98:	e69c      	b.n	8012cd4 <_dtoa_r+0x6c4>
 8012f9a:	2600      	movs	r6, #0
 8012f9c:	4637      	mov	r7, r6
 8012f9e:	e7e1      	b.n	8012f64 <_dtoa_r+0x954>
 8012fa0:	46bb      	mov	fp, r7
 8012fa2:	4637      	mov	r7, r6
 8012fa4:	e599      	b.n	8012ada <_dtoa_r+0x4ca>
 8012fa6:	bf00      	nop
 8012fa8:	40240000 	.word	0x40240000
 8012fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f000 80c8 	beq.w	8013144 <_dtoa_r+0xb34>
 8012fb4:	9b04      	ldr	r3, [sp, #16]
 8012fb6:	9301      	str	r3, [sp, #4]
 8012fb8:	2d00      	cmp	r5, #0
 8012fba:	dd05      	ble.n	8012fc8 <_dtoa_r+0x9b8>
 8012fbc:	4639      	mov	r1, r7
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f000 fbb7 	bl	8013734 <__lshift>
 8012fc6:	4607      	mov	r7, r0
 8012fc8:	f1b8 0f00 	cmp.w	r8, #0
 8012fcc:	d05b      	beq.n	8013086 <_dtoa_r+0xa76>
 8012fce:	6879      	ldr	r1, [r7, #4]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f000 f99f 	bl	8013314 <_Balloc>
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	b928      	cbnz	r0, 8012fe6 <_dtoa_r+0x9d6>
 8012fda:	4b83      	ldr	r3, [pc, #524]	; (80131e8 <_dtoa_r+0xbd8>)
 8012fdc:	4602      	mov	r2, r0
 8012fde:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012fe2:	f7ff bb2e 	b.w	8012642 <_dtoa_r+0x32>
 8012fe6:	693a      	ldr	r2, [r7, #16]
 8012fe8:	3202      	adds	r2, #2
 8012fea:	0092      	lsls	r2, r2, #2
 8012fec:	f107 010c 	add.w	r1, r7, #12
 8012ff0:	300c      	adds	r0, #12
 8012ff2:	f7ff fa56 	bl	80124a2 <memcpy>
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	f000 fb9a 	bl	8013734 <__lshift>
 8013000:	9b00      	ldr	r3, [sp, #0]
 8013002:	3301      	adds	r3, #1
 8013004:	9304      	str	r3, [sp, #16]
 8013006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801300a:	4413      	add	r3, r2
 801300c:	9308      	str	r3, [sp, #32]
 801300e:	9b02      	ldr	r3, [sp, #8]
 8013010:	f003 0301 	and.w	r3, r3, #1
 8013014:	46b8      	mov	r8, r7
 8013016:	9306      	str	r3, [sp, #24]
 8013018:	4607      	mov	r7, r0
 801301a:	9b04      	ldr	r3, [sp, #16]
 801301c:	4631      	mov	r1, r6
 801301e:	3b01      	subs	r3, #1
 8013020:	4650      	mov	r0, sl
 8013022:	9301      	str	r3, [sp, #4]
 8013024:	f7ff fa6a 	bl	80124fc <quorem>
 8013028:	4641      	mov	r1, r8
 801302a:	9002      	str	r0, [sp, #8]
 801302c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013030:	4650      	mov	r0, sl
 8013032:	f000 fbeb 	bl	801380c <__mcmp>
 8013036:	463a      	mov	r2, r7
 8013038:	9005      	str	r0, [sp, #20]
 801303a:	4631      	mov	r1, r6
 801303c:	4620      	mov	r0, r4
 801303e:	f000 fc01 	bl	8013844 <__mdiff>
 8013042:	68c2      	ldr	r2, [r0, #12]
 8013044:	4605      	mov	r5, r0
 8013046:	bb02      	cbnz	r2, 801308a <_dtoa_r+0xa7a>
 8013048:	4601      	mov	r1, r0
 801304a:	4650      	mov	r0, sl
 801304c:	f000 fbde 	bl	801380c <__mcmp>
 8013050:	4602      	mov	r2, r0
 8013052:	4629      	mov	r1, r5
 8013054:	4620      	mov	r0, r4
 8013056:	9209      	str	r2, [sp, #36]	; 0x24
 8013058:	f000 f99c 	bl	8013394 <_Bfree>
 801305c:	9b07      	ldr	r3, [sp, #28]
 801305e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013060:	9d04      	ldr	r5, [sp, #16]
 8013062:	ea43 0102 	orr.w	r1, r3, r2
 8013066:	9b06      	ldr	r3, [sp, #24]
 8013068:	4319      	orrs	r1, r3
 801306a:	d110      	bne.n	801308e <_dtoa_r+0xa7e>
 801306c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013070:	d029      	beq.n	80130c6 <_dtoa_r+0xab6>
 8013072:	9b05      	ldr	r3, [sp, #20]
 8013074:	2b00      	cmp	r3, #0
 8013076:	dd02      	ble.n	801307e <_dtoa_r+0xa6e>
 8013078:	9b02      	ldr	r3, [sp, #8]
 801307a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801307e:	9b01      	ldr	r3, [sp, #4]
 8013080:	f883 9000 	strb.w	r9, [r3]
 8013084:	e774      	b.n	8012f70 <_dtoa_r+0x960>
 8013086:	4638      	mov	r0, r7
 8013088:	e7ba      	b.n	8013000 <_dtoa_r+0x9f0>
 801308a:	2201      	movs	r2, #1
 801308c:	e7e1      	b.n	8013052 <_dtoa_r+0xa42>
 801308e:	9b05      	ldr	r3, [sp, #20]
 8013090:	2b00      	cmp	r3, #0
 8013092:	db04      	blt.n	801309e <_dtoa_r+0xa8e>
 8013094:	9907      	ldr	r1, [sp, #28]
 8013096:	430b      	orrs	r3, r1
 8013098:	9906      	ldr	r1, [sp, #24]
 801309a:	430b      	orrs	r3, r1
 801309c:	d120      	bne.n	80130e0 <_dtoa_r+0xad0>
 801309e:	2a00      	cmp	r2, #0
 80130a0:	dded      	ble.n	801307e <_dtoa_r+0xa6e>
 80130a2:	4651      	mov	r1, sl
 80130a4:	2201      	movs	r2, #1
 80130a6:	4620      	mov	r0, r4
 80130a8:	f000 fb44 	bl	8013734 <__lshift>
 80130ac:	4631      	mov	r1, r6
 80130ae:	4682      	mov	sl, r0
 80130b0:	f000 fbac 	bl	801380c <__mcmp>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	dc03      	bgt.n	80130c0 <_dtoa_r+0xab0>
 80130b8:	d1e1      	bne.n	801307e <_dtoa_r+0xa6e>
 80130ba:	f019 0f01 	tst.w	r9, #1
 80130be:	d0de      	beq.n	801307e <_dtoa_r+0xa6e>
 80130c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80130c4:	d1d8      	bne.n	8013078 <_dtoa_r+0xa68>
 80130c6:	9a01      	ldr	r2, [sp, #4]
 80130c8:	2339      	movs	r3, #57	; 0x39
 80130ca:	7013      	strb	r3, [r2, #0]
 80130cc:	462b      	mov	r3, r5
 80130ce:	461d      	mov	r5, r3
 80130d0:	3b01      	subs	r3, #1
 80130d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80130d6:	2a39      	cmp	r2, #57	; 0x39
 80130d8:	d06c      	beq.n	80131b4 <_dtoa_r+0xba4>
 80130da:	3201      	adds	r2, #1
 80130dc:	701a      	strb	r2, [r3, #0]
 80130de:	e747      	b.n	8012f70 <_dtoa_r+0x960>
 80130e0:	2a00      	cmp	r2, #0
 80130e2:	dd07      	ble.n	80130f4 <_dtoa_r+0xae4>
 80130e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80130e8:	d0ed      	beq.n	80130c6 <_dtoa_r+0xab6>
 80130ea:	9a01      	ldr	r2, [sp, #4]
 80130ec:	f109 0301 	add.w	r3, r9, #1
 80130f0:	7013      	strb	r3, [r2, #0]
 80130f2:	e73d      	b.n	8012f70 <_dtoa_r+0x960>
 80130f4:	9b04      	ldr	r3, [sp, #16]
 80130f6:	9a08      	ldr	r2, [sp, #32]
 80130f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d043      	beq.n	8013188 <_dtoa_r+0xb78>
 8013100:	4651      	mov	r1, sl
 8013102:	2300      	movs	r3, #0
 8013104:	220a      	movs	r2, #10
 8013106:	4620      	mov	r0, r4
 8013108:	f000 f966 	bl	80133d8 <__multadd>
 801310c:	45b8      	cmp	r8, r7
 801310e:	4682      	mov	sl, r0
 8013110:	f04f 0300 	mov.w	r3, #0
 8013114:	f04f 020a 	mov.w	r2, #10
 8013118:	4641      	mov	r1, r8
 801311a:	4620      	mov	r0, r4
 801311c:	d107      	bne.n	801312e <_dtoa_r+0xb1e>
 801311e:	f000 f95b 	bl	80133d8 <__multadd>
 8013122:	4680      	mov	r8, r0
 8013124:	4607      	mov	r7, r0
 8013126:	9b04      	ldr	r3, [sp, #16]
 8013128:	3301      	adds	r3, #1
 801312a:	9304      	str	r3, [sp, #16]
 801312c:	e775      	b.n	801301a <_dtoa_r+0xa0a>
 801312e:	f000 f953 	bl	80133d8 <__multadd>
 8013132:	4639      	mov	r1, r7
 8013134:	4680      	mov	r8, r0
 8013136:	2300      	movs	r3, #0
 8013138:	220a      	movs	r2, #10
 801313a:	4620      	mov	r0, r4
 801313c:	f000 f94c 	bl	80133d8 <__multadd>
 8013140:	4607      	mov	r7, r0
 8013142:	e7f0      	b.n	8013126 <_dtoa_r+0xb16>
 8013144:	9b04      	ldr	r3, [sp, #16]
 8013146:	9301      	str	r3, [sp, #4]
 8013148:	9d00      	ldr	r5, [sp, #0]
 801314a:	4631      	mov	r1, r6
 801314c:	4650      	mov	r0, sl
 801314e:	f7ff f9d5 	bl	80124fc <quorem>
 8013152:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013156:	9b00      	ldr	r3, [sp, #0]
 8013158:	f805 9b01 	strb.w	r9, [r5], #1
 801315c:	1aea      	subs	r2, r5, r3
 801315e:	9b01      	ldr	r3, [sp, #4]
 8013160:	4293      	cmp	r3, r2
 8013162:	dd07      	ble.n	8013174 <_dtoa_r+0xb64>
 8013164:	4651      	mov	r1, sl
 8013166:	2300      	movs	r3, #0
 8013168:	220a      	movs	r2, #10
 801316a:	4620      	mov	r0, r4
 801316c:	f000 f934 	bl	80133d8 <__multadd>
 8013170:	4682      	mov	sl, r0
 8013172:	e7ea      	b.n	801314a <_dtoa_r+0xb3a>
 8013174:	9b01      	ldr	r3, [sp, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	bfc8      	it	gt
 801317a:	461d      	movgt	r5, r3
 801317c:	9b00      	ldr	r3, [sp, #0]
 801317e:	bfd8      	it	le
 8013180:	2501      	movle	r5, #1
 8013182:	441d      	add	r5, r3
 8013184:	f04f 0800 	mov.w	r8, #0
 8013188:	4651      	mov	r1, sl
 801318a:	2201      	movs	r2, #1
 801318c:	4620      	mov	r0, r4
 801318e:	f000 fad1 	bl	8013734 <__lshift>
 8013192:	4631      	mov	r1, r6
 8013194:	4682      	mov	sl, r0
 8013196:	f000 fb39 	bl	801380c <__mcmp>
 801319a:	2800      	cmp	r0, #0
 801319c:	dc96      	bgt.n	80130cc <_dtoa_r+0xabc>
 801319e:	d102      	bne.n	80131a6 <_dtoa_r+0xb96>
 80131a0:	f019 0f01 	tst.w	r9, #1
 80131a4:	d192      	bne.n	80130cc <_dtoa_r+0xabc>
 80131a6:	462b      	mov	r3, r5
 80131a8:	461d      	mov	r5, r3
 80131aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131ae:	2a30      	cmp	r2, #48	; 0x30
 80131b0:	d0fa      	beq.n	80131a8 <_dtoa_r+0xb98>
 80131b2:	e6dd      	b.n	8012f70 <_dtoa_r+0x960>
 80131b4:	9a00      	ldr	r2, [sp, #0]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d189      	bne.n	80130ce <_dtoa_r+0xabe>
 80131ba:	f10b 0b01 	add.w	fp, fp, #1
 80131be:	2331      	movs	r3, #49	; 0x31
 80131c0:	e796      	b.n	80130f0 <_dtoa_r+0xae0>
 80131c2:	4b0a      	ldr	r3, [pc, #40]	; (80131ec <_dtoa_r+0xbdc>)
 80131c4:	f7ff ba99 	b.w	80126fa <_dtoa_r+0xea>
 80131c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f47f aa6d 	bne.w	80126aa <_dtoa_r+0x9a>
 80131d0:	4b07      	ldr	r3, [pc, #28]	; (80131f0 <_dtoa_r+0xbe0>)
 80131d2:	f7ff ba92 	b.w	80126fa <_dtoa_r+0xea>
 80131d6:	9b01      	ldr	r3, [sp, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	dcb5      	bgt.n	8013148 <_dtoa_r+0xb38>
 80131dc:	9b07      	ldr	r3, [sp, #28]
 80131de:	2b02      	cmp	r3, #2
 80131e0:	f73f aeb1 	bgt.w	8012f46 <_dtoa_r+0x936>
 80131e4:	e7b0      	b.n	8013148 <_dtoa_r+0xb38>
 80131e6:	bf00      	nop
 80131e8:	080154ff 	.word	0x080154ff
 80131ec:	0801569d 	.word	0x0801569d
 80131f0:	0801549a 	.word	0x0801549a

080131f4 <_free_r>:
 80131f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131f6:	2900      	cmp	r1, #0
 80131f8:	d044      	beq.n	8013284 <_free_r+0x90>
 80131fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131fe:	9001      	str	r0, [sp, #4]
 8013200:	2b00      	cmp	r3, #0
 8013202:	f1a1 0404 	sub.w	r4, r1, #4
 8013206:	bfb8      	it	lt
 8013208:	18e4      	addlt	r4, r4, r3
 801320a:	f7fd fe53 	bl	8010eb4 <__malloc_lock>
 801320e:	4a1e      	ldr	r2, [pc, #120]	; (8013288 <_free_r+0x94>)
 8013210:	9801      	ldr	r0, [sp, #4]
 8013212:	6813      	ldr	r3, [r2, #0]
 8013214:	b933      	cbnz	r3, 8013224 <_free_r+0x30>
 8013216:	6063      	str	r3, [r4, #4]
 8013218:	6014      	str	r4, [r2, #0]
 801321a:	b003      	add	sp, #12
 801321c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013220:	f7fd be4e 	b.w	8010ec0 <__malloc_unlock>
 8013224:	42a3      	cmp	r3, r4
 8013226:	d908      	bls.n	801323a <_free_r+0x46>
 8013228:	6825      	ldr	r5, [r4, #0]
 801322a:	1961      	adds	r1, r4, r5
 801322c:	428b      	cmp	r3, r1
 801322e:	bf01      	itttt	eq
 8013230:	6819      	ldreq	r1, [r3, #0]
 8013232:	685b      	ldreq	r3, [r3, #4]
 8013234:	1949      	addeq	r1, r1, r5
 8013236:	6021      	streq	r1, [r4, #0]
 8013238:	e7ed      	b.n	8013216 <_free_r+0x22>
 801323a:	461a      	mov	r2, r3
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	b10b      	cbz	r3, 8013244 <_free_r+0x50>
 8013240:	42a3      	cmp	r3, r4
 8013242:	d9fa      	bls.n	801323a <_free_r+0x46>
 8013244:	6811      	ldr	r1, [r2, #0]
 8013246:	1855      	adds	r5, r2, r1
 8013248:	42a5      	cmp	r5, r4
 801324a:	d10b      	bne.n	8013264 <_free_r+0x70>
 801324c:	6824      	ldr	r4, [r4, #0]
 801324e:	4421      	add	r1, r4
 8013250:	1854      	adds	r4, r2, r1
 8013252:	42a3      	cmp	r3, r4
 8013254:	6011      	str	r1, [r2, #0]
 8013256:	d1e0      	bne.n	801321a <_free_r+0x26>
 8013258:	681c      	ldr	r4, [r3, #0]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	6053      	str	r3, [r2, #4]
 801325e:	440c      	add	r4, r1
 8013260:	6014      	str	r4, [r2, #0]
 8013262:	e7da      	b.n	801321a <_free_r+0x26>
 8013264:	d902      	bls.n	801326c <_free_r+0x78>
 8013266:	230c      	movs	r3, #12
 8013268:	6003      	str	r3, [r0, #0]
 801326a:	e7d6      	b.n	801321a <_free_r+0x26>
 801326c:	6825      	ldr	r5, [r4, #0]
 801326e:	1961      	adds	r1, r4, r5
 8013270:	428b      	cmp	r3, r1
 8013272:	bf04      	itt	eq
 8013274:	6819      	ldreq	r1, [r3, #0]
 8013276:	685b      	ldreq	r3, [r3, #4]
 8013278:	6063      	str	r3, [r4, #4]
 801327a:	bf04      	itt	eq
 801327c:	1949      	addeq	r1, r1, r5
 801327e:	6021      	streq	r1, [r4, #0]
 8013280:	6054      	str	r4, [r2, #4]
 8013282:	e7ca      	b.n	801321a <_free_r+0x26>
 8013284:	b003      	add	sp, #12
 8013286:	bd30      	pop	{r4, r5, pc}
 8013288:	20001f04 	.word	0x20001f04

0801328c <_findenv_r>:
 801328c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013290:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013300 <_findenv_r+0x74>
 8013294:	4607      	mov	r7, r0
 8013296:	4689      	mov	r9, r1
 8013298:	4616      	mov	r6, r2
 801329a:	f000 ff63 	bl	8014164 <__env_lock>
 801329e:	f8da 4000 	ldr.w	r4, [sl]
 80132a2:	b134      	cbz	r4, 80132b2 <_findenv_r+0x26>
 80132a4:	464b      	mov	r3, r9
 80132a6:	4698      	mov	r8, r3
 80132a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ac:	b13a      	cbz	r2, 80132be <_findenv_r+0x32>
 80132ae:	2a3d      	cmp	r2, #61	; 0x3d
 80132b0:	d1f9      	bne.n	80132a6 <_findenv_r+0x1a>
 80132b2:	4638      	mov	r0, r7
 80132b4:	f000 ff5c 	bl	8014170 <__env_unlock>
 80132b8:	2000      	movs	r0, #0
 80132ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132be:	eba8 0809 	sub.w	r8, r8, r9
 80132c2:	46a3      	mov	fp, r4
 80132c4:	f854 0b04 	ldr.w	r0, [r4], #4
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d0f2      	beq.n	80132b2 <_findenv_r+0x26>
 80132cc:	4642      	mov	r2, r8
 80132ce:	4649      	mov	r1, r9
 80132d0:	f7fe fc57 	bl	8011b82 <strncmp>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	d1f4      	bne.n	80132c2 <_findenv_r+0x36>
 80132d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80132dc:	eb03 0508 	add.w	r5, r3, r8
 80132e0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80132e4:	2b3d      	cmp	r3, #61	; 0x3d
 80132e6:	d1ec      	bne.n	80132c2 <_findenv_r+0x36>
 80132e8:	f8da 3000 	ldr.w	r3, [sl]
 80132ec:	ebab 0303 	sub.w	r3, fp, r3
 80132f0:	109b      	asrs	r3, r3, #2
 80132f2:	4638      	mov	r0, r7
 80132f4:	6033      	str	r3, [r6, #0]
 80132f6:	f000 ff3b 	bl	8014170 <__env_unlock>
 80132fa:	1c68      	adds	r0, r5, #1
 80132fc:	e7dd      	b.n	80132ba <_findenv_r+0x2e>
 80132fe:	bf00      	nop
 8013300:	2000000c 	.word	0x2000000c

08013304 <_getenv_r>:
 8013304:	b507      	push	{r0, r1, r2, lr}
 8013306:	aa01      	add	r2, sp, #4
 8013308:	f7ff ffc0 	bl	801328c <_findenv_r>
 801330c:	b003      	add	sp, #12
 801330e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013314 <_Balloc>:
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	69c6      	ldr	r6, [r0, #28]
 8013318:	4604      	mov	r4, r0
 801331a:	460d      	mov	r5, r1
 801331c:	b976      	cbnz	r6, 801333c <_Balloc+0x28>
 801331e:	2010      	movs	r0, #16
 8013320:	f7fd fd18 	bl	8010d54 <malloc>
 8013324:	4602      	mov	r2, r0
 8013326:	61e0      	str	r0, [r4, #28]
 8013328:	b920      	cbnz	r0, 8013334 <_Balloc+0x20>
 801332a:	4b18      	ldr	r3, [pc, #96]	; (801338c <_Balloc+0x78>)
 801332c:	4818      	ldr	r0, [pc, #96]	; (8013390 <_Balloc+0x7c>)
 801332e:	216b      	movs	r1, #107	; 0x6b
 8013330:	f7ff f8c6 	bl	80124c0 <__assert_func>
 8013334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013338:	6006      	str	r6, [r0, #0]
 801333a:	60c6      	str	r6, [r0, #12]
 801333c:	69e6      	ldr	r6, [r4, #28]
 801333e:	68f3      	ldr	r3, [r6, #12]
 8013340:	b183      	cbz	r3, 8013364 <_Balloc+0x50>
 8013342:	69e3      	ldr	r3, [r4, #28]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801334a:	b9b8      	cbnz	r0, 801337c <_Balloc+0x68>
 801334c:	2101      	movs	r1, #1
 801334e:	fa01 f605 	lsl.w	r6, r1, r5
 8013352:	1d72      	adds	r2, r6, #5
 8013354:	0092      	lsls	r2, r2, #2
 8013356:	4620      	mov	r0, r4
 8013358:	f000 feed 	bl	8014136 <_calloc_r>
 801335c:	b160      	cbz	r0, 8013378 <_Balloc+0x64>
 801335e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013362:	e00e      	b.n	8013382 <_Balloc+0x6e>
 8013364:	2221      	movs	r2, #33	; 0x21
 8013366:	2104      	movs	r1, #4
 8013368:	4620      	mov	r0, r4
 801336a:	f000 fee4 	bl	8014136 <_calloc_r>
 801336e:	69e3      	ldr	r3, [r4, #28]
 8013370:	60f0      	str	r0, [r6, #12]
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d1e4      	bne.n	8013342 <_Balloc+0x2e>
 8013378:	2000      	movs	r0, #0
 801337a:	bd70      	pop	{r4, r5, r6, pc}
 801337c:	6802      	ldr	r2, [r0, #0]
 801337e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013382:	2300      	movs	r3, #0
 8013384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013388:	e7f7      	b.n	801337a <_Balloc+0x66>
 801338a:	bf00      	nop
 801338c:	0801533f 	.word	0x0801533f
 8013390:	08015510 	.word	0x08015510

08013394 <_Bfree>:
 8013394:	b570      	push	{r4, r5, r6, lr}
 8013396:	69c6      	ldr	r6, [r0, #28]
 8013398:	4605      	mov	r5, r0
 801339a:	460c      	mov	r4, r1
 801339c:	b976      	cbnz	r6, 80133bc <_Bfree+0x28>
 801339e:	2010      	movs	r0, #16
 80133a0:	f7fd fcd8 	bl	8010d54 <malloc>
 80133a4:	4602      	mov	r2, r0
 80133a6:	61e8      	str	r0, [r5, #28]
 80133a8:	b920      	cbnz	r0, 80133b4 <_Bfree+0x20>
 80133aa:	4b09      	ldr	r3, [pc, #36]	; (80133d0 <_Bfree+0x3c>)
 80133ac:	4809      	ldr	r0, [pc, #36]	; (80133d4 <_Bfree+0x40>)
 80133ae:	218f      	movs	r1, #143	; 0x8f
 80133b0:	f7ff f886 	bl	80124c0 <__assert_func>
 80133b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133b8:	6006      	str	r6, [r0, #0]
 80133ba:	60c6      	str	r6, [r0, #12]
 80133bc:	b13c      	cbz	r4, 80133ce <_Bfree+0x3a>
 80133be:	69eb      	ldr	r3, [r5, #28]
 80133c0:	6862      	ldr	r2, [r4, #4]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133c8:	6021      	str	r1, [r4, #0]
 80133ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	0801533f 	.word	0x0801533f
 80133d4:	08015510 	.word	0x08015510

080133d8 <__multadd>:
 80133d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133dc:	690d      	ldr	r5, [r1, #16]
 80133de:	4607      	mov	r7, r0
 80133e0:	460c      	mov	r4, r1
 80133e2:	461e      	mov	r6, r3
 80133e4:	f101 0c14 	add.w	ip, r1, #20
 80133e8:	2000      	movs	r0, #0
 80133ea:	f8dc 3000 	ldr.w	r3, [ip]
 80133ee:	b299      	uxth	r1, r3
 80133f0:	fb02 6101 	mla	r1, r2, r1, r6
 80133f4:	0c1e      	lsrs	r6, r3, #16
 80133f6:	0c0b      	lsrs	r3, r1, #16
 80133f8:	fb02 3306 	mla	r3, r2, r6, r3
 80133fc:	b289      	uxth	r1, r1
 80133fe:	3001      	adds	r0, #1
 8013400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013404:	4285      	cmp	r5, r0
 8013406:	f84c 1b04 	str.w	r1, [ip], #4
 801340a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801340e:	dcec      	bgt.n	80133ea <__multadd+0x12>
 8013410:	b30e      	cbz	r6, 8013456 <__multadd+0x7e>
 8013412:	68a3      	ldr	r3, [r4, #8]
 8013414:	42ab      	cmp	r3, r5
 8013416:	dc19      	bgt.n	801344c <__multadd+0x74>
 8013418:	6861      	ldr	r1, [r4, #4]
 801341a:	4638      	mov	r0, r7
 801341c:	3101      	adds	r1, #1
 801341e:	f7ff ff79 	bl	8013314 <_Balloc>
 8013422:	4680      	mov	r8, r0
 8013424:	b928      	cbnz	r0, 8013432 <__multadd+0x5a>
 8013426:	4602      	mov	r2, r0
 8013428:	4b0c      	ldr	r3, [pc, #48]	; (801345c <__multadd+0x84>)
 801342a:	480d      	ldr	r0, [pc, #52]	; (8013460 <__multadd+0x88>)
 801342c:	21ba      	movs	r1, #186	; 0xba
 801342e:	f7ff f847 	bl	80124c0 <__assert_func>
 8013432:	6922      	ldr	r2, [r4, #16]
 8013434:	3202      	adds	r2, #2
 8013436:	f104 010c 	add.w	r1, r4, #12
 801343a:	0092      	lsls	r2, r2, #2
 801343c:	300c      	adds	r0, #12
 801343e:	f7ff f830 	bl	80124a2 <memcpy>
 8013442:	4621      	mov	r1, r4
 8013444:	4638      	mov	r0, r7
 8013446:	f7ff ffa5 	bl	8013394 <_Bfree>
 801344a:	4644      	mov	r4, r8
 801344c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013450:	3501      	adds	r5, #1
 8013452:	615e      	str	r6, [r3, #20]
 8013454:	6125      	str	r5, [r4, #16]
 8013456:	4620      	mov	r0, r4
 8013458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345c:	080154ff 	.word	0x080154ff
 8013460:	08015510 	.word	0x08015510

08013464 <__hi0bits>:
 8013464:	0c03      	lsrs	r3, r0, #16
 8013466:	041b      	lsls	r3, r3, #16
 8013468:	b9d3      	cbnz	r3, 80134a0 <__hi0bits+0x3c>
 801346a:	0400      	lsls	r0, r0, #16
 801346c:	2310      	movs	r3, #16
 801346e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013472:	bf04      	itt	eq
 8013474:	0200      	lsleq	r0, r0, #8
 8013476:	3308      	addeq	r3, #8
 8013478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801347c:	bf04      	itt	eq
 801347e:	0100      	lsleq	r0, r0, #4
 8013480:	3304      	addeq	r3, #4
 8013482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013486:	bf04      	itt	eq
 8013488:	0080      	lsleq	r0, r0, #2
 801348a:	3302      	addeq	r3, #2
 801348c:	2800      	cmp	r0, #0
 801348e:	db05      	blt.n	801349c <__hi0bits+0x38>
 8013490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013494:	f103 0301 	add.w	r3, r3, #1
 8013498:	bf08      	it	eq
 801349a:	2320      	moveq	r3, #32
 801349c:	4618      	mov	r0, r3
 801349e:	4770      	bx	lr
 80134a0:	2300      	movs	r3, #0
 80134a2:	e7e4      	b.n	801346e <__hi0bits+0xa>

080134a4 <__lo0bits>:
 80134a4:	6803      	ldr	r3, [r0, #0]
 80134a6:	f013 0207 	ands.w	r2, r3, #7
 80134aa:	d00c      	beq.n	80134c6 <__lo0bits+0x22>
 80134ac:	07d9      	lsls	r1, r3, #31
 80134ae:	d422      	bmi.n	80134f6 <__lo0bits+0x52>
 80134b0:	079a      	lsls	r2, r3, #30
 80134b2:	bf49      	itett	mi
 80134b4:	085b      	lsrmi	r3, r3, #1
 80134b6:	089b      	lsrpl	r3, r3, #2
 80134b8:	6003      	strmi	r3, [r0, #0]
 80134ba:	2201      	movmi	r2, #1
 80134bc:	bf5c      	itt	pl
 80134be:	6003      	strpl	r3, [r0, #0]
 80134c0:	2202      	movpl	r2, #2
 80134c2:	4610      	mov	r0, r2
 80134c4:	4770      	bx	lr
 80134c6:	b299      	uxth	r1, r3
 80134c8:	b909      	cbnz	r1, 80134ce <__lo0bits+0x2a>
 80134ca:	0c1b      	lsrs	r3, r3, #16
 80134cc:	2210      	movs	r2, #16
 80134ce:	b2d9      	uxtb	r1, r3
 80134d0:	b909      	cbnz	r1, 80134d6 <__lo0bits+0x32>
 80134d2:	3208      	adds	r2, #8
 80134d4:	0a1b      	lsrs	r3, r3, #8
 80134d6:	0719      	lsls	r1, r3, #28
 80134d8:	bf04      	itt	eq
 80134da:	091b      	lsreq	r3, r3, #4
 80134dc:	3204      	addeq	r2, #4
 80134de:	0799      	lsls	r1, r3, #30
 80134e0:	bf04      	itt	eq
 80134e2:	089b      	lsreq	r3, r3, #2
 80134e4:	3202      	addeq	r2, #2
 80134e6:	07d9      	lsls	r1, r3, #31
 80134e8:	d403      	bmi.n	80134f2 <__lo0bits+0x4e>
 80134ea:	085b      	lsrs	r3, r3, #1
 80134ec:	f102 0201 	add.w	r2, r2, #1
 80134f0:	d003      	beq.n	80134fa <__lo0bits+0x56>
 80134f2:	6003      	str	r3, [r0, #0]
 80134f4:	e7e5      	b.n	80134c2 <__lo0bits+0x1e>
 80134f6:	2200      	movs	r2, #0
 80134f8:	e7e3      	b.n	80134c2 <__lo0bits+0x1e>
 80134fa:	2220      	movs	r2, #32
 80134fc:	e7e1      	b.n	80134c2 <__lo0bits+0x1e>
	...

08013500 <__i2b>:
 8013500:	b510      	push	{r4, lr}
 8013502:	460c      	mov	r4, r1
 8013504:	2101      	movs	r1, #1
 8013506:	f7ff ff05 	bl	8013314 <_Balloc>
 801350a:	4602      	mov	r2, r0
 801350c:	b928      	cbnz	r0, 801351a <__i2b+0x1a>
 801350e:	4b05      	ldr	r3, [pc, #20]	; (8013524 <__i2b+0x24>)
 8013510:	4805      	ldr	r0, [pc, #20]	; (8013528 <__i2b+0x28>)
 8013512:	f240 1145 	movw	r1, #325	; 0x145
 8013516:	f7fe ffd3 	bl	80124c0 <__assert_func>
 801351a:	2301      	movs	r3, #1
 801351c:	6144      	str	r4, [r0, #20]
 801351e:	6103      	str	r3, [r0, #16]
 8013520:	bd10      	pop	{r4, pc}
 8013522:	bf00      	nop
 8013524:	080154ff 	.word	0x080154ff
 8013528:	08015510 	.word	0x08015510

0801352c <__multiply>:
 801352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013530:	4691      	mov	r9, r2
 8013532:	690a      	ldr	r2, [r1, #16]
 8013534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013538:	429a      	cmp	r2, r3
 801353a:	bfb8      	it	lt
 801353c:	460b      	movlt	r3, r1
 801353e:	460c      	mov	r4, r1
 8013540:	bfbc      	itt	lt
 8013542:	464c      	movlt	r4, r9
 8013544:	4699      	movlt	r9, r3
 8013546:	6927      	ldr	r7, [r4, #16]
 8013548:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	6861      	ldr	r1, [r4, #4]
 8013550:	eb07 060a 	add.w	r6, r7, sl
 8013554:	42b3      	cmp	r3, r6
 8013556:	b085      	sub	sp, #20
 8013558:	bfb8      	it	lt
 801355a:	3101      	addlt	r1, #1
 801355c:	f7ff feda 	bl	8013314 <_Balloc>
 8013560:	b930      	cbnz	r0, 8013570 <__multiply+0x44>
 8013562:	4602      	mov	r2, r0
 8013564:	4b44      	ldr	r3, [pc, #272]	; (8013678 <__multiply+0x14c>)
 8013566:	4845      	ldr	r0, [pc, #276]	; (801367c <__multiply+0x150>)
 8013568:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801356c:	f7fe ffa8 	bl	80124c0 <__assert_func>
 8013570:	f100 0514 	add.w	r5, r0, #20
 8013574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013578:	462b      	mov	r3, r5
 801357a:	2200      	movs	r2, #0
 801357c:	4543      	cmp	r3, r8
 801357e:	d321      	bcc.n	80135c4 <__multiply+0x98>
 8013580:	f104 0314 	add.w	r3, r4, #20
 8013584:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013588:	f109 0314 	add.w	r3, r9, #20
 801358c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013590:	9202      	str	r2, [sp, #8]
 8013592:	1b3a      	subs	r2, r7, r4
 8013594:	3a15      	subs	r2, #21
 8013596:	f022 0203 	bic.w	r2, r2, #3
 801359a:	3204      	adds	r2, #4
 801359c:	f104 0115 	add.w	r1, r4, #21
 80135a0:	428f      	cmp	r7, r1
 80135a2:	bf38      	it	cc
 80135a4:	2204      	movcc	r2, #4
 80135a6:	9201      	str	r2, [sp, #4]
 80135a8:	9a02      	ldr	r2, [sp, #8]
 80135aa:	9303      	str	r3, [sp, #12]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d80c      	bhi.n	80135ca <__multiply+0x9e>
 80135b0:	2e00      	cmp	r6, #0
 80135b2:	dd03      	ble.n	80135bc <__multiply+0x90>
 80135b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d05b      	beq.n	8013674 <__multiply+0x148>
 80135bc:	6106      	str	r6, [r0, #16]
 80135be:	b005      	add	sp, #20
 80135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c4:	f843 2b04 	str.w	r2, [r3], #4
 80135c8:	e7d8      	b.n	801357c <__multiply+0x50>
 80135ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80135ce:	f1ba 0f00 	cmp.w	sl, #0
 80135d2:	d024      	beq.n	801361e <__multiply+0xf2>
 80135d4:	f104 0e14 	add.w	lr, r4, #20
 80135d8:	46a9      	mov	r9, r5
 80135da:	f04f 0c00 	mov.w	ip, #0
 80135de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80135e2:	f8d9 1000 	ldr.w	r1, [r9]
 80135e6:	fa1f fb82 	uxth.w	fp, r2
 80135ea:	b289      	uxth	r1, r1
 80135ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80135f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80135f4:	f8d9 2000 	ldr.w	r2, [r9]
 80135f8:	4461      	add	r1, ip
 80135fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8013602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013606:	b289      	uxth	r1, r1
 8013608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801360c:	4577      	cmp	r7, lr
 801360e:	f849 1b04 	str.w	r1, [r9], #4
 8013612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013616:	d8e2      	bhi.n	80135de <__multiply+0xb2>
 8013618:	9a01      	ldr	r2, [sp, #4]
 801361a:	f845 c002 	str.w	ip, [r5, r2]
 801361e:	9a03      	ldr	r2, [sp, #12]
 8013620:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013624:	3304      	adds	r3, #4
 8013626:	f1b9 0f00 	cmp.w	r9, #0
 801362a:	d021      	beq.n	8013670 <__multiply+0x144>
 801362c:	6829      	ldr	r1, [r5, #0]
 801362e:	f104 0c14 	add.w	ip, r4, #20
 8013632:	46ae      	mov	lr, r5
 8013634:	f04f 0a00 	mov.w	sl, #0
 8013638:	f8bc b000 	ldrh.w	fp, [ip]
 801363c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013640:	fb09 220b 	mla	r2, r9, fp, r2
 8013644:	4452      	add	r2, sl
 8013646:	b289      	uxth	r1, r1
 8013648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801364c:	f84e 1b04 	str.w	r1, [lr], #4
 8013650:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013658:	f8be 1000 	ldrh.w	r1, [lr]
 801365c:	fb09 110a 	mla	r1, r9, sl, r1
 8013660:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013664:	4567      	cmp	r7, ip
 8013666:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801366a:	d8e5      	bhi.n	8013638 <__multiply+0x10c>
 801366c:	9a01      	ldr	r2, [sp, #4]
 801366e:	50a9      	str	r1, [r5, r2]
 8013670:	3504      	adds	r5, #4
 8013672:	e799      	b.n	80135a8 <__multiply+0x7c>
 8013674:	3e01      	subs	r6, #1
 8013676:	e79b      	b.n	80135b0 <__multiply+0x84>
 8013678:	080154ff 	.word	0x080154ff
 801367c:	08015510 	.word	0x08015510

08013680 <__pow5mult>:
 8013680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013684:	4615      	mov	r5, r2
 8013686:	f012 0203 	ands.w	r2, r2, #3
 801368a:	4606      	mov	r6, r0
 801368c:	460f      	mov	r7, r1
 801368e:	d007      	beq.n	80136a0 <__pow5mult+0x20>
 8013690:	4c25      	ldr	r4, [pc, #148]	; (8013728 <__pow5mult+0xa8>)
 8013692:	3a01      	subs	r2, #1
 8013694:	2300      	movs	r3, #0
 8013696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801369a:	f7ff fe9d 	bl	80133d8 <__multadd>
 801369e:	4607      	mov	r7, r0
 80136a0:	10ad      	asrs	r5, r5, #2
 80136a2:	d03d      	beq.n	8013720 <__pow5mult+0xa0>
 80136a4:	69f4      	ldr	r4, [r6, #28]
 80136a6:	b97c      	cbnz	r4, 80136c8 <__pow5mult+0x48>
 80136a8:	2010      	movs	r0, #16
 80136aa:	f7fd fb53 	bl	8010d54 <malloc>
 80136ae:	4602      	mov	r2, r0
 80136b0:	61f0      	str	r0, [r6, #28]
 80136b2:	b928      	cbnz	r0, 80136c0 <__pow5mult+0x40>
 80136b4:	4b1d      	ldr	r3, [pc, #116]	; (801372c <__pow5mult+0xac>)
 80136b6:	481e      	ldr	r0, [pc, #120]	; (8013730 <__pow5mult+0xb0>)
 80136b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80136bc:	f7fe ff00 	bl	80124c0 <__assert_func>
 80136c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136c4:	6004      	str	r4, [r0, #0]
 80136c6:	60c4      	str	r4, [r0, #12]
 80136c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80136cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136d0:	b94c      	cbnz	r4, 80136e6 <__pow5mult+0x66>
 80136d2:	f240 2171 	movw	r1, #625	; 0x271
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7ff ff12 	bl	8013500 <__i2b>
 80136dc:	2300      	movs	r3, #0
 80136de:	f8c8 0008 	str.w	r0, [r8, #8]
 80136e2:	4604      	mov	r4, r0
 80136e4:	6003      	str	r3, [r0, #0]
 80136e6:	f04f 0900 	mov.w	r9, #0
 80136ea:	07eb      	lsls	r3, r5, #31
 80136ec:	d50a      	bpl.n	8013704 <__pow5mult+0x84>
 80136ee:	4639      	mov	r1, r7
 80136f0:	4622      	mov	r2, r4
 80136f2:	4630      	mov	r0, r6
 80136f4:	f7ff ff1a 	bl	801352c <__multiply>
 80136f8:	4639      	mov	r1, r7
 80136fa:	4680      	mov	r8, r0
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7ff fe49 	bl	8013394 <_Bfree>
 8013702:	4647      	mov	r7, r8
 8013704:	106d      	asrs	r5, r5, #1
 8013706:	d00b      	beq.n	8013720 <__pow5mult+0xa0>
 8013708:	6820      	ldr	r0, [r4, #0]
 801370a:	b938      	cbnz	r0, 801371c <__pow5mult+0x9c>
 801370c:	4622      	mov	r2, r4
 801370e:	4621      	mov	r1, r4
 8013710:	4630      	mov	r0, r6
 8013712:	f7ff ff0b 	bl	801352c <__multiply>
 8013716:	6020      	str	r0, [r4, #0]
 8013718:	f8c0 9000 	str.w	r9, [r0]
 801371c:	4604      	mov	r4, r0
 801371e:	e7e4      	b.n	80136ea <__pow5mult+0x6a>
 8013720:	4638      	mov	r0, r7
 8013722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013726:	bf00      	nop
 8013728:	08015660 	.word	0x08015660
 801372c:	0801533f 	.word	0x0801533f
 8013730:	08015510 	.word	0x08015510

08013734 <__lshift>:
 8013734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013738:	460c      	mov	r4, r1
 801373a:	6849      	ldr	r1, [r1, #4]
 801373c:	6923      	ldr	r3, [r4, #16]
 801373e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013742:	68a3      	ldr	r3, [r4, #8]
 8013744:	4607      	mov	r7, r0
 8013746:	4691      	mov	r9, r2
 8013748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801374c:	f108 0601 	add.w	r6, r8, #1
 8013750:	42b3      	cmp	r3, r6
 8013752:	db0b      	blt.n	801376c <__lshift+0x38>
 8013754:	4638      	mov	r0, r7
 8013756:	f7ff fddd 	bl	8013314 <_Balloc>
 801375a:	4605      	mov	r5, r0
 801375c:	b948      	cbnz	r0, 8013772 <__lshift+0x3e>
 801375e:	4602      	mov	r2, r0
 8013760:	4b28      	ldr	r3, [pc, #160]	; (8013804 <__lshift+0xd0>)
 8013762:	4829      	ldr	r0, [pc, #164]	; (8013808 <__lshift+0xd4>)
 8013764:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013768:	f7fe feaa 	bl	80124c0 <__assert_func>
 801376c:	3101      	adds	r1, #1
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	e7ee      	b.n	8013750 <__lshift+0x1c>
 8013772:	2300      	movs	r3, #0
 8013774:	f100 0114 	add.w	r1, r0, #20
 8013778:	f100 0210 	add.w	r2, r0, #16
 801377c:	4618      	mov	r0, r3
 801377e:	4553      	cmp	r3, sl
 8013780:	db33      	blt.n	80137ea <__lshift+0xb6>
 8013782:	6920      	ldr	r0, [r4, #16]
 8013784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013788:	f104 0314 	add.w	r3, r4, #20
 801378c:	f019 091f 	ands.w	r9, r9, #31
 8013790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013798:	d02b      	beq.n	80137f2 <__lshift+0xbe>
 801379a:	f1c9 0e20 	rsb	lr, r9, #32
 801379e:	468a      	mov	sl, r1
 80137a0:	2200      	movs	r2, #0
 80137a2:	6818      	ldr	r0, [r3, #0]
 80137a4:	fa00 f009 	lsl.w	r0, r0, r9
 80137a8:	4310      	orrs	r0, r2
 80137aa:	f84a 0b04 	str.w	r0, [sl], #4
 80137ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80137b2:	459c      	cmp	ip, r3
 80137b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80137b8:	d8f3      	bhi.n	80137a2 <__lshift+0x6e>
 80137ba:	ebac 0304 	sub.w	r3, ip, r4
 80137be:	3b15      	subs	r3, #21
 80137c0:	f023 0303 	bic.w	r3, r3, #3
 80137c4:	3304      	adds	r3, #4
 80137c6:	f104 0015 	add.w	r0, r4, #21
 80137ca:	4584      	cmp	ip, r0
 80137cc:	bf38      	it	cc
 80137ce:	2304      	movcc	r3, #4
 80137d0:	50ca      	str	r2, [r1, r3]
 80137d2:	b10a      	cbz	r2, 80137d8 <__lshift+0xa4>
 80137d4:	f108 0602 	add.w	r6, r8, #2
 80137d8:	3e01      	subs	r6, #1
 80137da:	4638      	mov	r0, r7
 80137dc:	612e      	str	r6, [r5, #16]
 80137de:	4621      	mov	r1, r4
 80137e0:	f7ff fdd8 	bl	8013394 <_Bfree>
 80137e4:	4628      	mov	r0, r5
 80137e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80137ee:	3301      	adds	r3, #1
 80137f0:	e7c5      	b.n	801377e <__lshift+0x4a>
 80137f2:	3904      	subs	r1, #4
 80137f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80137f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80137fc:	459c      	cmp	ip, r3
 80137fe:	d8f9      	bhi.n	80137f4 <__lshift+0xc0>
 8013800:	e7ea      	b.n	80137d8 <__lshift+0xa4>
 8013802:	bf00      	nop
 8013804:	080154ff 	.word	0x080154ff
 8013808:	08015510 	.word	0x08015510

0801380c <__mcmp>:
 801380c:	b530      	push	{r4, r5, lr}
 801380e:	6902      	ldr	r2, [r0, #16]
 8013810:	690c      	ldr	r4, [r1, #16]
 8013812:	1b12      	subs	r2, r2, r4
 8013814:	d10e      	bne.n	8013834 <__mcmp+0x28>
 8013816:	f100 0314 	add.w	r3, r0, #20
 801381a:	3114      	adds	r1, #20
 801381c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801382c:	42a5      	cmp	r5, r4
 801382e:	d003      	beq.n	8013838 <__mcmp+0x2c>
 8013830:	d305      	bcc.n	801383e <__mcmp+0x32>
 8013832:	2201      	movs	r2, #1
 8013834:	4610      	mov	r0, r2
 8013836:	bd30      	pop	{r4, r5, pc}
 8013838:	4283      	cmp	r3, r0
 801383a:	d3f3      	bcc.n	8013824 <__mcmp+0x18>
 801383c:	e7fa      	b.n	8013834 <__mcmp+0x28>
 801383e:	f04f 32ff 	mov.w	r2, #4294967295
 8013842:	e7f7      	b.n	8013834 <__mcmp+0x28>

08013844 <__mdiff>:
 8013844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013848:	460c      	mov	r4, r1
 801384a:	4606      	mov	r6, r0
 801384c:	4611      	mov	r1, r2
 801384e:	4620      	mov	r0, r4
 8013850:	4690      	mov	r8, r2
 8013852:	f7ff ffdb 	bl	801380c <__mcmp>
 8013856:	1e05      	subs	r5, r0, #0
 8013858:	d110      	bne.n	801387c <__mdiff+0x38>
 801385a:	4629      	mov	r1, r5
 801385c:	4630      	mov	r0, r6
 801385e:	f7ff fd59 	bl	8013314 <_Balloc>
 8013862:	b930      	cbnz	r0, 8013872 <__mdiff+0x2e>
 8013864:	4b3a      	ldr	r3, [pc, #232]	; (8013950 <__mdiff+0x10c>)
 8013866:	4602      	mov	r2, r0
 8013868:	f240 2137 	movw	r1, #567	; 0x237
 801386c:	4839      	ldr	r0, [pc, #228]	; (8013954 <__mdiff+0x110>)
 801386e:	f7fe fe27 	bl	80124c0 <__assert_func>
 8013872:	2301      	movs	r3, #1
 8013874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387c:	bfa4      	itt	ge
 801387e:	4643      	movge	r3, r8
 8013880:	46a0      	movge	r8, r4
 8013882:	4630      	mov	r0, r6
 8013884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013888:	bfa6      	itte	ge
 801388a:	461c      	movge	r4, r3
 801388c:	2500      	movge	r5, #0
 801388e:	2501      	movlt	r5, #1
 8013890:	f7ff fd40 	bl	8013314 <_Balloc>
 8013894:	b920      	cbnz	r0, 80138a0 <__mdiff+0x5c>
 8013896:	4b2e      	ldr	r3, [pc, #184]	; (8013950 <__mdiff+0x10c>)
 8013898:	4602      	mov	r2, r0
 801389a:	f240 2145 	movw	r1, #581	; 0x245
 801389e:	e7e5      	b.n	801386c <__mdiff+0x28>
 80138a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80138a4:	6926      	ldr	r6, [r4, #16]
 80138a6:	60c5      	str	r5, [r0, #12]
 80138a8:	f104 0914 	add.w	r9, r4, #20
 80138ac:	f108 0514 	add.w	r5, r8, #20
 80138b0:	f100 0e14 	add.w	lr, r0, #20
 80138b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138bc:	f108 0210 	add.w	r2, r8, #16
 80138c0:	46f2      	mov	sl, lr
 80138c2:	2100      	movs	r1, #0
 80138c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80138c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138cc:	fa11 f88b 	uxtah	r8, r1, fp
 80138d0:	b299      	uxth	r1, r3
 80138d2:	0c1b      	lsrs	r3, r3, #16
 80138d4:	eba8 0801 	sub.w	r8, r8, r1
 80138d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138e0:	fa1f f888 	uxth.w	r8, r8
 80138e4:	1419      	asrs	r1, r3, #16
 80138e6:	454e      	cmp	r6, r9
 80138e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138ec:	f84a 3b04 	str.w	r3, [sl], #4
 80138f0:	d8e8      	bhi.n	80138c4 <__mdiff+0x80>
 80138f2:	1b33      	subs	r3, r6, r4
 80138f4:	3b15      	subs	r3, #21
 80138f6:	f023 0303 	bic.w	r3, r3, #3
 80138fa:	3304      	adds	r3, #4
 80138fc:	3415      	adds	r4, #21
 80138fe:	42a6      	cmp	r6, r4
 8013900:	bf38      	it	cc
 8013902:	2304      	movcc	r3, #4
 8013904:	441d      	add	r5, r3
 8013906:	4473      	add	r3, lr
 8013908:	469e      	mov	lr, r3
 801390a:	462e      	mov	r6, r5
 801390c:	4566      	cmp	r6, ip
 801390e:	d30e      	bcc.n	801392e <__mdiff+0xea>
 8013910:	f10c 0203 	add.w	r2, ip, #3
 8013914:	1b52      	subs	r2, r2, r5
 8013916:	f022 0203 	bic.w	r2, r2, #3
 801391a:	3d03      	subs	r5, #3
 801391c:	45ac      	cmp	ip, r5
 801391e:	bf38      	it	cc
 8013920:	2200      	movcc	r2, #0
 8013922:	4413      	add	r3, r2
 8013924:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013928:	b17a      	cbz	r2, 801394a <__mdiff+0x106>
 801392a:	6107      	str	r7, [r0, #16]
 801392c:	e7a4      	b.n	8013878 <__mdiff+0x34>
 801392e:	f856 8b04 	ldr.w	r8, [r6], #4
 8013932:	fa11 f288 	uxtah	r2, r1, r8
 8013936:	1414      	asrs	r4, r2, #16
 8013938:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801393c:	b292      	uxth	r2, r2
 801393e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013942:	f84e 2b04 	str.w	r2, [lr], #4
 8013946:	1421      	asrs	r1, r4, #16
 8013948:	e7e0      	b.n	801390c <__mdiff+0xc8>
 801394a:	3f01      	subs	r7, #1
 801394c:	e7ea      	b.n	8013924 <__mdiff+0xe0>
 801394e:	bf00      	nop
 8013950:	080154ff 	.word	0x080154ff
 8013954:	08015510 	.word	0x08015510

08013958 <__d2b>:
 8013958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801395c:	460f      	mov	r7, r1
 801395e:	2101      	movs	r1, #1
 8013960:	ec59 8b10 	vmov	r8, r9, d0
 8013964:	4616      	mov	r6, r2
 8013966:	f7ff fcd5 	bl	8013314 <_Balloc>
 801396a:	4604      	mov	r4, r0
 801396c:	b930      	cbnz	r0, 801397c <__d2b+0x24>
 801396e:	4602      	mov	r2, r0
 8013970:	4b24      	ldr	r3, [pc, #144]	; (8013a04 <__d2b+0xac>)
 8013972:	4825      	ldr	r0, [pc, #148]	; (8013a08 <__d2b+0xb0>)
 8013974:	f240 310f 	movw	r1, #783	; 0x30f
 8013978:	f7fe fda2 	bl	80124c0 <__assert_func>
 801397c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013984:	bb2d      	cbnz	r5, 80139d2 <__d2b+0x7a>
 8013986:	9301      	str	r3, [sp, #4]
 8013988:	f1b8 0300 	subs.w	r3, r8, #0
 801398c:	d026      	beq.n	80139dc <__d2b+0x84>
 801398e:	4668      	mov	r0, sp
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	f7ff fd87 	bl	80134a4 <__lo0bits>
 8013996:	e9dd 1200 	ldrd	r1, r2, [sp]
 801399a:	b1e8      	cbz	r0, 80139d8 <__d2b+0x80>
 801399c:	f1c0 0320 	rsb	r3, r0, #32
 80139a0:	fa02 f303 	lsl.w	r3, r2, r3
 80139a4:	430b      	orrs	r3, r1
 80139a6:	40c2      	lsrs	r2, r0
 80139a8:	6163      	str	r3, [r4, #20]
 80139aa:	9201      	str	r2, [sp, #4]
 80139ac:	9b01      	ldr	r3, [sp, #4]
 80139ae:	61a3      	str	r3, [r4, #24]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	bf14      	ite	ne
 80139b4:	2202      	movne	r2, #2
 80139b6:	2201      	moveq	r2, #1
 80139b8:	6122      	str	r2, [r4, #16]
 80139ba:	b1bd      	cbz	r5, 80139ec <__d2b+0x94>
 80139bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80139c0:	4405      	add	r5, r0
 80139c2:	603d      	str	r5, [r7, #0]
 80139c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80139c8:	6030      	str	r0, [r6, #0]
 80139ca:	4620      	mov	r0, r4
 80139cc:	b003      	add	sp, #12
 80139ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80139d6:	e7d6      	b.n	8013986 <__d2b+0x2e>
 80139d8:	6161      	str	r1, [r4, #20]
 80139da:	e7e7      	b.n	80139ac <__d2b+0x54>
 80139dc:	a801      	add	r0, sp, #4
 80139de:	f7ff fd61 	bl	80134a4 <__lo0bits>
 80139e2:	9b01      	ldr	r3, [sp, #4]
 80139e4:	6163      	str	r3, [r4, #20]
 80139e6:	3020      	adds	r0, #32
 80139e8:	2201      	movs	r2, #1
 80139ea:	e7e5      	b.n	80139b8 <__d2b+0x60>
 80139ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80139f4:	6038      	str	r0, [r7, #0]
 80139f6:	6918      	ldr	r0, [r3, #16]
 80139f8:	f7ff fd34 	bl	8013464 <__hi0bits>
 80139fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a00:	e7e2      	b.n	80139c8 <__d2b+0x70>
 8013a02:	bf00      	nop
 8013a04:	080154ff 	.word	0x080154ff
 8013a08:	08015510 	.word	0x08015510

08013a0c <_malloc_usable_size_r>:
 8013a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a10:	1f18      	subs	r0, r3, #4
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	bfbc      	itt	lt
 8013a16:	580b      	ldrlt	r3, [r1, r0]
 8013a18:	18c0      	addlt	r0, r0, r3
 8013a1a:	4770      	bx	lr

08013a1c <_strtoul_l.constprop.0>:
 8013a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a20:	4f36      	ldr	r7, [pc, #216]	; (8013afc <_strtoul_l.constprop.0+0xe0>)
 8013a22:	4686      	mov	lr, r0
 8013a24:	460d      	mov	r5, r1
 8013a26:	4628      	mov	r0, r5
 8013a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a2c:	5d3e      	ldrb	r6, [r7, r4]
 8013a2e:	f016 0608 	ands.w	r6, r6, #8
 8013a32:	d1f8      	bne.n	8013a26 <_strtoul_l.constprop.0+0xa>
 8013a34:	2c2d      	cmp	r4, #45	; 0x2d
 8013a36:	d130      	bne.n	8013a9a <_strtoul_l.constprop.0+0x7e>
 8013a38:	782c      	ldrb	r4, [r5, #0]
 8013a3a:	2601      	movs	r6, #1
 8013a3c:	1c85      	adds	r5, r0, #2
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d057      	beq.n	8013af2 <_strtoul_l.constprop.0+0xd6>
 8013a42:	2b10      	cmp	r3, #16
 8013a44:	d109      	bne.n	8013a5a <_strtoul_l.constprop.0+0x3e>
 8013a46:	2c30      	cmp	r4, #48	; 0x30
 8013a48:	d107      	bne.n	8013a5a <_strtoul_l.constprop.0+0x3e>
 8013a4a:	7828      	ldrb	r0, [r5, #0]
 8013a4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013a50:	2858      	cmp	r0, #88	; 0x58
 8013a52:	d149      	bne.n	8013ae8 <_strtoul_l.constprop.0+0xcc>
 8013a54:	786c      	ldrb	r4, [r5, #1]
 8013a56:	2310      	movs	r3, #16
 8013a58:	3502      	adds	r5, #2
 8013a5a:	f04f 38ff 	mov.w	r8, #4294967295
 8013a5e:	2700      	movs	r7, #0
 8013a60:	fbb8 f8f3 	udiv	r8, r8, r3
 8013a64:	fb03 f908 	mul.w	r9, r3, r8
 8013a68:	ea6f 0909 	mvn.w	r9, r9
 8013a6c:	4638      	mov	r0, r7
 8013a6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013a72:	f1bc 0f09 	cmp.w	ip, #9
 8013a76:	d815      	bhi.n	8013aa4 <_strtoul_l.constprop.0+0x88>
 8013a78:	4664      	mov	r4, ip
 8013a7a:	42a3      	cmp	r3, r4
 8013a7c:	dd23      	ble.n	8013ac6 <_strtoul_l.constprop.0+0xaa>
 8013a7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013a82:	d007      	beq.n	8013a94 <_strtoul_l.constprop.0+0x78>
 8013a84:	4580      	cmp	r8, r0
 8013a86:	d31b      	bcc.n	8013ac0 <_strtoul_l.constprop.0+0xa4>
 8013a88:	d101      	bne.n	8013a8e <_strtoul_l.constprop.0+0x72>
 8013a8a:	45a1      	cmp	r9, r4
 8013a8c:	db18      	blt.n	8013ac0 <_strtoul_l.constprop.0+0xa4>
 8013a8e:	fb00 4003 	mla	r0, r0, r3, r4
 8013a92:	2701      	movs	r7, #1
 8013a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a98:	e7e9      	b.n	8013a6e <_strtoul_l.constprop.0+0x52>
 8013a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8013a9c:	bf04      	itt	eq
 8013a9e:	782c      	ldrbeq	r4, [r5, #0]
 8013aa0:	1c85      	addeq	r5, r0, #2
 8013aa2:	e7cc      	b.n	8013a3e <_strtoul_l.constprop.0+0x22>
 8013aa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013aa8:	f1bc 0f19 	cmp.w	ip, #25
 8013aac:	d801      	bhi.n	8013ab2 <_strtoul_l.constprop.0+0x96>
 8013aae:	3c37      	subs	r4, #55	; 0x37
 8013ab0:	e7e3      	b.n	8013a7a <_strtoul_l.constprop.0+0x5e>
 8013ab2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013ab6:	f1bc 0f19 	cmp.w	ip, #25
 8013aba:	d804      	bhi.n	8013ac6 <_strtoul_l.constprop.0+0xaa>
 8013abc:	3c57      	subs	r4, #87	; 0x57
 8013abe:	e7dc      	b.n	8013a7a <_strtoul_l.constprop.0+0x5e>
 8013ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8013ac4:	e7e6      	b.n	8013a94 <_strtoul_l.constprop.0+0x78>
 8013ac6:	1c7b      	adds	r3, r7, #1
 8013ac8:	d106      	bne.n	8013ad8 <_strtoul_l.constprop.0+0xbc>
 8013aca:	2322      	movs	r3, #34	; 0x22
 8013acc:	f8ce 3000 	str.w	r3, [lr]
 8013ad0:	4638      	mov	r0, r7
 8013ad2:	b932      	cbnz	r2, 8013ae2 <_strtoul_l.constprop.0+0xc6>
 8013ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ad8:	b106      	cbz	r6, 8013adc <_strtoul_l.constprop.0+0xc0>
 8013ada:	4240      	negs	r0, r0
 8013adc:	2a00      	cmp	r2, #0
 8013ade:	d0f9      	beq.n	8013ad4 <_strtoul_l.constprop.0+0xb8>
 8013ae0:	b107      	cbz	r7, 8013ae4 <_strtoul_l.constprop.0+0xc8>
 8013ae2:	1e69      	subs	r1, r5, #1
 8013ae4:	6011      	str	r1, [r2, #0]
 8013ae6:	e7f5      	b.n	8013ad4 <_strtoul_l.constprop.0+0xb8>
 8013ae8:	2430      	movs	r4, #48	; 0x30
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1b5      	bne.n	8013a5a <_strtoul_l.constprop.0+0x3e>
 8013aee:	2308      	movs	r3, #8
 8013af0:	e7b3      	b.n	8013a5a <_strtoul_l.constprop.0+0x3e>
 8013af2:	2c30      	cmp	r4, #48	; 0x30
 8013af4:	d0a9      	beq.n	8013a4a <_strtoul_l.constprop.0+0x2e>
 8013af6:	230a      	movs	r3, #10
 8013af8:	e7af      	b.n	8013a5a <_strtoul_l.constprop.0+0x3e>
 8013afa:	bf00      	nop
 8013afc:	0801520d 	.word	0x0801520d

08013b00 <_strtoul_r>:
 8013b00:	f7ff bf8c 	b.w	8013a1c <_strtoul_l.constprop.0>

08013b04 <strtoul>:
 8013b04:	4613      	mov	r3, r2
 8013b06:	460a      	mov	r2, r1
 8013b08:	4601      	mov	r1, r0
 8013b0a:	4802      	ldr	r0, [pc, #8]	; (8013b14 <strtoul+0x10>)
 8013b0c:	6800      	ldr	r0, [r0, #0]
 8013b0e:	f7ff bf85 	b.w	8013a1c <_strtoul_l.constprop.0>
 8013b12:	bf00      	nop
 8013b14:	2000007c 	.word	0x2000007c

08013b18 <__ssputs_r>:
 8013b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b1c:	688e      	ldr	r6, [r1, #8]
 8013b1e:	461f      	mov	r7, r3
 8013b20:	42be      	cmp	r6, r7
 8013b22:	680b      	ldr	r3, [r1, #0]
 8013b24:	4682      	mov	sl, r0
 8013b26:	460c      	mov	r4, r1
 8013b28:	4690      	mov	r8, r2
 8013b2a:	d82c      	bhi.n	8013b86 <__ssputs_r+0x6e>
 8013b2c:	898a      	ldrh	r2, [r1, #12]
 8013b2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b32:	d026      	beq.n	8013b82 <__ssputs_r+0x6a>
 8013b34:	6965      	ldr	r5, [r4, #20]
 8013b36:	6909      	ldr	r1, [r1, #16]
 8013b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b3c:	eba3 0901 	sub.w	r9, r3, r1
 8013b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b44:	1c7b      	adds	r3, r7, #1
 8013b46:	444b      	add	r3, r9
 8013b48:	106d      	asrs	r5, r5, #1
 8013b4a:	429d      	cmp	r5, r3
 8013b4c:	bf38      	it	cc
 8013b4e:	461d      	movcc	r5, r3
 8013b50:	0553      	lsls	r3, r2, #21
 8013b52:	d527      	bpl.n	8013ba4 <__ssputs_r+0x8c>
 8013b54:	4629      	mov	r1, r5
 8013b56:	f7fd f92d 	bl	8010db4 <_malloc_r>
 8013b5a:	4606      	mov	r6, r0
 8013b5c:	b360      	cbz	r0, 8013bb8 <__ssputs_r+0xa0>
 8013b5e:	6921      	ldr	r1, [r4, #16]
 8013b60:	464a      	mov	r2, r9
 8013b62:	f7fe fc9e 	bl	80124a2 <memcpy>
 8013b66:	89a3      	ldrh	r3, [r4, #12]
 8013b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b70:	81a3      	strh	r3, [r4, #12]
 8013b72:	6126      	str	r6, [r4, #16]
 8013b74:	6165      	str	r5, [r4, #20]
 8013b76:	444e      	add	r6, r9
 8013b78:	eba5 0509 	sub.w	r5, r5, r9
 8013b7c:	6026      	str	r6, [r4, #0]
 8013b7e:	60a5      	str	r5, [r4, #8]
 8013b80:	463e      	mov	r6, r7
 8013b82:	42be      	cmp	r6, r7
 8013b84:	d900      	bls.n	8013b88 <__ssputs_r+0x70>
 8013b86:	463e      	mov	r6, r7
 8013b88:	6820      	ldr	r0, [r4, #0]
 8013b8a:	4632      	mov	r2, r6
 8013b8c:	4641      	mov	r1, r8
 8013b8e:	f000 fa07 	bl	8013fa0 <memmove>
 8013b92:	68a3      	ldr	r3, [r4, #8]
 8013b94:	1b9b      	subs	r3, r3, r6
 8013b96:	60a3      	str	r3, [r4, #8]
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	4433      	add	r3, r6
 8013b9c:	6023      	str	r3, [r4, #0]
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ba4:	462a      	mov	r2, r5
 8013ba6:	f7fd f999 	bl	8010edc <_realloc_r>
 8013baa:	4606      	mov	r6, r0
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d1e0      	bne.n	8013b72 <__ssputs_r+0x5a>
 8013bb0:	6921      	ldr	r1, [r4, #16]
 8013bb2:	4650      	mov	r0, sl
 8013bb4:	f7ff fb1e 	bl	80131f4 <_free_r>
 8013bb8:	230c      	movs	r3, #12
 8013bba:	f8ca 3000 	str.w	r3, [sl]
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc4:	81a3      	strh	r3, [r4, #12]
 8013bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bca:	e7e9      	b.n	8013ba0 <__ssputs_r+0x88>

08013bcc <_svfiprintf_r>:
 8013bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	4698      	mov	r8, r3
 8013bd2:	898b      	ldrh	r3, [r1, #12]
 8013bd4:	061b      	lsls	r3, r3, #24
 8013bd6:	b09d      	sub	sp, #116	; 0x74
 8013bd8:	4607      	mov	r7, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	4614      	mov	r4, r2
 8013bde:	d50e      	bpl.n	8013bfe <_svfiprintf_r+0x32>
 8013be0:	690b      	ldr	r3, [r1, #16]
 8013be2:	b963      	cbnz	r3, 8013bfe <_svfiprintf_r+0x32>
 8013be4:	2140      	movs	r1, #64	; 0x40
 8013be6:	f7fd f8e5 	bl	8010db4 <_malloc_r>
 8013bea:	6028      	str	r0, [r5, #0]
 8013bec:	6128      	str	r0, [r5, #16]
 8013bee:	b920      	cbnz	r0, 8013bfa <_svfiprintf_r+0x2e>
 8013bf0:	230c      	movs	r3, #12
 8013bf2:	603b      	str	r3, [r7, #0]
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	e0d0      	b.n	8013d9c <_svfiprintf_r+0x1d0>
 8013bfa:	2340      	movs	r3, #64	; 0x40
 8013bfc:	616b      	str	r3, [r5, #20]
 8013bfe:	2300      	movs	r3, #0
 8013c00:	9309      	str	r3, [sp, #36]	; 0x24
 8013c02:	2320      	movs	r3, #32
 8013c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c0c:	2330      	movs	r3, #48	; 0x30
 8013c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013db4 <_svfiprintf_r+0x1e8>
 8013c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c16:	f04f 0901 	mov.w	r9, #1
 8013c1a:	4623      	mov	r3, r4
 8013c1c:	469a      	mov	sl, r3
 8013c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c22:	b10a      	cbz	r2, 8013c28 <_svfiprintf_r+0x5c>
 8013c24:	2a25      	cmp	r2, #37	; 0x25
 8013c26:	d1f9      	bne.n	8013c1c <_svfiprintf_r+0x50>
 8013c28:	ebba 0b04 	subs.w	fp, sl, r4
 8013c2c:	d00b      	beq.n	8013c46 <_svfiprintf_r+0x7a>
 8013c2e:	465b      	mov	r3, fp
 8013c30:	4622      	mov	r2, r4
 8013c32:	4629      	mov	r1, r5
 8013c34:	4638      	mov	r0, r7
 8013c36:	f7ff ff6f 	bl	8013b18 <__ssputs_r>
 8013c3a:	3001      	adds	r0, #1
 8013c3c:	f000 80a9 	beq.w	8013d92 <_svfiprintf_r+0x1c6>
 8013c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c42:	445a      	add	r2, fp
 8013c44:	9209      	str	r2, [sp, #36]	; 0x24
 8013c46:	f89a 3000 	ldrb.w	r3, [sl]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	f000 80a1 	beq.w	8013d92 <_svfiprintf_r+0x1c6>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f04f 32ff 	mov.w	r2, #4294967295
 8013c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c5a:	f10a 0a01 	add.w	sl, sl, #1
 8013c5e:	9304      	str	r3, [sp, #16]
 8013c60:	9307      	str	r3, [sp, #28]
 8013c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c66:	931a      	str	r3, [sp, #104]	; 0x68
 8013c68:	4654      	mov	r4, sl
 8013c6a:	2205      	movs	r2, #5
 8013c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c70:	4850      	ldr	r0, [pc, #320]	; (8013db4 <_svfiprintf_r+0x1e8>)
 8013c72:	f7ec fabd 	bl	80001f0 <memchr>
 8013c76:	9a04      	ldr	r2, [sp, #16]
 8013c78:	b9d8      	cbnz	r0, 8013cb2 <_svfiprintf_r+0xe6>
 8013c7a:	06d0      	lsls	r0, r2, #27
 8013c7c:	bf44      	itt	mi
 8013c7e:	2320      	movmi	r3, #32
 8013c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c84:	0711      	lsls	r1, r2, #28
 8013c86:	bf44      	itt	mi
 8013c88:	232b      	movmi	r3, #43	; 0x2b
 8013c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8013c92:	2b2a      	cmp	r3, #42	; 0x2a
 8013c94:	d015      	beq.n	8013cc2 <_svfiprintf_r+0xf6>
 8013c96:	9a07      	ldr	r2, [sp, #28]
 8013c98:	4654      	mov	r4, sl
 8013c9a:	2000      	movs	r0, #0
 8013c9c:	f04f 0c0a 	mov.w	ip, #10
 8013ca0:	4621      	mov	r1, r4
 8013ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ca6:	3b30      	subs	r3, #48	; 0x30
 8013ca8:	2b09      	cmp	r3, #9
 8013caa:	d94d      	bls.n	8013d48 <_svfiprintf_r+0x17c>
 8013cac:	b1b0      	cbz	r0, 8013cdc <_svfiprintf_r+0x110>
 8013cae:	9207      	str	r2, [sp, #28]
 8013cb0:	e014      	b.n	8013cdc <_svfiprintf_r+0x110>
 8013cb2:	eba0 0308 	sub.w	r3, r0, r8
 8013cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	9304      	str	r3, [sp, #16]
 8013cbe:	46a2      	mov	sl, r4
 8013cc0:	e7d2      	b.n	8013c68 <_svfiprintf_r+0x9c>
 8013cc2:	9b03      	ldr	r3, [sp, #12]
 8013cc4:	1d19      	adds	r1, r3, #4
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	9103      	str	r1, [sp, #12]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	bfbb      	ittet	lt
 8013cce:	425b      	neglt	r3, r3
 8013cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8013cd4:	9307      	strge	r3, [sp, #28]
 8013cd6:	9307      	strlt	r3, [sp, #28]
 8013cd8:	bfb8      	it	lt
 8013cda:	9204      	strlt	r2, [sp, #16]
 8013cdc:	7823      	ldrb	r3, [r4, #0]
 8013cde:	2b2e      	cmp	r3, #46	; 0x2e
 8013ce0:	d10c      	bne.n	8013cfc <_svfiprintf_r+0x130>
 8013ce2:	7863      	ldrb	r3, [r4, #1]
 8013ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ce6:	d134      	bne.n	8013d52 <_svfiprintf_r+0x186>
 8013ce8:	9b03      	ldr	r3, [sp, #12]
 8013cea:	1d1a      	adds	r2, r3, #4
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	9203      	str	r2, [sp, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	bfb8      	it	lt
 8013cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cf8:	3402      	adds	r4, #2
 8013cfa:	9305      	str	r3, [sp, #20]
 8013cfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013dc4 <_svfiprintf_r+0x1f8>
 8013d00:	7821      	ldrb	r1, [r4, #0]
 8013d02:	2203      	movs	r2, #3
 8013d04:	4650      	mov	r0, sl
 8013d06:	f7ec fa73 	bl	80001f0 <memchr>
 8013d0a:	b138      	cbz	r0, 8013d1c <_svfiprintf_r+0x150>
 8013d0c:	9b04      	ldr	r3, [sp, #16]
 8013d0e:	eba0 000a 	sub.w	r0, r0, sl
 8013d12:	2240      	movs	r2, #64	; 0x40
 8013d14:	4082      	lsls	r2, r0
 8013d16:	4313      	orrs	r3, r2
 8013d18:	3401      	adds	r4, #1
 8013d1a:	9304      	str	r3, [sp, #16]
 8013d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d20:	4825      	ldr	r0, [pc, #148]	; (8013db8 <_svfiprintf_r+0x1ec>)
 8013d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d26:	2206      	movs	r2, #6
 8013d28:	f7ec fa62 	bl	80001f0 <memchr>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d038      	beq.n	8013da2 <_svfiprintf_r+0x1d6>
 8013d30:	4b22      	ldr	r3, [pc, #136]	; (8013dbc <_svfiprintf_r+0x1f0>)
 8013d32:	bb1b      	cbnz	r3, 8013d7c <_svfiprintf_r+0x1b0>
 8013d34:	9b03      	ldr	r3, [sp, #12]
 8013d36:	3307      	adds	r3, #7
 8013d38:	f023 0307 	bic.w	r3, r3, #7
 8013d3c:	3308      	adds	r3, #8
 8013d3e:	9303      	str	r3, [sp, #12]
 8013d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d42:	4433      	add	r3, r6
 8013d44:	9309      	str	r3, [sp, #36]	; 0x24
 8013d46:	e768      	b.n	8013c1a <_svfiprintf_r+0x4e>
 8013d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d4c:	460c      	mov	r4, r1
 8013d4e:	2001      	movs	r0, #1
 8013d50:	e7a6      	b.n	8013ca0 <_svfiprintf_r+0xd4>
 8013d52:	2300      	movs	r3, #0
 8013d54:	3401      	adds	r4, #1
 8013d56:	9305      	str	r3, [sp, #20]
 8013d58:	4619      	mov	r1, r3
 8013d5a:	f04f 0c0a 	mov.w	ip, #10
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d64:	3a30      	subs	r2, #48	; 0x30
 8013d66:	2a09      	cmp	r2, #9
 8013d68:	d903      	bls.n	8013d72 <_svfiprintf_r+0x1a6>
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d0c6      	beq.n	8013cfc <_svfiprintf_r+0x130>
 8013d6e:	9105      	str	r1, [sp, #20]
 8013d70:	e7c4      	b.n	8013cfc <_svfiprintf_r+0x130>
 8013d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d76:	4604      	mov	r4, r0
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e7f0      	b.n	8013d5e <_svfiprintf_r+0x192>
 8013d7c:	ab03      	add	r3, sp, #12
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	462a      	mov	r2, r5
 8013d82:	4b0f      	ldr	r3, [pc, #60]	; (8013dc0 <_svfiprintf_r+0x1f4>)
 8013d84:	a904      	add	r1, sp, #16
 8013d86:	4638      	mov	r0, r7
 8013d88:	f7fd fa06 	bl	8011198 <_printf_float>
 8013d8c:	1c42      	adds	r2, r0, #1
 8013d8e:	4606      	mov	r6, r0
 8013d90:	d1d6      	bne.n	8013d40 <_svfiprintf_r+0x174>
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	065b      	lsls	r3, r3, #25
 8013d96:	f53f af2d 	bmi.w	8013bf4 <_svfiprintf_r+0x28>
 8013d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d9c:	b01d      	add	sp, #116	; 0x74
 8013d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da2:	ab03      	add	r3, sp, #12
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	462a      	mov	r2, r5
 8013da8:	4b05      	ldr	r3, [pc, #20]	; (8013dc0 <_svfiprintf_r+0x1f4>)
 8013daa:	a904      	add	r1, sp, #16
 8013dac:	4638      	mov	r0, r7
 8013dae:	f7fd fc97 	bl	80116e0 <_printf_i>
 8013db2:	e7eb      	b.n	8013d8c <_svfiprintf_r+0x1c0>
 8013db4:	0801566c 	.word	0x0801566c
 8013db8:	08015676 	.word	0x08015676
 8013dbc:	08011199 	.word	0x08011199
 8013dc0:	08013b19 	.word	0x08013b19
 8013dc4:	08015672 	.word	0x08015672

08013dc8 <__sflush_r>:
 8013dc8:	898a      	ldrh	r2, [r1, #12]
 8013dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dce:	4605      	mov	r5, r0
 8013dd0:	0710      	lsls	r0, r2, #28
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	d458      	bmi.n	8013e88 <__sflush_r+0xc0>
 8013dd6:	684b      	ldr	r3, [r1, #4]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	dc05      	bgt.n	8013de8 <__sflush_r+0x20>
 8013ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	dc02      	bgt.n	8013de8 <__sflush_r+0x20>
 8013de2:	2000      	movs	r0, #0
 8013de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013dea:	2e00      	cmp	r6, #0
 8013dec:	d0f9      	beq.n	8013de2 <__sflush_r+0x1a>
 8013dee:	2300      	movs	r3, #0
 8013df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013df4:	682f      	ldr	r7, [r5, #0]
 8013df6:	6a21      	ldr	r1, [r4, #32]
 8013df8:	602b      	str	r3, [r5, #0]
 8013dfa:	d032      	beq.n	8013e62 <__sflush_r+0x9a>
 8013dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013dfe:	89a3      	ldrh	r3, [r4, #12]
 8013e00:	075a      	lsls	r2, r3, #29
 8013e02:	d505      	bpl.n	8013e10 <__sflush_r+0x48>
 8013e04:	6863      	ldr	r3, [r4, #4]
 8013e06:	1ac0      	subs	r0, r0, r3
 8013e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e0a:	b10b      	cbz	r3, 8013e10 <__sflush_r+0x48>
 8013e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e0e:	1ac0      	subs	r0, r0, r3
 8013e10:	2300      	movs	r3, #0
 8013e12:	4602      	mov	r2, r0
 8013e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e16:	6a21      	ldr	r1, [r4, #32]
 8013e18:	4628      	mov	r0, r5
 8013e1a:	47b0      	blx	r6
 8013e1c:	1c43      	adds	r3, r0, #1
 8013e1e:	89a3      	ldrh	r3, [r4, #12]
 8013e20:	d106      	bne.n	8013e30 <__sflush_r+0x68>
 8013e22:	6829      	ldr	r1, [r5, #0]
 8013e24:	291d      	cmp	r1, #29
 8013e26:	d82b      	bhi.n	8013e80 <__sflush_r+0xb8>
 8013e28:	4a29      	ldr	r2, [pc, #164]	; (8013ed0 <__sflush_r+0x108>)
 8013e2a:	410a      	asrs	r2, r1
 8013e2c:	07d6      	lsls	r6, r2, #31
 8013e2e:	d427      	bmi.n	8013e80 <__sflush_r+0xb8>
 8013e30:	2200      	movs	r2, #0
 8013e32:	6062      	str	r2, [r4, #4]
 8013e34:	04d9      	lsls	r1, r3, #19
 8013e36:	6922      	ldr	r2, [r4, #16]
 8013e38:	6022      	str	r2, [r4, #0]
 8013e3a:	d504      	bpl.n	8013e46 <__sflush_r+0x7e>
 8013e3c:	1c42      	adds	r2, r0, #1
 8013e3e:	d101      	bne.n	8013e44 <__sflush_r+0x7c>
 8013e40:	682b      	ldr	r3, [r5, #0]
 8013e42:	b903      	cbnz	r3, 8013e46 <__sflush_r+0x7e>
 8013e44:	6560      	str	r0, [r4, #84]	; 0x54
 8013e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e48:	602f      	str	r7, [r5, #0]
 8013e4a:	2900      	cmp	r1, #0
 8013e4c:	d0c9      	beq.n	8013de2 <__sflush_r+0x1a>
 8013e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e52:	4299      	cmp	r1, r3
 8013e54:	d002      	beq.n	8013e5c <__sflush_r+0x94>
 8013e56:	4628      	mov	r0, r5
 8013e58:	f7ff f9cc 	bl	80131f4 <_free_r>
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	6360      	str	r0, [r4, #52]	; 0x34
 8013e60:	e7c0      	b.n	8013de4 <__sflush_r+0x1c>
 8013e62:	2301      	movs	r3, #1
 8013e64:	4628      	mov	r0, r5
 8013e66:	47b0      	blx	r6
 8013e68:	1c41      	adds	r1, r0, #1
 8013e6a:	d1c8      	bne.n	8013dfe <__sflush_r+0x36>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d0c5      	beq.n	8013dfe <__sflush_r+0x36>
 8013e72:	2b1d      	cmp	r3, #29
 8013e74:	d001      	beq.n	8013e7a <__sflush_r+0xb2>
 8013e76:	2b16      	cmp	r3, #22
 8013e78:	d101      	bne.n	8013e7e <__sflush_r+0xb6>
 8013e7a:	602f      	str	r7, [r5, #0]
 8013e7c:	e7b1      	b.n	8013de2 <__sflush_r+0x1a>
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e84:	81a3      	strh	r3, [r4, #12]
 8013e86:	e7ad      	b.n	8013de4 <__sflush_r+0x1c>
 8013e88:	690f      	ldr	r7, [r1, #16]
 8013e8a:	2f00      	cmp	r7, #0
 8013e8c:	d0a9      	beq.n	8013de2 <__sflush_r+0x1a>
 8013e8e:	0793      	lsls	r3, r2, #30
 8013e90:	680e      	ldr	r6, [r1, #0]
 8013e92:	bf08      	it	eq
 8013e94:	694b      	ldreq	r3, [r1, #20]
 8013e96:	600f      	str	r7, [r1, #0]
 8013e98:	bf18      	it	ne
 8013e9a:	2300      	movne	r3, #0
 8013e9c:	eba6 0807 	sub.w	r8, r6, r7
 8013ea0:	608b      	str	r3, [r1, #8]
 8013ea2:	f1b8 0f00 	cmp.w	r8, #0
 8013ea6:	dd9c      	ble.n	8013de2 <__sflush_r+0x1a>
 8013ea8:	6a21      	ldr	r1, [r4, #32]
 8013eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013eac:	4643      	mov	r3, r8
 8013eae:	463a      	mov	r2, r7
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	47b0      	blx	r6
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	dc06      	bgt.n	8013ec6 <__sflush_r+0xfe>
 8013eb8:	89a3      	ldrh	r3, [r4, #12]
 8013eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ebe:	81a3      	strh	r3, [r4, #12]
 8013ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ec4:	e78e      	b.n	8013de4 <__sflush_r+0x1c>
 8013ec6:	4407      	add	r7, r0
 8013ec8:	eba8 0800 	sub.w	r8, r8, r0
 8013ecc:	e7e9      	b.n	8013ea2 <__sflush_r+0xda>
 8013ece:	bf00      	nop
 8013ed0:	dfbffffe 	.word	0xdfbffffe

08013ed4 <_fflush_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	690b      	ldr	r3, [r1, #16]
 8013ed8:	4605      	mov	r5, r0
 8013eda:	460c      	mov	r4, r1
 8013edc:	b913      	cbnz	r3, 8013ee4 <_fflush_r+0x10>
 8013ede:	2500      	movs	r5, #0
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	b118      	cbz	r0, 8013eee <_fflush_r+0x1a>
 8013ee6:	6a03      	ldr	r3, [r0, #32]
 8013ee8:	b90b      	cbnz	r3, 8013eee <_fflush_r+0x1a>
 8013eea:	f7fd fda7 	bl	8011a3c <__sinit>
 8013eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d0f3      	beq.n	8013ede <_fflush_r+0xa>
 8013ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013ef8:	07d0      	lsls	r0, r2, #31
 8013efa:	d404      	bmi.n	8013f06 <_fflush_r+0x32>
 8013efc:	0599      	lsls	r1, r3, #22
 8013efe:	d402      	bmi.n	8013f06 <_fflush_r+0x32>
 8013f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f02:	f7fe fac3 	bl	801248c <__retarget_lock_acquire_recursive>
 8013f06:	4628      	mov	r0, r5
 8013f08:	4621      	mov	r1, r4
 8013f0a:	f7ff ff5d 	bl	8013dc8 <__sflush_r>
 8013f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f10:	07da      	lsls	r2, r3, #31
 8013f12:	4605      	mov	r5, r0
 8013f14:	d4e4      	bmi.n	8013ee0 <_fflush_r+0xc>
 8013f16:	89a3      	ldrh	r3, [r4, #12]
 8013f18:	059b      	lsls	r3, r3, #22
 8013f1a:	d4e1      	bmi.n	8013ee0 <_fflush_r+0xc>
 8013f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f1e:	f7fe fab7 	bl	8012490 <__retarget_lock_release_recursive>
 8013f22:	e7dd      	b.n	8013ee0 <_fflush_r+0xc>

08013f24 <fiprintf>:
 8013f24:	b40e      	push	{r1, r2, r3}
 8013f26:	b503      	push	{r0, r1, lr}
 8013f28:	4601      	mov	r1, r0
 8013f2a:	ab03      	add	r3, sp, #12
 8013f2c:	4805      	ldr	r0, [pc, #20]	; (8013f44 <fiprintf+0x20>)
 8013f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f32:	6800      	ldr	r0, [r0, #0]
 8013f34:	9301      	str	r3, [sp, #4]
 8013f36:	f000 fb3d 	bl	80145b4 <_vfiprintf_r>
 8013f3a:	b002      	add	sp, #8
 8013f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f40:	b003      	add	sp, #12
 8013f42:	4770      	bx	lr
 8013f44:	2000007c 	.word	0x2000007c

08013f48 <siscanf>:
 8013f48:	b40e      	push	{r1, r2, r3}
 8013f4a:	b510      	push	{r4, lr}
 8013f4c:	b09f      	sub	sp, #124	; 0x7c
 8013f4e:	ac21      	add	r4, sp, #132	; 0x84
 8013f50:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013f54:	f854 2b04 	ldr.w	r2, [r4], #4
 8013f58:	9201      	str	r2, [sp, #4]
 8013f5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013f5e:	9004      	str	r0, [sp, #16]
 8013f60:	9008      	str	r0, [sp, #32]
 8013f62:	f7ec f995 	bl	8000290 <strlen>
 8013f66:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <siscanf+0x50>)
 8013f68:	9005      	str	r0, [sp, #20]
 8013f6a:	9009      	str	r0, [sp, #36]	; 0x24
 8013f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8013f6e:	480b      	ldr	r0, [pc, #44]	; (8013f9c <siscanf+0x54>)
 8013f70:	9a01      	ldr	r2, [sp, #4]
 8013f72:	6800      	ldr	r0, [r0, #0]
 8013f74:	9403      	str	r4, [sp, #12]
 8013f76:	2300      	movs	r3, #0
 8013f78:	9311      	str	r3, [sp, #68]	; 0x44
 8013f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8013f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f84:	a904      	add	r1, sp, #16
 8013f86:	4623      	mov	r3, r4
 8013f88:	f000 f972 	bl	8014270 <__ssvfiscanf_r>
 8013f8c:	b01f      	add	sp, #124	; 0x7c
 8013f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f92:	b003      	add	sp, #12
 8013f94:	4770      	bx	lr
 8013f96:	bf00      	nop
 8013f98:	08011b0b 	.word	0x08011b0b
 8013f9c:	2000007c 	.word	0x2000007c

08013fa0 <memmove>:
 8013fa0:	4288      	cmp	r0, r1
 8013fa2:	b510      	push	{r4, lr}
 8013fa4:	eb01 0402 	add.w	r4, r1, r2
 8013fa8:	d902      	bls.n	8013fb0 <memmove+0x10>
 8013faa:	4284      	cmp	r4, r0
 8013fac:	4623      	mov	r3, r4
 8013fae:	d807      	bhi.n	8013fc0 <memmove+0x20>
 8013fb0:	1e43      	subs	r3, r0, #1
 8013fb2:	42a1      	cmp	r1, r4
 8013fb4:	d008      	beq.n	8013fc8 <memmove+0x28>
 8013fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013fbe:	e7f8      	b.n	8013fb2 <memmove+0x12>
 8013fc0:	4402      	add	r2, r0
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	428a      	cmp	r2, r1
 8013fc6:	d100      	bne.n	8013fca <memmove+0x2a>
 8013fc8:	bd10      	pop	{r4, pc}
 8013fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013fd2:	e7f7      	b.n	8013fc4 <memmove+0x24>

08013fd4 <__gettzinfo>:
 8013fd4:	4800      	ldr	r0, [pc, #0]	; (8013fd8 <__gettzinfo+0x4>)
 8013fd6:	4770      	bx	lr
 8013fd8:	20000080 	.word	0x20000080

08013fdc <gmtime_r>:
 8013fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe0:	4a4d      	ldr	r2, [pc, #308]	; (8014118 <gmtime_r+0x13c>)
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8013fea:	f7ec fded 	bl	8000bc8 <__aeabi_ldivmod>
 8013fee:	2a00      	cmp	r2, #0
 8013ff0:	bfbc      	itt	lt
 8013ff2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8013ff6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8013ffa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013ffe:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 8014002:	fbb2 f3f1 	udiv	r3, r2, r1
 8014006:	fb01 2213 	mls	r2, r1, r3, r2
 801400a:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801400e:	bfac      	ite	ge
 8014010:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014014:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8014018:	60a3      	str	r3, [r4, #8]
 801401a:	fbb2 f3f1 	udiv	r3, r2, r1
 801401e:	fb01 2213 	mls	r2, r1, r3, r2
 8014022:	6063      	str	r3, [r4, #4]
 8014024:	6022      	str	r2, [r4, #0]
 8014026:	1cc3      	adds	r3, r0, #3
 8014028:	2207      	movs	r2, #7
 801402a:	fb93 f2f2 	sdiv	r2, r3, r2
 801402e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8014032:	1a9b      	subs	r3, r3, r2
 8014034:	bf48      	it	mi
 8014036:	3307      	addmi	r3, #7
 8014038:	2800      	cmp	r0, #0
 801403a:	61a3      	str	r3, [r4, #24]
 801403c:	bfb8      	it	lt
 801403e:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8014042:	4936      	ldr	r1, [pc, #216]	; (801411c <gmtime_r+0x140>)
 8014044:	bfae      	itee	ge
 8014046:	fb90 f1f1 	sdivge	r1, r0, r1
 801404a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801404e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8014052:	4b33      	ldr	r3, [pc, #204]	; (8014120 <gmtime_r+0x144>)
 8014054:	fb03 0001 	mla	r0, r3, r1, r0
 8014058:	f648 63ac 	movw	r3, #36524	; 0x8eac
 801405c:	fbb0 f3f3 	udiv	r3, r0, r3
 8014060:	4403      	add	r3, r0
 8014062:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8014066:	fbb0 f2fc 	udiv	r2, r0, ip
 801406a:	1a9b      	subs	r3, r3, r2
 801406c:	f240 176d 	movw	r7, #365	; 0x16d
 8014070:	4a2c      	ldr	r2, [pc, #176]	; (8014124 <gmtime_r+0x148>)
 8014072:	fbb0 f2f2 	udiv	r2, r0, r2
 8014076:	2664      	movs	r6, #100	; 0x64
 8014078:	1a9b      	subs	r3, r3, r2
 801407a:	fbb3 f2f7 	udiv	r2, r3, r7
 801407e:	fbb3 f3fc 	udiv	r3, r3, ip
 8014082:	fbb2 f5f6 	udiv	r5, r2, r6
 8014086:	1aeb      	subs	r3, r5, r3
 8014088:	4403      	add	r3, r0
 801408a:	fb07 3312 	mls	r3, r7, r2, r3
 801408e:	2099      	movs	r0, #153	; 0x99
 8014090:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8014094:	3702      	adds	r7, #2
 8014096:	f103 0e01 	add.w	lr, r3, #1
 801409a:	fbb7 fcf0 	udiv	ip, r7, r0
 801409e:	fb00 f00c 	mul.w	r0, r0, ip
 80140a2:	3002      	adds	r0, #2
 80140a4:	f04f 0805 	mov.w	r8, #5
 80140a8:	fbb0 f0f8 	udiv	r0, r0, r8
 80140ac:	ebae 0000 	sub.w	r0, lr, r0
 80140b0:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80140b4:	4577      	cmp	r7, lr
 80140b6:	bf94      	ite	ls
 80140b8:	2702      	movls	r7, #2
 80140ba:	f06f 0709 	mvnhi.w	r7, #9
 80140be:	4467      	add	r7, ip
 80140c0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80140c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80140c8:	2f01      	cmp	r7, #1
 80140ca:	bf98      	it	ls
 80140cc:	3101      	addls	r1, #1
 80140ce:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80140d2:	d30c      	bcc.n	80140ee <gmtime_r+0x112>
 80140d4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80140d8:	61e3      	str	r3, [r4, #28]
 80140da:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80140de:	2300      	movs	r3, #0
 80140e0:	60e0      	str	r0, [r4, #12]
 80140e2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80140e6:	6223      	str	r3, [r4, #32]
 80140e8:	4620      	mov	r0, r4
 80140ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ee:	f012 0f03 	tst.w	r2, #3
 80140f2:	d102      	bne.n	80140fa <gmtime_r+0x11e>
 80140f4:	fb06 2515 	mls	r5, r6, r5, r2
 80140f8:	b95d      	cbnz	r5, 8014112 <gmtime_r+0x136>
 80140fa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80140fe:	fbb2 f6f5 	udiv	r6, r2, r5
 8014102:	fb05 2216 	mls	r2, r5, r6, r2
 8014106:	fab2 f282 	clz	r2, r2
 801410a:	0952      	lsrs	r2, r2, #5
 801410c:	333b      	adds	r3, #59	; 0x3b
 801410e:	4413      	add	r3, r2
 8014110:	e7e2      	b.n	80140d8 <gmtime_r+0xfc>
 8014112:	2201      	movs	r2, #1
 8014114:	e7fa      	b.n	801410c <gmtime_r+0x130>
 8014116:	bf00      	nop
 8014118:	00015180 	.word	0x00015180
 801411c:	00023ab1 	.word	0x00023ab1
 8014120:	fffdc54f 	.word	0xfffdc54f
 8014124:	00023ab0 	.word	0x00023ab0

08014128 <abort>:
 8014128:	b508      	push	{r3, lr}
 801412a:	2006      	movs	r0, #6
 801412c:	f000 fdda 	bl	8014ce4 <raise>
 8014130:	2001      	movs	r0, #1
 8014132:	f7f4 f88d 	bl	8008250 <_exit>

08014136 <_calloc_r>:
 8014136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014138:	fba1 2402 	umull	r2, r4, r1, r2
 801413c:	b94c      	cbnz	r4, 8014152 <_calloc_r+0x1c>
 801413e:	4611      	mov	r1, r2
 8014140:	9201      	str	r2, [sp, #4]
 8014142:	f7fc fe37 	bl	8010db4 <_malloc_r>
 8014146:	9a01      	ldr	r2, [sp, #4]
 8014148:	4605      	mov	r5, r0
 801414a:	b930      	cbnz	r0, 801415a <_calloc_r+0x24>
 801414c:	4628      	mov	r0, r5
 801414e:	b003      	add	sp, #12
 8014150:	bd30      	pop	{r4, r5, pc}
 8014152:	220c      	movs	r2, #12
 8014154:	6002      	str	r2, [r0, #0]
 8014156:	2500      	movs	r5, #0
 8014158:	e7f8      	b.n	801414c <_calloc_r+0x16>
 801415a:	4621      	mov	r1, r4
 801415c:	f7fd fd09 	bl	8011b72 <memset>
 8014160:	e7f4      	b.n	801414c <_calloc_r+0x16>
	...

08014164 <__env_lock>:
 8014164:	4801      	ldr	r0, [pc, #4]	; (801416c <__env_lock+0x8>)
 8014166:	f7fe b991 	b.w	801248c <__retarget_lock_acquire_recursive>
 801416a:	bf00      	nop
 801416c:	20002070 	.word	0x20002070

08014170 <__env_unlock>:
 8014170:	4801      	ldr	r0, [pc, #4]	; (8014178 <__env_unlock+0x8>)
 8014172:	f7fe b98d 	b.w	8012490 <__retarget_lock_release_recursive>
 8014176:	bf00      	nop
 8014178:	20002070 	.word	0x20002070

0801417c <__ascii_mbtowc>:
 801417c:	b082      	sub	sp, #8
 801417e:	b901      	cbnz	r1, 8014182 <__ascii_mbtowc+0x6>
 8014180:	a901      	add	r1, sp, #4
 8014182:	b142      	cbz	r2, 8014196 <__ascii_mbtowc+0x1a>
 8014184:	b14b      	cbz	r3, 801419a <__ascii_mbtowc+0x1e>
 8014186:	7813      	ldrb	r3, [r2, #0]
 8014188:	600b      	str	r3, [r1, #0]
 801418a:	7812      	ldrb	r2, [r2, #0]
 801418c:	1e10      	subs	r0, r2, #0
 801418e:	bf18      	it	ne
 8014190:	2001      	movne	r0, #1
 8014192:	b002      	add	sp, #8
 8014194:	4770      	bx	lr
 8014196:	4610      	mov	r0, r2
 8014198:	e7fb      	b.n	8014192 <__ascii_mbtowc+0x16>
 801419a:	f06f 0001 	mvn.w	r0, #1
 801419e:	e7f8      	b.n	8014192 <__ascii_mbtowc+0x16>

080141a0 <__ascii_wctomb>:
 80141a0:	b149      	cbz	r1, 80141b6 <__ascii_wctomb+0x16>
 80141a2:	2aff      	cmp	r2, #255	; 0xff
 80141a4:	bf85      	ittet	hi
 80141a6:	238a      	movhi	r3, #138	; 0x8a
 80141a8:	6003      	strhi	r3, [r0, #0]
 80141aa:	700a      	strbls	r2, [r1, #0]
 80141ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80141b0:	bf98      	it	ls
 80141b2:	2001      	movls	r0, #1
 80141b4:	4770      	bx	lr
 80141b6:	4608      	mov	r0, r1
 80141b8:	4770      	bx	lr

080141ba <_sungetc_r>:
 80141ba:	b538      	push	{r3, r4, r5, lr}
 80141bc:	1c4b      	adds	r3, r1, #1
 80141be:	4614      	mov	r4, r2
 80141c0:	d103      	bne.n	80141ca <_sungetc_r+0x10>
 80141c2:	f04f 35ff 	mov.w	r5, #4294967295
 80141c6:	4628      	mov	r0, r5
 80141c8:	bd38      	pop	{r3, r4, r5, pc}
 80141ca:	8993      	ldrh	r3, [r2, #12]
 80141cc:	f023 0320 	bic.w	r3, r3, #32
 80141d0:	8193      	strh	r3, [r2, #12]
 80141d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141d4:	6852      	ldr	r2, [r2, #4]
 80141d6:	b2cd      	uxtb	r5, r1
 80141d8:	b18b      	cbz	r3, 80141fe <_sungetc_r+0x44>
 80141da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80141dc:	4293      	cmp	r3, r2
 80141de:	dd08      	ble.n	80141f2 <_sungetc_r+0x38>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	1e5a      	subs	r2, r3, #1
 80141e4:	6022      	str	r2, [r4, #0]
 80141e6:	f803 5c01 	strb.w	r5, [r3, #-1]
 80141ea:	6863      	ldr	r3, [r4, #4]
 80141ec:	3301      	adds	r3, #1
 80141ee:	6063      	str	r3, [r4, #4]
 80141f0:	e7e9      	b.n	80141c6 <_sungetc_r+0xc>
 80141f2:	4621      	mov	r1, r4
 80141f4:	f000 fc7f 	bl	8014af6 <__submore>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d0f1      	beq.n	80141e0 <_sungetc_r+0x26>
 80141fc:	e7e1      	b.n	80141c2 <_sungetc_r+0x8>
 80141fe:	6921      	ldr	r1, [r4, #16]
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	b151      	cbz	r1, 801421a <_sungetc_r+0x60>
 8014204:	4299      	cmp	r1, r3
 8014206:	d208      	bcs.n	801421a <_sungetc_r+0x60>
 8014208:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801420c:	42a9      	cmp	r1, r5
 801420e:	d104      	bne.n	801421a <_sungetc_r+0x60>
 8014210:	3b01      	subs	r3, #1
 8014212:	3201      	adds	r2, #1
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	6062      	str	r2, [r4, #4]
 8014218:	e7d5      	b.n	80141c6 <_sungetc_r+0xc>
 801421a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801421e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014222:	6363      	str	r3, [r4, #52]	; 0x34
 8014224:	2303      	movs	r3, #3
 8014226:	63a3      	str	r3, [r4, #56]	; 0x38
 8014228:	4623      	mov	r3, r4
 801422a:	f803 5f46 	strb.w	r5, [r3, #70]!
 801422e:	6023      	str	r3, [r4, #0]
 8014230:	2301      	movs	r3, #1
 8014232:	e7dc      	b.n	80141ee <_sungetc_r+0x34>

08014234 <__ssrefill_r>:
 8014234:	b510      	push	{r4, lr}
 8014236:	460c      	mov	r4, r1
 8014238:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801423a:	b169      	cbz	r1, 8014258 <__ssrefill_r+0x24>
 801423c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014240:	4299      	cmp	r1, r3
 8014242:	d001      	beq.n	8014248 <__ssrefill_r+0x14>
 8014244:	f7fe ffd6 	bl	80131f4 <_free_r>
 8014248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801424a:	6063      	str	r3, [r4, #4]
 801424c:	2000      	movs	r0, #0
 801424e:	6360      	str	r0, [r4, #52]	; 0x34
 8014250:	b113      	cbz	r3, 8014258 <__ssrefill_r+0x24>
 8014252:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014254:	6023      	str	r3, [r4, #0]
 8014256:	bd10      	pop	{r4, pc}
 8014258:	6923      	ldr	r3, [r4, #16]
 801425a:	6023      	str	r3, [r4, #0]
 801425c:	2300      	movs	r3, #0
 801425e:	6063      	str	r3, [r4, #4]
 8014260:	89a3      	ldrh	r3, [r4, #12]
 8014262:	f043 0320 	orr.w	r3, r3, #32
 8014266:	81a3      	strh	r3, [r4, #12]
 8014268:	f04f 30ff 	mov.w	r0, #4294967295
 801426c:	e7f3      	b.n	8014256 <__ssrefill_r+0x22>
	...

08014270 <__ssvfiscanf_r>:
 8014270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014274:	460c      	mov	r4, r1
 8014276:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801427a:	2100      	movs	r1, #0
 801427c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014280:	49a6      	ldr	r1, [pc, #664]	; (801451c <__ssvfiscanf_r+0x2ac>)
 8014282:	91a0      	str	r1, [sp, #640]	; 0x280
 8014284:	f10d 0804 	add.w	r8, sp, #4
 8014288:	49a5      	ldr	r1, [pc, #660]	; (8014520 <__ssvfiscanf_r+0x2b0>)
 801428a:	4fa6      	ldr	r7, [pc, #664]	; (8014524 <__ssvfiscanf_r+0x2b4>)
 801428c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014528 <__ssvfiscanf_r+0x2b8>
 8014290:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014294:	4606      	mov	r6, r0
 8014296:	91a1      	str	r1, [sp, #644]	; 0x284
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	7813      	ldrb	r3, [r2, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	f000 815a 	beq.w	8014556 <__ssvfiscanf_r+0x2e6>
 80142a2:	5cf9      	ldrb	r1, [r7, r3]
 80142a4:	f011 0108 	ands.w	r1, r1, #8
 80142a8:	f102 0501 	add.w	r5, r2, #1
 80142ac:	d019      	beq.n	80142e2 <__ssvfiscanf_r+0x72>
 80142ae:	6863      	ldr	r3, [r4, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dd0f      	ble.n	80142d4 <__ssvfiscanf_r+0x64>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	781a      	ldrb	r2, [r3, #0]
 80142b8:	5cba      	ldrb	r2, [r7, r2]
 80142ba:	0712      	lsls	r2, r2, #28
 80142bc:	d401      	bmi.n	80142c2 <__ssvfiscanf_r+0x52>
 80142be:	462a      	mov	r2, r5
 80142c0:	e7eb      	b.n	801429a <__ssvfiscanf_r+0x2a>
 80142c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80142c4:	3201      	adds	r2, #1
 80142c6:	9245      	str	r2, [sp, #276]	; 0x114
 80142c8:	6862      	ldr	r2, [r4, #4]
 80142ca:	3301      	adds	r3, #1
 80142cc:	3a01      	subs	r2, #1
 80142ce:	6062      	str	r2, [r4, #4]
 80142d0:	6023      	str	r3, [r4, #0]
 80142d2:	e7ec      	b.n	80142ae <__ssvfiscanf_r+0x3e>
 80142d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80142d6:	4621      	mov	r1, r4
 80142d8:	4630      	mov	r0, r6
 80142da:	4798      	blx	r3
 80142dc:	2800      	cmp	r0, #0
 80142de:	d0e9      	beq.n	80142b4 <__ssvfiscanf_r+0x44>
 80142e0:	e7ed      	b.n	80142be <__ssvfiscanf_r+0x4e>
 80142e2:	2b25      	cmp	r3, #37	; 0x25
 80142e4:	d012      	beq.n	801430c <__ssvfiscanf_r+0x9c>
 80142e6:	469a      	mov	sl, r3
 80142e8:	6863      	ldr	r3, [r4, #4]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f340 8091 	ble.w	8014412 <__ssvfiscanf_r+0x1a2>
 80142f0:	6822      	ldr	r2, [r4, #0]
 80142f2:	7813      	ldrb	r3, [r2, #0]
 80142f4:	4553      	cmp	r3, sl
 80142f6:	f040 812e 	bne.w	8014556 <__ssvfiscanf_r+0x2e6>
 80142fa:	6863      	ldr	r3, [r4, #4]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	6063      	str	r3, [r4, #4]
 8014300:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014302:	3201      	adds	r2, #1
 8014304:	3301      	adds	r3, #1
 8014306:	6022      	str	r2, [r4, #0]
 8014308:	9345      	str	r3, [sp, #276]	; 0x114
 801430a:	e7d8      	b.n	80142be <__ssvfiscanf_r+0x4e>
 801430c:	9141      	str	r1, [sp, #260]	; 0x104
 801430e:	9143      	str	r1, [sp, #268]	; 0x10c
 8014310:	7853      	ldrb	r3, [r2, #1]
 8014312:	2b2a      	cmp	r3, #42	; 0x2a
 8014314:	bf02      	ittt	eq
 8014316:	2310      	moveq	r3, #16
 8014318:	1c95      	addeq	r5, r2, #2
 801431a:	9341      	streq	r3, [sp, #260]	; 0x104
 801431c:	220a      	movs	r2, #10
 801431e:	46aa      	mov	sl, r5
 8014320:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014324:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014328:	2b09      	cmp	r3, #9
 801432a:	d91c      	bls.n	8014366 <__ssvfiscanf_r+0xf6>
 801432c:	487e      	ldr	r0, [pc, #504]	; (8014528 <__ssvfiscanf_r+0x2b8>)
 801432e:	2203      	movs	r2, #3
 8014330:	f7eb ff5e 	bl	80001f0 <memchr>
 8014334:	b138      	cbz	r0, 8014346 <__ssvfiscanf_r+0xd6>
 8014336:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014338:	eba0 0009 	sub.w	r0, r0, r9
 801433c:	2301      	movs	r3, #1
 801433e:	4083      	lsls	r3, r0
 8014340:	4313      	orrs	r3, r2
 8014342:	9341      	str	r3, [sp, #260]	; 0x104
 8014344:	4655      	mov	r5, sl
 8014346:	f815 3b01 	ldrb.w	r3, [r5], #1
 801434a:	2b78      	cmp	r3, #120	; 0x78
 801434c:	d806      	bhi.n	801435c <__ssvfiscanf_r+0xec>
 801434e:	2b57      	cmp	r3, #87	; 0x57
 8014350:	d810      	bhi.n	8014374 <__ssvfiscanf_r+0x104>
 8014352:	2b25      	cmp	r3, #37	; 0x25
 8014354:	d0c7      	beq.n	80142e6 <__ssvfiscanf_r+0x76>
 8014356:	d857      	bhi.n	8014408 <__ssvfiscanf_r+0x198>
 8014358:	2b00      	cmp	r3, #0
 801435a:	d065      	beq.n	8014428 <__ssvfiscanf_r+0x1b8>
 801435c:	2303      	movs	r3, #3
 801435e:	9347      	str	r3, [sp, #284]	; 0x11c
 8014360:	230a      	movs	r3, #10
 8014362:	9342      	str	r3, [sp, #264]	; 0x108
 8014364:	e076      	b.n	8014454 <__ssvfiscanf_r+0x1e4>
 8014366:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014368:	fb02 1103 	mla	r1, r2, r3, r1
 801436c:	3930      	subs	r1, #48	; 0x30
 801436e:	9143      	str	r1, [sp, #268]	; 0x10c
 8014370:	4655      	mov	r5, sl
 8014372:	e7d4      	b.n	801431e <__ssvfiscanf_r+0xae>
 8014374:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014378:	2a20      	cmp	r2, #32
 801437a:	d8ef      	bhi.n	801435c <__ssvfiscanf_r+0xec>
 801437c:	a101      	add	r1, pc, #4	; (adr r1, 8014384 <__ssvfiscanf_r+0x114>)
 801437e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014382:	bf00      	nop
 8014384:	08014437 	.word	0x08014437
 8014388:	0801435d 	.word	0x0801435d
 801438c:	0801435d 	.word	0x0801435d
 8014390:	08014495 	.word	0x08014495
 8014394:	0801435d 	.word	0x0801435d
 8014398:	0801435d 	.word	0x0801435d
 801439c:	0801435d 	.word	0x0801435d
 80143a0:	0801435d 	.word	0x0801435d
 80143a4:	0801435d 	.word	0x0801435d
 80143a8:	0801435d 	.word	0x0801435d
 80143ac:	0801435d 	.word	0x0801435d
 80143b0:	080144ab 	.word	0x080144ab
 80143b4:	08014491 	.word	0x08014491
 80143b8:	0801440f 	.word	0x0801440f
 80143bc:	0801440f 	.word	0x0801440f
 80143c0:	0801440f 	.word	0x0801440f
 80143c4:	0801435d 	.word	0x0801435d
 80143c8:	0801444d 	.word	0x0801444d
 80143cc:	0801435d 	.word	0x0801435d
 80143d0:	0801435d 	.word	0x0801435d
 80143d4:	0801435d 	.word	0x0801435d
 80143d8:	0801435d 	.word	0x0801435d
 80143dc:	080144bb 	.word	0x080144bb
 80143e0:	08014489 	.word	0x08014489
 80143e4:	0801442f 	.word	0x0801442f
 80143e8:	0801435d 	.word	0x0801435d
 80143ec:	0801435d 	.word	0x0801435d
 80143f0:	080144b7 	.word	0x080144b7
 80143f4:	0801435d 	.word	0x0801435d
 80143f8:	08014491 	.word	0x08014491
 80143fc:	0801435d 	.word	0x0801435d
 8014400:	0801435d 	.word	0x0801435d
 8014404:	08014437 	.word	0x08014437
 8014408:	3b45      	subs	r3, #69	; 0x45
 801440a:	2b02      	cmp	r3, #2
 801440c:	d8a6      	bhi.n	801435c <__ssvfiscanf_r+0xec>
 801440e:	2305      	movs	r3, #5
 8014410:	e01f      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 8014412:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014414:	4621      	mov	r1, r4
 8014416:	4630      	mov	r0, r6
 8014418:	4798      	blx	r3
 801441a:	2800      	cmp	r0, #0
 801441c:	f43f af68 	beq.w	80142f0 <__ssvfiscanf_r+0x80>
 8014420:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014422:	2800      	cmp	r0, #0
 8014424:	f040 808d 	bne.w	8014542 <__ssvfiscanf_r+0x2d2>
 8014428:	f04f 30ff 	mov.w	r0, #4294967295
 801442c:	e08f      	b.n	801454e <__ssvfiscanf_r+0x2de>
 801442e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014430:	f042 0220 	orr.w	r2, r2, #32
 8014434:	9241      	str	r2, [sp, #260]	; 0x104
 8014436:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801443c:	9241      	str	r2, [sp, #260]	; 0x104
 801443e:	2210      	movs	r2, #16
 8014440:	2b6f      	cmp	r3, #111	; 0x6f
 8014442:	9242      	str	r2, [sp, #264]	; 0x108
 8014444:	bf34      	ite	cc
 8014446:	2303      	movcc	r3, #3
 8014448:	2304      	movcs	r3, #4
 801444a:	e002      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 801444c:	2300      	movs	r3, #0
 801444e:	9342      	str	r3, [sp, #264]	; 0x108
 8014450:	2303      	movs	r3, #3
 8014452:	9347      	str	r3, [sp, #284]	; 0x11c
 8014454:	6863      	ldr	r3, [r4, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	dd3d      	ble.n	80144d6 <__ssvfiscanf_r+0x266>
 801445a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801445c:	0659      	lsls	r1, r3, #25
 801445e:	d404      	bmi.n	801446a <__ssvfiscanf_r+0x1fa>
 8014460:	6823      	ldr	r3, [r4, #0]
 8014462:	781a      	ldrb	r2, [r3, #0]
 8014464:	5cba      	ldrb	r2, [r7, r2]
 8014466:	0712      	lsls	r2, r2, #28
 8014468:	d43c      	bmi.n	80144e4 <__ssvfiscanf_r+0x274>
 801446a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801446c:	2b02      	cmp	r3, #2
 801446e:	dc4b      	bgt.n	8014508 <__ssvfiscanf_r+0x298>
 8014470:	466b      	mov	r3, sp
 8014472:	4622      	mov	r2, r4
 8014474:	a941      	add	r1, sp, #260	; 0x104
 8014476:	4630      	mov	r0, r6
 8014478:	f000 f9b6 	bl	80147e8 <_scanf_chars>
 801447c:	2801      	cmp	r0, #1
 801447e:	d06a      	beq.n	8014556 <__ssvfiscanf_r+0x2e6>
 8014480:	2802      	cmp	r0, #2
 8014482:	f47f af1c 	bne.w	80142be <__ssvfiscanf_r+0x4e>
 8014486:	e7cb      	b.n	8014420 <__ssvfiscanf_r+0x1b0>
 8014488:	2308      	movs	r3, #8
 801448a:	9342      	str	r3, [sp, #264]	; 0x108
 801448c:	2304      	movs	r3, #4
 801448e:	e7e0      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 8014490:	220a      	movs	r2, #10
 8014492:	e7d5      	b.n	8014440 <__ssvfiscanf_r+0x1d0>
 8014494:	4629      	mov	r1, r5
 8014496:	4640      	mov	r0, r8
 8014498:	f000 faf4 	bl	8014a84 <__sccl>
 801449c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801449e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144a2:	9341      	str	r3, [sp, #260]	; 0x104
 80144a4:	4605      	mov	r5, r0
 80144a6:	2301      	movs	r3, #1
 80144a8:	e7d3      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 80144aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80144ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144b0:	9341      	str	r3, [sp, #260]	; 0x104
 80144b2:	2300      	movs	r3, #0
 80144b4:	e7cd      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 80144b6:	2302      	movs	r3, #2
 80144b8:	e7cb      	b.n	8014452 <__ssvfiscanf_r+0x1e2>
 80144ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80144bc:	06c3      	lsls	r3, r0, #27
 80144be:	f53f aefe 	bmi.w	80142be <__ssvfiscanf_r+0x4e>
 80144c2:	9b00      	ldr	r3, [sp, #0]
 80144c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80144c6:	1d19      	adds	r1, r3, #4
 80144c8:	9100      	str	r1, [sp, #0]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	07c0      	lsls	r0, r0, #31
 80144ce:	bf4c      	ite	mi
 80144d0:	801a      	strhmi	r2, [r3, #0]
 80144d2:	601a      	strpl	r2, [r3, #0]
 80144d4:	e6f3      	b.n	80142be <__ssvfiscanf_r+0x4e>
 80144d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144d8:	4621      	mov	r1, r4
 80144da:	4630      	mov	r0, r6
 80144dc:	4798      	blx	r3
 80144de:	2800      	cmp	r0, #0
 80144e0:	d0bb      	beq.n	801445a <__ssvfiscanf_r+0x1ea>
 80144e2:	e79d      	b.n	8014420 <__ssvfiscanf_r+0x1b0>
 80144e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80144e6:	3201      	adds	r2, #1
 80144e8:	9245      	str	r2, [sp, #276]	; 0x114
 80144ea:	6862      	ldr	r2, [r4, #4]
 80144ec:	3a01      	subs	r2, #1
 80144ee:	2a00      	cmp	r2, #0
 80144f0:	6062      	str	r2, [r4, #4]
 80144f2:	dd02      	ble.n	80144fa <__ssvfiscanf_r+0x28a>
 80144f4:	3301      	adds	r3, #1
 80144f6:	6023      	str	r3, [r4, #0]
 80144f8:	e7b2      	b.n	8014460 <__ssvfiscanf_r+0x1f0>
 80144fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80144fc:	4621      	mov	r1, r4
 80144fe:	4630      	mov	r0, r6
 8014500:	4798      	blx	r3
 8014502:	2800      	cmp	r0, #0
 8014504:	d0ac      	beq.n	8014460 <__ssvfiscanf_r+0x1f0>
 8014506:	e78b      	b.n	8014420 <__ssvfiscanf_r+0x1b0>
 8014508:	2b04      	cmp	r3, #4
 801450a:	dc0f      	bgt.n	801452c <__ssvfiscanf_r+0x2bc>
 801450c:	466b      	mov	r3, sp
 801450e:	4622      	mov	r2, r4
 8014510:	a941      	add	r1, sp, #260	; 0x104
 8014512:	4630      	mov	r0, r6
 8014514:	f000 f9c2 	bl	801489c <_scanf_i>
 8014518:	e7b0      	b.n	801447c <__ssvfiscanf_r+0x20c>
 801451a:	bf00      	nop
 801451c:	080141bb 	.word	0x080141bb
 8014520:	08014235 	.word	0x08014235
 8014524:	0801520d 	.word	0x0801520d
 8014528:	08015672 	.word	0x08015672
 801452c:	4b0b      	ldr	r3, [pc, #44]	; (801455c <__ssvfiscanf_r+0x2ec>)
 801452e:	2b00      	cmp	r3, #0
 8014530:	f43f aec5 	beq.w	80142be <__ssvfiscanf_r+0x4e>
 8014534:	466b      	mov	r3, sp
 8014536:	4622      	mov	r2, r4
 8014538:	a941      	add	r1, sp, #260	; 0x104
 801453a:	4630      	mov	r0, r6
 801453c:	f3af 8000 	nop.w
 8014540:	e79c      	b.n	801447c <__ssvfiscanf_r+0x20c>
 8014542:	89a3      	ldrh	r3, [r4, #12]
 8014544:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014548:	bf18      	it	ne
 801454a:	f04f 30ff 	movne.w	r0, #4294967295
 801454e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8014552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014556:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014558:	e7f9      	b.n	801454e <__ssvfiscanf_r+0x2de>
 801455a:	bf00      	nop
 801455c:	00000000 	.word	0x00000000

08014560 <__sfputc_r>:
 8014560:	6893      	ldr	r3, [r2, #8]
 8014562:	3b01      	subs	r3, #1
 8014564:	2b00      	cmp	r3, #0
 8014566:	b410      	push	{r4}
 8014568:	6093      	str	r3, [r2, #8]
 801456a:	da08      	bge.n	801457e <__sfputc_r+0x1e>
 801456c:	6994      	ldr	r4, [r2, #24]
 801456e:	42a3      	cmp	r3, r4
 8014570:	db01      	blt.n	8014576 <__sfputc_r+0x16>
 8014572:	290a      	cmp	r1, #10
 8014574:	d103      	bne.n	801457e <__sfputc_r+0x1e>
 8014576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801457a:	f000 baf6 	b.w	8014b6a <__swbuf_r>
 801457e:	6813      	ldr	r3, [r2, #0]
 8014580:	1c58      	adds	r0, r3, #1
 8014582:	6010      	str	r0, [r2, #0]
 8014584:	7019      	strb	r1, [r3, #0]
 8014586:	4608      	mov	r0, r1
 8014588:	f85d 4b04 	ldr.w	r4, [sp], #4
 801458c:	4770      	bx	lr

0801458e <__sfputs_r>:
 801458e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014590:	4606      	mov	r6, r0
 8014592:	460f      	mov	r7, r1
 8014594:	4614      	mov	r4, r2
 8014596:	18d5      	adds	r5, r2, r3
 8014598:	42ac      	cmp	r4, r5
 801459a:	d101      	bne.n	80145a0 <__sfputs_r+0x12>
 801459c:	2000      	movs	r0, #0
 801459e:	e007      	b.n	80145b0 <__sfputs_r+0x22>
 80145a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145a4:	463a      	mov	r2, r7
 80145a6:	4630      	mov	r0, r6
 80145a8:	f7ff ffda 	bl	8014560 <__sfputc_r>
 80145ac:	1c43      	adds	r3, r0, #1
 80145ae:	d1f3      	bne.n	8014598 <__sfputs_r+0xa>
 80145b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145b4 <_vfiprintf_r>:
 80145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b8:	460d      	mov	r5, r1
 80145ba:	b09d      	sub	sp, #116	; 0x74
 80145bc:	4614      	mov	r4, r2
 80145be:	4698      	mov	r8, r3
 80145c0:	4606      	mov	r6, r0
 80145c2:	b118      	cbz	r0, 80145cc <_vfiprintf_r+0x18>
 80145c4:	6a03      	ldr	r3, [r0, #32]
 80145c6:	b90b      	cbnz	r3, 80145cc <_vfiprintf_r+0x18>
 80145c8:	f7fd fa38 	bl	8011a3c <__sinit>
 80145cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145ce:	07d9      	lsls	r1, r3, #31
 80145d0:	d405      	bmi.n	80145de <_vfiprintf_r+0x2a>
 80145d2:	89ab      	ldrh	r3, [r5, #12]
 80145d4:	059a      	lsls	r2, r3, #22
 80145d6:	d402      	bmi.n	80145de <_vfiprintf_r+0x2a>
 80145d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145da:	f7fd ff57 	bl	801248c <__retarget_lock_acquire_recursive>
 80145de:	89ab      	ldrh	r3, [r5, #12]
 80145e0:	071b      	lsls	r3, r3, #28
 80145e2:	d501      	bpl.n	80145e8 <_vfiprintf_r+0x34>
 80145e4:	692b      	ldr	r3, [r5, #16]
 80145e6:	b99b      	cbnz	r3, 8014610 <_vfiprintf_r+0x5c>
 80145e8:	4629      	mov	r1, r5
 80145ea:	4630      	mov	r0, r6
 80145ec:	f000 fafa 	bl	8014be4 <__swsetup_r>
 80145f0:	b170      	cbz	r0, 8014610 <_vfiprintf_r+0x5c>
 80145f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145f4:	07dc      	lsls	r4, r3, #31
 80145f6:	d504      	bpl.n	8014602 <_vfiprintf_r+0x4e>
 80145f8:	f04f 30ff 	mov.w	r0, #4294967295
 80145fc:	b01d      	add	sp, #116	; 0x74
 80145fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014602:	89ab      	ldrh	r3, [r5, #12]
 8014604:	0598      	lsls	r0, r3, #22
 8014606:	d4f7      	bmi.n	80145f8 <_vfiprintf_r+0x44>
 8014608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801460a:	f7fd ff41 	bl	8012490 <__retarget_lock_release_recursive>
 801460e:	e7f3      	b.n	80145f8 <_vfiprintf_r+0x44>
 8014610:	2300      	movs	r3, #0
 8014612:	9309      	str	r3, [sp, #36]	; 0x24
 8014614:	2320      	movs	r3, #32
 8014616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801461a:	f8cd 800c 	str.w	r8, [sp, #12]
 801461e:	2330      	movs	r3, #48	; 0x30
 8014620:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80147d4 <_vfiprintf_r+0x220>
 8014624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014628:	f04f 0901 	mov.w	r9, #1
 801462c:	4623      	mov	r3, r4
 801462e:	469a      	mov	sl, r3
 8014630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014634:	b10a      	cbz	r2, 801463a <_vfiprintf_r+0x86>
 8014636:	2a25      	cmp	r2, #37	; 0x25
 8014638:	d1f9      	bne.n	801462e <_vfiprintf_r+0x7a>
 801463a:	ebba 0b04 	subs.w	fp, sl, r4
 801463e:	d00b      	beq.n	8014658 <_vfiprintf_r+0xa4>
 8014640:	465b      	mov	r3, fp
 8014642:	4622      	mov	r2, r4
 8014644:	4629      	mov	r1, r5
 8014646:	4630      	mov	r0, r6
 8014648:	f7ff ffa1 	bl	801458e <__sfputs_r>
 801464c:	3001      	adds	r0, #1
 801464e:	f000 80a9 	beq.w	80147a4 <_vfiprintf_r+0x1f0>
 8014652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014654:	445a      	add	r2, fp
 8014656:	9209      	str	r2, [sp, #36]	; 0x24
 8014658:	f89a 3000 	ldrb.w	r3, [sl]
 801465c:	2b00      	cmp	r3, #0
 801465e:	f000 80a1 	beq.w	80147a4 <_vfiprintf_r+0x1f0>
 8014662:	2300      	movs	r3, #0
 8014664:	f04f 32ff 	mov.w	r2, #4294967295
 8014668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801466c:	f10a 0a01 	add.w	sl, sl, #1
 8014670:	9304      	str	r3, [sp, #16]
 8014672:	9307      	str	r3, [sp, #28]
 8014674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014678:	931a      	str	r3, [sp, #104]	; 0x68
 801467a:	4654      	mov	r4, sl
 801467c:	2205      	movs	r2, #5
 801467e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014682:	4854      	ldr	r0, [pc, #336]	; (80147d4 <_vfiprintf_r+0x220>)
 8014684:	f7eb fdb4 	bl	80001f0 <memchr>
 8014688:	9a04      	ldr	r2, [sp, #16]
 801468a:	b9d8      	cbnz	r0, 80146c4 <_vfiprintf_r+0x110>
 801468c:	06d1      	lsls	r1, r2, #27
 801468e:	bf44      	itt	mi
 8014690:	2320      	movmi	r3, #32
 8014692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014696:	0713      	lsls	r3, r2, #28
 8014698:	bf44      	itt	mi
 801469a:	232b      	movmi	r3, #43	; 0x2b
 801469c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146a0:	f89a 3000 	ldrb.w	r3, [sl]
 80146a4:	2b2a      	cmp	r3, #42	; 0x2a
 80146a6:	d015      	beq.n	80146d4 <_vfiprintf_r+0x120>
 80146a8:	9a07      	ldr	r2, [sp, #28]
 80146aa:	4654      	mov	r4, sl
 80146ac:	2000      	movs	r0, #0
 80146ae:	f04f 0c0a 	mov.w	ip, #10
 80146b2:	4621      	mov	r1, r4
 80146b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146b8:	3b30      	subs	r3, #48	; 0x30
 80146ba:	2b09      	cmp	r3, #9
 80146bc:	d94d      	bls.n	801475a <_vfiprintf_r+0x1a6>
 80146be:	b1b0      	cbz	r0, 80146ee <_vfiprintf_r+0x13a>
 80146c0:	9207      	str	r2, [sp, #28]
 80146c2:	e014      	b.n	80146ee <_vfiprintf_r+0x13a>
 80146c4:	eba0 0308 	sub.w	r3, r0, r8
 80146c8:	fa09 f303 	lsl.w	r3, r9, r3
 80146cc:	4313      	orrs	r3, r2
 80146ce:	9304      	str	r3, [sp, #16]
 80146d0:	46a2      	mov	sl, r4
 80146d2:	e7d2      	b.n	801467a <_vfiprintf_r+0xc6>
 80146d4:	9b03      	ldr	r3, [sp, #12]
 80146d6:	1d19      	adds	r1, r3, #4
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	9103      	str	r1, [sp, #12]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	bfbb      	ittet	lt
 80146e0:	425b      	neglt	r3, r3
 80146e2:	f042 0202 	orrlt.w	r2, r2, #2
 80146e6:	9307      	strge	r3, [sp, #28]
 80146e8:	9307      	strlt	r3, [sp, #28]
 80146ea:	bfb8      	it	lt
 80146ec:	9204      	strlt	r2, [sp, #16]
 80146ee:	7823      	ldrb	r3, [r4, #0]
 80146f0:	2b2e      	cmp	r3, #46	; 0x2e
 80146f2:	d10c      	bne.n	801470e <_vfiprintf_r+0x15a>
 80146f4:	7863      	ldrb	r3, [r4, #1]
 80146f6:	2b2a      	cmp	r3, #42	; 0x2a
 80146f8:	d134      	bne.n	8014764 <_vfiprintf_r+0x1b0>
 80146fa:	9b03      	ldr	r3, [sp, #12]
 80146fc:	1d1a      	adds	r2, r3, #4
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	9203      	str	r2, [sp, #12]
 8014702:	2b00      	cmp	r3, #0
 8014704:	bfb8      	it	lt
 8014706:	f04f 33ff 	movlt.w	r3, #4294967295
 801470a:	3402      	adds	r4, #2
 801470c:	9305      	str	r3, [sp, #20]
 801470e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80147e4 <_vfiprintf_r+0x230>
 8014712:	7821      	ldrb	r1, [r4, #0]
 8014714:	2203      	movs	r2, #3
 8014716:	4650      	mov	r0, sl
 8014718:	f7eb fd6a 	bl	80001f0 <memchr>
 801471c:	b138      	cbz	r0, 801472e <_vfiprintf_r+0x17a>
 801471e:	9b04      	ldr	r3, [sp, #16]
 8014720:	eba0 000a 	sub.w	r0, r0, sl
 8014724:	2240      	movs	r2, #64	; 0x40
 8014726:	4082      	lsls	r2, r0
 8014728:	4313      	orrs	r3, r2
 801472a:	3401      	adds	r4, #1
 801472c:	9304      	str	r3, [sp, #16]
 801472e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014732:	4829      	ldr	r0, [pc, #164]	; (80147d8 <_vfiprintf_r+0x224>)
 8014734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014738:	2206      	movs	r2, #6
 801473a:	f7eb fd59 	bl	80001f0 <memchr>
 801473e:	2800      	cmp	r0, #0
 8014740:	d03f      	beq.n	80147c2 <_vfiprintf_r+0x20e>
 8014742:	4b26      	ldr	r3, [pc, #152]	; (80147dc <_vfiprintf_r+0x228>)
 8014744:	bb1b      	cbnz	r3, 801478e <_vfiprintf_r+0x1da>
 8014746:	9b03      	ldr	r3, [sp, #12]
 8014748:	3307      	adds	r3, #7
 801474a:	f023 0307 	bic.w	r3, r3, #7
 801474e:	3308      	adds	r3, #8
 8014750:	9303      	str	r3, [sp, #12]
 8014752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014754:	443b      	add	r3, r7
 8014756:	9309      	str	r3, [sp, #36]	; 0x24
 8014758:	e768      	b.n	801462c <_vfiprintf_r+0x78>
 801475a:	fb0c 3202 	mla	r2, ip, r2, r3
 801475e:	460c      	mov	r4, r1
 8014760:	2001      	movs	r0, #1
 8014762:	e7a6      	b.n	80146b2 <_vfiprintf_r+0xfe>
 8014764:	2300      	movs	r3, #0
 8014766:	3401      	adds	r4, #1
 8014768:	9305      	str	r3, [sp, #20]
 801476a:	4619      	mov	r1, r3
 801476c:	f04f 0c0a 	mov.w	ip, #10
 8014770:	4620      	mov	r0, r4
 8014772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014776:	3a30      	subs	r2, #48	; 0x30
 8014778:	2a09      	cmp	r2, #9
 801477a:	d903      	bls.n	8014784 <_vfiprintf_r+0x1d0>
 801477c:	2b00      	cmp	r3, #0
 801477e:	d0c6      	beq.n	801470e <_vfiprintf_r+0x15a>
 8014780:	9105      	str	r1, [sp, #20]
 8014782:	e7c4      	b.n	801470e <_vfiprintf_r+0x15a>
 8014784:	fb0c 2101 	mla	r1, ip, r1, r2
 8014788:	4604      	mov	r4, r0
 801478a:	2301      	movs	r3, #1
 801478c:	e7f0      	b.n	8014770 <_vfiprintf_r+0x1bc>
 801478e:	ab03      	add	r3, sp, #12
 8014790:	9300      	str	r3, [sp, #0]
 8014792:	462a      	mov	r2, r5
 8014794:	4b12      	ldr	r3, [pc, #72]	; (80147e0 <_vfiprintf_r+0x22c>)
 8014796:	a904      	add	r1, sp, #16
 8014798:	4630      	mov	r0, r6
 801479a:	f7fc fcfd 	bl	8011198 <_printf_float>
 801479e:	4607      	mov	r7, r0
 80147a0:	1c78      	adds	r0, r7, #1
 80147a2:	d1d6      	bne.n	8014752 <_vfiprintf_r+0x19e>
 80147a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147a6:	07d9      	lsls	r1, r3, #31
 80147a8:	d405      	bmi.n	80147b6 <_vfiprintf_r+0x202>
 80147aa:	89ab      	ldrh	r3, [r5, #12]
 80147ac:	059a      	lsls	r2, r3, #22
 80147ae:	d402      	bmi.n	80147b6 <_vfiprintf_r+0x202>
 80147b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147b2:	f7fd fe6d 	bl	8012490 <__retarget_lock_release_recursive>
 80147b6:	89ab      	ldrh	r3, [r5, #12]
 80147b8:	065b      	lsls	r3, r3, #25
 80147ba:	f53f af1d 	bmi.w	80145f8 <_vfiprintf_r+0x44>
 80147be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147c0:	e71c      	b.n	80145fc <_vfiprintf_r+0x48>
 80147c2:	ab03      	add	r3, sp, #12
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	462a      	mov	r2, r5
 80147c8:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <_vfiprintf_r+0x22c>)
 80147ca:	a904      	add	r1, sp, #16
 80147cc:	4630      	mov	r0, r6
 80147ce:	f7fc ff87 	bl	80116e0 <_printf_i>
 80147d2:	e7e4      	b.n	801479e <_vfiprintf_r+0x1ea>
 80147d4:	0801566c 	.word	0x0801566c
 80147d8:	08015676 	.word	0x08015676
 80147dc:	08011199 	.word	0x08011199
 80147e0:	0801458f 	.word	0x0801458f
 80147e4:	08015672 	.word	0x08015672

080147e8 <_scanf_chars>:
 80147e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147ec:	4615      	mov	r5, r2
 80147ee:	688a      	ldr	r2, [r1, #8]
 80147f0:	4680      	mov	r8, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	b932      	cbnz	r2, 8014804 <_scanf_chars+0x1c>
 80147f6:	698a      	ldr	r2, [r1, #24]
 80147f8:	2a00      	cmp	r2, #0
 80147fa:	bf0c      	ite	eq
 80147fc:	2201      	moveq	r2, #1
 80147fe:	f04f 32ff 	movne.w	r2, #4294967295
 8014802:	608a      	str	r2, [r1, #8]
 8014804:	6822      	ldr	r2, [r4, #0]
 8014806:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014898 <_scanf_chars+0xb0>
 801480a:	06d1      	lsls	r1, r2, #27
 801480c:	bf5f      	itttt	pl
 801480e:	681a      	ldrpl	r2, [r3, #0]
 8014810:	1d11      	addpl	r1, r2, #4
 8014812:	6019      	strpl	r1, [r3, #0]
 8014814:	6816      	ldrpl	r6, [r2, #0]
 8014816:	2700      	movs	r7, #0
 8014818:	69a0      	ldr	r0, [r4, #24]
 801481a:	b188      	cbz	r0, 8014840 <_scanf_chars+0x58>
 801481c:	2801      	cmp	r0, #1
 801481e:	d107      	bne.n	8014830 <_scanf_chars+0x48>
 8014820:	682a      	ldr	r2, [r5, #0]
 8014822:	7811      	ldrb	r1, [r2, #0]
 8014824:	6962      	ldr	r2, [r4, #20]
 8014826:	5c52      	ldrb	r2, [r2, r1]
 8014828:	b952      	cbnz	r2, 8014840 <_scanf_chars+0x58>
 801482a:	2f00      	cmp	r7, #0
 801482c:	d031      	beq.n	8014892 <_scanf_chars+0xaa>
 801482e:	e022      	b.n	8014876 <_scanf_chars+0x8e>
 8014830:	2802      	cmp	r0, #2
 8014832:	d120      	bne.n	8014876 <_scanf_chars+0x8e>
 8014834:	682b      	ldr	r3, [r5, #0]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	f819 3003 	ldrb.w	r3, [r9, r3]
 801483c:	071b      	lsls	r3, r3, #28
 801483e:	d41a      	bmi.n	8014876 <_scanf_chars+0x8e>
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	06da      	lsls	r2, r3, #27
 8014844:	bf5e      	ittt	pl
 8014846:	682b      	ldrpl	r3, [r5, #0]
 8014848:	781b      	ldrbpl	r3, [r3, #0]
 801484a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801484e:	682a      	ldr	r2, [r5, #0]
 8014850:	686b      	ldr	r3, [r5, #4]
 8014852:	3201      	adds	r2, #1
 8014854:	602a      	str	r2, [r5, #0]
 8014856:	68a2      	ldr	r2, [r4, #8]
 8014858:	3b01      	subs	r3, #1
 801485a:	3a01      	subs	r2, #1
 801485c:	606b      	str	r3, [r5, #4]
 801485e:	3701      	adds	r7, #1
 8014860:	60a2      	str	r2, [r4, #8]
 8014862:	b142      	cbz	r2, 8014876 <_scanf_chars+0x8e>
 8014864:	2b00      	cmp	r3, #0
 8014866:	dcd7      	bgt.n	8014818 <_scanf_chars+0x30>
 8014868:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801486c:	4629      	mov	r1, r5
 801486e:	4640      	mov	r0, r8
 8014870:	4798      	blx	r3
 8014872:	2800      	cmp	r0, #0
 8014874:	d0d0      	beq.n	8014818 <_scanf_chars+0x30>
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	f013 0310 	ands.w	r3, r3, #16
 801487c:	d105      	bne.n	801488a <_scanf_chars+0xa2>
 801487e:	68e2      	ldr	r2, [r4, #12]
 8014880:	3201      	adds	r2, #1
 8014882:	60e2      	str	r2, [r4, #12]
 8014884:	69a2      	ldr	r2, [r4, #24]
 8014886:	b102      	cbz	r2, 801488a <_scanf_chars+0xa2>
 8014888:	7033      	strb	r3, [r6, #0]
 801488a:	6923      	ldr	r3, [r4, #16]
 801488c:	443b      	add	r3, r7
 801488e:	6123      	str	r3, [r4, #16]
 8014890:	2000      	movs	r0, #0
 8014892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014896:	bf00      	nop
 8014898:	0801520d 	.word	0x0801520d

0801489c <_scanf_i>:
 801489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a0:	4698      	mov	r8, r3
 80148a2:	4b74      	ldr	r3, [pc, #464]	; (8014a74 <_scanf_i+0x1d8>)
 80148a4:	460c      	mov	r4, r1
 80148a6:	4682      	mov	sl, r0
 80148a8:	4616      	mov	r6, r2
 80148aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80148ae:	b087      	sub	sp, #28
 80148b0:	ab03      	add	r3, sp, #12
 80148b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80148b6:	4b70      	ldr	r3, [pc, #448]	; (8014a78 <_scanf_i+0x1dc>)
 80148b8:	69a1      	ldr	r1, [r4, #24]
 80148ba:	4a70      	ldr	r2, [pc, #448]	; (8014a7c <_scanf_i+0x1e0>)
 80148bc:	2903      	cmp	r1, #3
 80148be:	bf18      	it	ne
 80148c0:	461a      	movne	r2, r3
 80148c2:	68a3      	ldr	r3, [r4, #8]
 80148c4:	9201      	str	r2, [sp, #4]
 80148c6:	1e5a      	subs	r2, r3, #1
 80148c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80148cc:	bf88      	it	hi
 80148ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80148d2:	4627      	mov	r7, r4
 80148d4:	bf82      	ittt	hi
 80148d6:	eb03 0905 	addhi.w	r9, r3, r5
 80148da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80148de:	60a3      	strhi	r3, [r4, #8]
 80148e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80148e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80148e8:	bf98      	it	ls
 80148ea:	f04f 0900 	movls.w	r9, #0
 80148ee:	6023      	str	r3, [r4, #0]
 80148f0:	463d      	mov	r5, r7
 80148f2:	f04f 0b00 	mov.w	fp, #0
 80148f6:	6831      	ldr	r1, [r6, #0]
 80148f8:	ab03      	add	r3, sp, #12
 80148fa:	7809      	ldrb	r1, [r1, #0]
 80148fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014900:	2202      	movs	r2, #2
 8014902:	f7eb fc75 	bl	80001f0 <memchr>
 8014906:	b328      	cbz	r0, 8014954 <_scanf_i+0xb8>
 8014908:	f1bb 0f01 	cmp.w	fp, #1
 801490c:	d159      	bne.n	80149c2 <_scanf_i+0x126>
 801490e:	6862      	ldr	r2, [r4, #4]
 8014910:	b92a      	cbnz	r2, 801491e <_scanf_i+0x82>
 8014912:	6822      	ldr	r2, [r4, #0]
 8014914:	2308      	movs	r3, #8
 8014916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801491a:	6063      	str	r3, [r4, #4]
 801491c:	6022      	str	r2, [r4, #0]
 801491e:	6822      	ldr	r2, [r4, #0]
 8014920:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014924:	6022      	str	r2, [r4, #0]
 8014926:	68a2      	ldr	r2, [r4, #8]
 8014928:	1e51      	subs	r1, r2, #1
 801492a:	60a1      	str	r1, [r4, #8]
 801492c:	b192      	cbz	r2, 8014954 <_scanf_i+0xb8>
 801492e:	6832      	ldr	r2, [r6, #0]
 8014930:	1c51      	adds	r1, r2, #1
 8014932:	6031      	str	r1, [r6, #0]
 8014934:	7812      	ldrb	r2, [r2, #0]
 8014936:	f805 2b01 	strb.w	r2, [r5], #1
 801493a:	6872      	ldr	r2, [r6, #4]
 801493c:	3a01      	subs	r2, #1
 801493e:	2a00      	cmp	r2, #0
 8014940:	6072      	str	r2, [r6, #4]
 8014942:	dc07      	bgt.n	8014954 <_scanf_i+0xb8>
 8014944:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014948:	4631      	mov	r1, r6
 801494a:	4650      	mov	r0, sl
 801494c:	4790      	blx	r2
 801494e:	2800      	cmp	r0, #0
 8014950:	f040 8085 	bne.w	8014a5e <_scanf_i+0x1c2>
 8014954:	f10b 0b01 	add.w	fp, fp, #1
 8014958:	f1bb 0f03 	cmp.w	fp, #3
 801495c:	d1cb      	bne.n	80148f6 <_scanf_i+0x5a>
 801495e:	6863      	ldr	r3, [r4, #4]
 8014960:	b90b      	cbnz	r3, 8014966 <_scanf_i+0xca>
 8014962:	230a      	movs	r3, #10
 8014964:	6063      	str	r3, [r4, #4]
 8014966:	6863      	ldr	r3, [r4, #4]
 8014968:	4945      	ldr	r1, [pc, #276]	; (8014a80 <_scanf_i+0x1e4>)
 801496a:	6960      	ldr	r0, [r4, #20]
 801496c:	1ac9      	subs	r1, r1, r3
 801496e:	f000 f889 	bl	8014a84 <__sccl>
 8014972:	f04f 0b00 	mov.w	fp, #0
 8014976:	68a3      	ldr	r3, [r4, #8]
 8014978:	6822      	ldr	r2, [r4, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d03d      	beq.n	80149fa <_scanf_i+0x15e>
 801497e:	6831      	ldr	r1, [r6, #0]
 8014980:	6960      	ldr	r0, [r4, #20]
 8014982:	f891 c000 	ldrb.w	ip, [r1]
 8014986:	f810 000c 	ldrb.w	r0, [r0, ip]
 801498a:	2800      	cmp	r0, #0
 801498c:	d035      	beq.n	80149fa <_scanf_i+0x15e>
 801498e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014992:	d124      	bne.n	80149de <_scanf_i+0x142>
 8014994:	0510      	lsls	r0, r2, #20
 8014996:	d522      	bpl.n	80149de <_scanf_i+0x142>
 8014998:	f10b 0b01 	add.w	fp, fp, #1
 801499c:	f1b9 0f00 	cmp.w	r9, #0
 80149a0:	d003      	beq.n	80149aa <_scanf_i+0x10e>
 80149a2:	3301      	adds	r3, #1
 80149a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80149a8:	60a3      	str	r3, [r4, #8]
 80149aa:	6873      	ldr	r3, [r6, #4]
 80149ac:	3b01      	subs	r3, #1
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	6073      	str	r3, [r6, #4]
 80149b2:	dd1b      	ble.n	80149ec <_scanf_i+0x150>
 80149b4:	6833      	ldr	r3, [r6, #0]
 80149b6:	3301      	adds	r3, #1
 80149b8:	6033      	str	r3, [r6, #0]
 80149ba:	68a3      	ldr	r3, [r4, #8]
 80149bc:	3b01      	subs	r3, #1
 80149be:	60a3      	str	r3, [r4, #8]
 80149c0:	e7d9      	b.n	8014976 <_scanf_i+0xda>
 80149c2:	f1bb 0f02 	cmp.w	fp, #2
 80149c6:	d1ae      	bne.n	8014926 <_scanf_i+0x8a>
 80149c8:	6822      	ldr	r2, [r4, #0]
 80149ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80149ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80149d2:	d1bf      	bne.n	8014954 <_scanf_i+0xb8>
 80149d4:	2310      	movs	r3, #16
 80149d6:	6063      	str	r3, [r4, #4]
 80149d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80149dc:	e7a2      	b.n	8014924 <_scanf_i+0x88>
 80149de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80149e2:	6022      	str	r2, [r4, #0]
 80149e4:	780b      	ldrb	r3, [r1, #0]
 80149e6:	f805 3b01 	strb.w	r3, [r5], #1
 80149ea:	e7de      	b.n	80149aa <_scanf_i+0x10e>
 80149ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80149f0:	4631      	mov	r1, r6
 80149f2:	4650      	mov	r0, sl
 80149f4:	4798      	blx	r3
 80149f6:	2800      	cmp	r0, #0
 80149f8:	d0df      	beq.n	80149ba <_scanf_i+0x11e>
 80149fa:	6823      	ldr	r3, [r4, #0]
 80149fc:	05d9      	lsls	r1, r3, #23
 80149fe:	d50d      	bpl.n	8014a1c <_scanf_i+0x180>
 8014a00:	42bd      	cmp	r5, r7
 8014a02:	d909      	bls.n	8014a18 <_scanf_i+0x17c>
 8014a04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a0c:	4632      	mov	r2, r6
 8014a0e:	4650      	mov	r0, sl
 8014a10:	4798      	blx	r3
 8014a12:	f105 39ff 	add.w	r9, r5, #4294967295
 8014a16:	464d      	mov	r5, r9
 8014a18:	42bd      	cmp	r5, r7
 8014a1a:	d028      	beq.n	8014a6e <_scanf_i+0x1d2>
 8014a1c:	6822      	ldr	r2, [r4, #0]
 8014a1e:	f012 0210 	ands.w	r2, r2, #16
 8014a22:	d113      	bne.n	8014a4c <_scanf_i+0x1b0>
 8014a24:	702a      	strb	r2, [r5, #0]
 8014a26:	6863      	ldr	r3, [r4, #4]
 8014a28:	9e01      	ldr	r6, [sp, #4]
 8014a2a:	4639      	mov	r1, r7
 8014a2c:	4650      	mov	r0, sl
 8014a2e:	47b0      	blx	r6
 8014a30:	f8d8 3000 	ldr.w	r3, [r8]
 8014a34:	6821      	ldr	r1, [r4, #0]
 8014a36:	1d1a      	adds	r2, r3, #4
 8014a38:	f8c8 2000 	str.w	r2, [r8]
 8014a3c:	f011 0f20 	tst.w	r1, #32
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	d00f      	beq.n	8014a64 <_scanf_i+0x1c8>
 8014a44:	6018      	str	r0, [r3, #0]
 8014a46:	68e3      	ldr	r3, [r4, #12]
 8014a48:	3301      	adds	r3, #1
 8014a4a:	60e3      	str	r3, [r4, #12]
 8014a4c:	6923      	ldr	r3, [r4, #16]
 8014a4e:	1bed      	subs	r5, r5, r7
 8014a50:	445d      	add	r5, fp
 8014a52:	442b      	add	r3, r5
 8014a54:	6123      	str	r3, [r4, #16]
 8014a56:	2000      	movs	r0, #0
 8014a58:	b007      	add	sp, #28
 8014a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a5e:	f04f 0b00 	mov.w	fp, #0
 8014a62:	e7ca      	b.n	80149fa <_scanf_i+0x15e>
 8014a64:	07ca      	lsls	r2, r1, #31
 8014a66:	bf4c      	ite	mi
 8014a68:	8018      	strhmi	r0, [r3, #0]
 8014a6a:	6018      	strpl	r0, [r3, #0]
 8014a6c:	e7eb      	b.n	8014a46 <_scanf_i+0x1aa>
 8014a6e:	2001      	movs	r0, #1
 8014a70:	e7f2      	b.n	8014a58 <_scanf_i+0x1bc>
 8014a72:	bf00      	nop
 8014a74:	080151b8 	.word	0x080151b8
 8014a78:	08013b01 	.word	0x08013b01
 8014a7c:	08011041 	.word	0x08011041
 8014a80:	08015697 	.word	0x08015697

08014a84 <__sccl>:
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	780b      	ldrb	r3, [r1, #0]
 8014a88:	4604      	mov	r4, r0
 8014a8a:	2b5e      	cmp	r3, #94	; 0x5e
 8014a8c:	bf0b      	itete	eq
 8014a8e:	784b      	ldrbeq	r3, [r1, #1]
 8014a90:	1c4a      	addne	r2, r1, #1
 8014a92:	1c8a      	addeq	r2, r1, #2
 8014a94:	2100      	movne	r1, #0
 8014a96:	bf08      	it	eq
 8014a98:	2101      	moveq	r1, #1
 8014a9a:	3801      	subs	r0, #1
 8014a9c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014aa0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014aa4:	42a8      	cmp	r0, r5
 8014aa6:	d1fb      	bne.n	8014aa0 <__sccl+0x1c>
 8014aa8:	b90b      	cbnz	r3, 8014aae <__sccl+0x2a>
 8014aaa:	1e50      	subs	r0, r2, #1
 8014aac:	bd70      	pop	{r4, r5, r6, pc}
 8014aae:	f081 0101 	eor.w	r1, r1, #1
 8014ab2:	54e1      	strb	r1, [r4, r3]
 8014ab4:	4610      	mov	r0, r2
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014abc:	2d2d      	cmp	r5, #45	; 0x2d
 8014abe:	d005      	beq.n	8014acc <__sccl+0x48>
 8014ac0:	2d5d      	cmp	r5, #93	; 0x5d
 8014ac2:	d016      	beq.n	8014af2 <__sccl+0x6e>
 8014ac4:	2d00      	cmp	r5, #0
 8014ac6:	d0f1      	beq.n	8014aac <__sccl+0x28>
 8014ac8:	462b      	mov	r3, r5
 8014aca:	e7f2      	b.n	8014ab2 <__sccl+0x2e>
 8014acc:	7846      	ldrb	r6, [r0, #1]
 8014ace:	2e5d      	cmp	r6, #93	; 0x5d
 8014ad0:	d0fa      	beq.n	8014ac8 <__sccl+0x44>
 8014ad2:	42b3      	cmp	r3, r6
 8014ad4:	dcf8      	bgt.n	8014ac8 <__sccl+0x44>
 8014ad6:	3002      	adds	r0, #2
 8014ad8:	461a      	mov	r2, r3
 8014ada:	3201      	adds	r2, #1
 8014adc:	4296      	cmp	r6, r2
 8014ade:	54a1      	strb	r1, [r4, r2]
 8014ae0:	dcfb      	bgt.n	8014ada <__sccl+0x56>
 8014ae2:	1af2      	subs	r2, r6, r3
 8014ae4:	3a01      	subs	r2, #1
 8014ae6:	1c5d      	adds	r5, r3, #1
 8014ae8:	42b3      	cmp	r3, r6
 8014aea:	bfa8      	it	ge
 8014aec:	2200      	movge	r2, #0
 8014aee:	18ab      	adds	r3, r5, r2
 8014af0:	e7e1      	b.n	8014ab6 <__sccl+0x32>
 8014af2:	4610      	mov	r0, r2
 8014af4:	e7da      	b.n	8014aac <__sccl+0x28>

08014af6 <__submore>:
 8014af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014afa:	460c      	mov	r4, r1
 8014afc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b02:	4299      	cmp	r1, r3
 8014b04:	d11d      	bne.n	8014b42 <__submore+0x4c>
 8014b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b0a:	f7fc f953 	bl	8010db4 <_malloc_r>
 8014b0e:	b918      	cbnz	r0, 8014b18 <__submore+0x22>
 8014b10:	f04f 30ff 	mov.w	r0, #4294967295
 8014b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b1e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014b22:	6360      	str	r0, [r4, #52]	; 0x34
 8014b24:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014b28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014b2c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014b30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014b34:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014b38:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014b3c:	6020      	str	r0, [r4, #0]
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e7e8      	b.n	8014b14 <__submore+0x1e>
 8014b42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014b44:	0077      	lsls	r7, r6, #1
 8014b46:	463a      	mov	r2, r7
 8014b48:	f7fc f9c8 	bl	8010edc <_realloc_r>
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0de      	beq.n	8014b10 <__submore+0x1a>
 8014b52:	eb00 0806 	add.w	r8, r0, r6
 8014b56:	4601      	mov	r1, r0
 8014b58:	4632      	mov	r2, r6
 8014b5a:	4640      	mov	r0, r8
 8014b5c:	f7fd fca1 	bl	80124a2 <memcpy>
 8014b60:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014b64:	f8c4 8000 	str.w	r8, [r4]
 8014b68:	e7e9      	b.n	8014b3e <__submore+0x48>

08014b6a <__swbuf_r>:
 8014b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b6c:	460e      	mov	r6, r1
 8014b6e:	4614      	mov	r4, r2
 8014b70:	4605      	mov	r5, r0
 8014b72:	b118      	cbz	r0, 8014b7c <__swbuf_r+0x12>
 8014b74:	6a03      	ldr	r3, [r0, #32]
 8014b76:	b90b      	cbnz	r3, 8014b7c <__swbuf_r+0x12>
 8014b78:	f7fc ff60 	bl	8011a3c <__sinit>
 8014b7c:	69a3      	ldr	r3, [r4, #24]
 8014b7e:	60a3      	str	r3, [r4, #8]
 8014b80:	89a3      	ldrh	r3, [r4, #12]
 8014b82:	071a      	lsls	r2, r3, #28
 8014b84:	d525      	bpl.n	8014bd2 <__swbuf_r+0x68>
 8014b86:	6923      	ldr	r3, [r4, #16]
 8014b88:	b31b      	cbz	r3, 8014bd2 <__swbuf_r+0x68>
 8014b8a:	6823      	ldr	r3, [r4, #0]
 8014b8c:	6922      	ldr	r2, [r4, #16]
 8014b8e:	1a98      	subs	r0, r3, r2
 8014b90:	6963      	ldr	r3, [r4, #20]
 8014b92:	b2f6      	uxtb	r6, r6
 8014b94:	4283      	cmp	r3, r0
 8014b96:	4637      	mov	r7, r6
 8014b98:	dc04      	bgt.n	8014ba4 <__swbuf_r+0x3a>
 8014b9a:	4621      	mov	r1, r4
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	f7ff f999 	bl	8013ed4 <_fflush_r>
 8014ba2:	b9e0      	cbnz	r0, 8014bde <__swbuf_r+0x74>
 8014ba4:	68a3      	ldr	r3, [r4, #8]
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	60a3      	str	r3, [r4, #8]
 8014baa:	6823      	ldr	r3, [r4, #0]
 8014bac:	1c5a      	adds	r2, r3, #1
 8014bae:	6022      	str	r2, [r4, #0]
 8014bb0:	701e      	strb	r6, [r3, #0]
 8014bb2:	6962      	ldr	r2, [r4, #20]
 8014bb4:	1c43      	adds	r3, r0, #1
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d004      	beq.n	8014bc4 <__swbuf_r+0x5a>
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	07db      	lsls	r3, r3, #31
 8014bbe:	d506      	bpl.n	8014bce <__swbuf_r+0x64>
 8014bc0:	2e0a      	cmp	r6, #10
 8014bc2:	d104      	bne.n	8014bce <__swbuf_r+0x64>
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	f7ff f984 	bl	8013ed4 <_fflush_r>
 8014bcc:	b938      	cbnz	r0, 8014bde <__swbuf_r+0x74>
 8014bce:	4638      	mov	r0, r7
 8014bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bd2:	4621      	mov	r1, r4
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	f000 f805 	bl	8014be4 <__swsetup_r>
 8014bda:	2800      	cmp	r0, #0
 8014bdc:	d0d5      	beq.n	8014b8a <__swbuf_r+0x20>
 8014bde:	f04f 37ff 	mov.w	r7, #4294967295
 8014be2:	e7f4      	b.n	8014bce <__swbuf_r+0x64>

08014be4 <__swsetup_r>:
 8014be4:	b538      	push	{r3, r4, r5, lr}
 8014be6:	4b2a      	ldr	r3, [pc, #168]	; (8014c90 <__swsetup_r+0xac>)
 8014be8:	4605      	mov	r5, r0
 8014bea:	6818      	ldr	r0, [r3, #0]
 8014bec:	460c      	mov	r4, r1
 8014bee:	b118      	cbz	r0, 8014bf8 <__swsetup_r+0x14>
 8014bf0:	6a03      	ldr	r3, [r0, #32]
 8014bf2:	b90b      	cbnz	r3, 8014bf8 <__swsetup_r+0x14>
 8014bf4:	f7fc ff22 	bl	8011a3c <__sinit>
 8014bf8:	89a3      	ldrh	r3, [r4, #12]
 8014bfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bfe:	0718      	lsls	r0, r3, #28
 8014c00:	d422      	bmi.n	8014c48 <__swsetup_r+0x64>
 8014c02:	06d9      	lsls	r1, r3, #27
 8014c04:	d407      	bmi.n	8014c16 <__swsetup_r+0x32>
 8014c06:	2309      	movs	r3, #9
 8014c08:	602b      	str	r3, [r5, #0]
 8014c0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c0e:	81a3      	strh	r3, [r4, #12]
 8014c10:	f04f 30ff 	mov.w	r0, #4294967295
 8014c14:	e034      	b.n	8014c80 <__swsetup_r+0x9c>
 8014c16:	0758      	lsls	r0, r3, #29
 8014c18:	d512      	bpl.n	8014c40 <__swsetup_r+0x5c>
 8014c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c1c:	b141      	cbz	r1, 8014c30 <__swsetup_r+0x4c>
 8014c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c22:	4299      	cmp	r1, r3
 8014c24:	d002      	beq.n	8014c2c <__swsetup_r+0x48>
 8014c26:	4628      	mov	r0, r5
 8014c28:	f7fe fae4 	bl	80131f4 <_free_r>
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c36:	81a3      	strh	r3, [r4, #12]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	6063      	str	r3, [r4, #4]
 8014c3c:	6923      	ldr	r3, [r4, #16]
 8014c3e:	6023      	str	r3, [r4, #0]
 8014c40:	89a3      	ldrh	r3, [r4, #12]
 8014c42:	f043 0308 	orr.w	r3, r3, #8
 8014c46:	81a3      	strh	r3, [r4, #12]
 8014c48:	6923      	ldr	r3, [r4, #16]
 8014c4a:	b94b      	cbnz	r3, 8014c60 <__swsetup_r+0x7c>
 8014c4c:	89a3      	ldrh	r3, [r4, #12]
 8014c4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c56:	d003      	beq.n	8014c60 <__swsetup_r+0x7c>
 8014c58:	4621      	mov	r1, r4
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f000 f884 	bl	8014d68 <__smakebuf_r>
 8014c60:	89a0      	ldrh	r0, [r4, #12]
 8014c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c66:	f010 0301 	ands.w	r3, r0, #1
 8014c6a:	d00a      	beq.n	8014c82 <__swsetup_r+0x9e>
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	60a3      	str	r3, [r4, #8]
 8014c70:	6963      	ldr	r3, [r4, #20]
 8014c72:	425b      	negs	r3, r3
 8014c74:	61a3      	str	r3, [r4, #24]
 8014c76:	6923      	ldr	r3, [r4, #16]
 8014c78:	b943      	cbnz	r3, 8014c8c <__swsetup_r+0xa8>
 8014c7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c7e:	d1c4      	bne.n	8014c0a <__swsetup_r+0x26>
 8014c80:	bd38      	pop	{r3, r4, r5, pc}
 8014c82:	0781      	lsls	r1, r0, #30
 8014c84:	bf58      	it	pl
 8014c86:	6963      	ldrpl	r3, [r4, #20]
 8014c88:	60a3      	str	r3, [r4, #8]
 8014c8a:	e7f4      	b.n	8014c76 <__swsetup_r+0x92>
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e7f7      	b.n	8014c80 <__swsetup_r+0x9c>
 8014c90:	2000007c 	.word	0x2000007c

08014c94 <_raise_r>:
 8014c94:	291f      	cmp	r1, #31
 8014c96:	b538      	push	{r3, r4, r5, lr}
 8014c98:	4604      	mov	r4, r0
 8014c9a:	460d      	mov	r5, r1
 8014c9c:	d904      	bls.n	8014ca8 <_raise_r+0x14>
 8014c9e:	2316      	movs	r3, #22
 8014ca0:	6003      	str	r3, [r0, #0]
 8014ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca6:	bd38      	pop	{r3, r4, r5, pc}
 8014ca8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014caa:	b112      	cbz	r2, 8014cb2 <_raise_r+0x1e>
 8014cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cb0:	b94b      	cbnz	r3, 8014cc6 <_raise_r+0x32>
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f000 f830 	bl	8014d18 <_getpid_r>
 8014cb8:	462a      	mov	r2, r5
 8014cba:	4601      	mov	r1, r0
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cc2:	f000 b817 	b.w	8014cf4 <_kill_r>
 8014cc6:	2b01      	cmp	r3, #1
 8014cc8:	d00a      	beq.n	8014ce0 <_raise_r+0x4c>
 8014cca:	1c59      	adds	r1, r3, #1
 8014ccc:	d103      	bne.n	8014cd6 <_raise_r+0x42>
 8014cce:	2316      	movs	r3, #22
 8014cd0:	6003      	str	r3, [r0, #0]
 8014cd2:	2001      	movs	r0, #1
 8014cd4:	e7e7      	b.n	8014ca6 <_raise_r+0x12>
 8014cd6:	2400      	movs	r4, #0
 8014cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014cdc:	4628      	mov	r0, r5
 8014cde:	4798      	blx	r3
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	e7e0      	b.n	8014ca6 <_raise_r+0x12>

08014ce4 <raise>:
 8014ce4:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <raise+0xc>)
 8014ce6:	4601      	mov	r1, r0
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	f7ff bfd3 	b.w	8014c94 <_raise_r>
 8014cee:	bf00      	nop
 8014cf0:	2000007c 	.word	0x2000007c

08014cf4 <_kill_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4d07      	ldr	r5, [pc, #28]	; (8014d14 <_kill_r+0x20>)
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	4608      	mov	r0, r1
 8014cfe:	4611      	mov	r1, r2
 8014d00:	602b      	str	r3, [r5, #0]
 8014d02:	f7f3 fa95 	bl	8008230 <_kill>
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	d102      	bne.n	8014d10 <_kill_r+0x1c>
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	b103      	cbz	r3, 8014d10 <_kill_r+0x1c>
 8014d0e:	6023      	str	r3, [r4, #0]
 8014d10:	bd38      	pop	{r3, r4, r5, pc}
 8014d12:	bf00      	nop
 8014d14:	2000206c 	.word	0x2000206c

08014d18 <_getpid_r>:
 8014d18:	f7f3 ba82 	b.w	8008220 <_getpid>

08014d1c <__swhatbuf_r>:
 8014d1c:	b570      	push	{r4, r5, r6, lr}
 8014d1e:	460c      	mov	r4, r1
 8014d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d24:	2900      	cmp	r1, #0
 8014d26:	b096      	sub	sp, #88	; 0x58
 8014d28:	4615      	mov	r5, r2
 8014d2a:	461e      	mov	r6, r3
 8014d2c:	da0d      	bge.n	8014d4a <__swhatbuf_r+0x2e>
 8014d2e:	89a3      	ldrh	r3, [r4, #12]
 8014d30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d34:	f04f 0100 	mov.w	r1, #0
 8014d38:	bf0c      	ite	eq
 8014d3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d3e:	2340      	movne	r3, #64	; 0x40
 8014d40:	2000      	movs	r0, #0
 8014d42:	6031      	str	r1, [r6, #0]
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	b016      	add	sp, #88	; 0x58
 8014d48:	bd70      	pop	{r4, r5, r6, pc}
 8014d4a:	466a      	mov	r2, sp
 8014d4c:	f000 f848 	bl	8014de0 <_fstat_r>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	dbec      	blt.n	8014d2e <__swhatbuf_r+0x12>
 8014d54:	9901      	ldr	r1, [sp, #4]
 8014d56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d5e:	4259      	negs	r1, r3
 8014d60:	4159      	adcs	r1, r3
 8014d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d66:	e7eb      	b.n	8014d40 <__swhatbuf_r+0x24>

08014d68 <__smakebuf_r>:
 8014d68:	898b      	ldrh	r3, [r1, #12]
 8014d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d6c:	079d      	lsls	r5, r3, #30
 8014d6e:	4606      	mov	r6, r0
 8014d70:	460c      	mov	r4, r1
 8014d72:	d507      	bpl.n	8014d84 <__smakebuf_r+0x1c>
 8014d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d78:	6023      	str	r3, [r4, #0]
 8014d7a:	6123      	str	r3, [r4, #16]
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	6163      	str	r3, [r4, #20]
 8014d80:	b002      	add	sp, #8
 8014d82:	bd70      	pop	{r4, r5, r6, pc}
 8014d84:	ab01      	add	r3, sp, #4
 8014d86:	466a      	mov	r2, sp
 8014d88:	f7ff ffc8 	bl	8014d1c <__swhatbuf_r>
 8014d8c:	9900      	ldr	r1, [sp, #0]
 8014d8e:	4605      	mov	r5, r0
 8014d90:	4630      	mov	r0, r6
 8014d92:	f7fc f80f 	bl	8010db4 <_malloc_r>
 8014d96:	b948      	cbnz	r0, 8014dac <__smakebuf_r+0x44>
 8014d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d9c:	059a      	lsls	r2, r3, #22
 8014d9e:	d4ef      	bmi.n	8014d80 <__smakebuf_r+0x18>
 8014da0:	f023 0303 	bic.w	r3, r3, #3
 8014da4:	f043 0302 	orr.w	r3, r3, #2
 8014da8:	81a3      	strh	r3, [r4, #12]
 8014daa:	e7e3      	b.n	8014d74 <__smakebuf_r+0xc>
 8014dac:	89a3      	ldrh	r3, [r4, #12]
 8014dae:	6020      	str	r0, [r4, #0]
 8014db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db4:	81a3      	strh	r3, [r4, #12]
 8014db6:	9b00      	ldr	r3, [sp, #0]
 8014db8:	6163      	str	r3, [r4, #20]
 8014dba:	9b01      	ldr	r3, [sp, #4]
 8014dbc:	6120      	str	r0, [r4, #16]
 8014dbe:	b15b      	cbz	r3, 8014dd8 <__smakebuf_r+0x70>
 8014dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f000 f81d 	bl	8014e04 <_isatty_r>
 8014dca:	b128      	cbz	r0, 8014dd8 <__smakebuf_r+0x70>
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	f023 0303 	bic.w	r3, r3, #3
 8014dd2:	f043 0301 	orr.w	r3, r3, #1
 8014dd6:	81a3      	strh	r3, [r4, #12]
 8014dd8:	89a3      	ldrh	r3, [r4, #12]
 8014dda:	431d      	orrs	r5, r3
 8014ddc:	81a5      	strh	r5, [r4, #12]
 8014dde:	e7cf      	b.n	8014d80 <__smakebuf_r+0x18>

08014de0 <_fstat_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4d07      	ldr	r5, [pc, #28]	; (8014e00 <_fstat_r+0x20>)
 8014de4:	2300      	movs	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	4608      	mov	r0, r1
 8014dea:	4611      	mov	r1, r2
 8014dec:	602b      	str	r3, [r5, #0]
 8014dee:	f7f3 fa7e 	bl	80082ee <_fstat>
 8014df2:	1c43      	adds	r3, r0, #1
 8014df4:	d102      	bne.n	8014dfc <_fstat_r+0x1c>
 8014df6:	682b      	ldr	r3, [r5, #0]
 8014df8:	b103      	cbz	r3, 8014dfc <_fstat_r+0x1c>
 8014dfa:	6023      	str	r3, [r4, #0]
 8014dfc:	bd38      	pop	{r3, r4, r5, pc}
 8014dfe:	bf00      	nop
 8014e00:	2000206c 	.word	0x2000206c

08014e04 <_isatty_r>:
 8014e04:	b538      	push	{r3, r4, r5, lr}
 8014e06:	4d06      	ldr	r5, [pc, #24]	; (8014e20 <_isatty_r+0x1c>)
 8014e08:	2300      	movs	r3, #0
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	4608      	mov	r0, r1
 8014e0e:	602b      	str	r3, [r5, #0]
 8014e10:	f7f3 fa7d 	bl	800830e <_isatty>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_isatty_r+0x1a>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_isatty_r+0x1a>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	2000206c 	.word	0x2000206c

08014e24 <_init>:
 8014e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e26:	bf00      	nop
 8014e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e2a:	bc08      	pop	{r3}
 8014e2c:	469e      	mov	lr, r3
 8014e2e:	4770      	bx	lr

08014e30 <_fini>:
 8014e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e32:	bf00      	nop
 8014e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e36:	bc08      	pop	{r3}
 8014e38:	469e      	mov	lr, r3
 8014e3a:	4770      	bx	lr
